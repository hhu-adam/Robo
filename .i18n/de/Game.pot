msgid ""
msgstr "Project-Id-Version: Game v4.22.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: de\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#. §0: `f`
#. §1: ```
#. ∀ a b, f a = f b → a = b
#. ```
#: Game.Doc.Definition
msgid "Eine Abbildung §0 ist injektiv, wenn gilt:\n"
"\n"
"§1"
msgstr ""

#. §0: `f`
#. §1: ```
#. ∀ b, ∃ a, f a = b
#. ```
#: Game.Doc.Definition
msgid "Eine Abbildung §0 ist surjektiv, wenn gilt:\n"
"\n"
"§1"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Abbildung ist bijektiv, wenn sie injektiv und surjektiv ist."
msgstr ""

#. §0: `f`
#. §1: ```
#. ∀ ⦃a b⦄, a < b → f a < f b
#. ```
#: Game.Doc.Definition
msgid "Eine Abbildung §0 ist strikt monoton, wenn gilt:\n"
"\n"
"§1"
msgstr ""

#. §0: `Function.RightInverse f g`
#. §1: `LeftInverse g f`
#. §2: `∀ x, g (f x) = x`
#. §3: `Function.RightInverse`
#. §4: `RightInverse`
#. §5: `RightInverse`
#: Game.Doc.Definition
msgid "§0 ist als §1 definiert.\n"
"Das bedeutet im Klartext natürlich §2.\n"
"\n"
"Du musst leider §3  statt §4 schreiben,\n"
"da §5 Leansch mehrdeutig ist."
msgstr ""

#. §0: `LeftInverse g f`
#. §1: `g ∘ f = id`
#. §2: `∀ x, g (f x) = x`
#. §3: `unfold`
#: Game.Doc.Definition
msgid "§0 bedeutet §1, oder genauer:\n"
"§2, wie du mit §3 leicht siehst."
msgstr ""

#. §0: `HasRightInverse f`
#. §1: `f`
#. §2: `HasLeftInverse f`
#. §3: `f`
#: Game.Doc.Definition
msgid "§0 bedeutet, dass §1 ein Rechtsinverses besitzt.\n"
"\n"
"§2 bedeutet, dass §3 ein Linkssinverses besitzt."
msgstr ""

#. §0: `f : A → A`
#. §1: `a : A`
#. §2: `IsFixedPt f a`
#. §3: `f a = a`
#. §4: `unfold IsFixedPt`
#: Game.Doc.Definition
msgid "Für eine Selbstabbildung §0 und ein Element §1 ist §2 die Aussage §3.\n"
"Du kannst die Definition mit §4 leicht ausschreiben."
msgstr ""

#. §0: `f : A → A`
#. §1: `fixedPoints f : Set A`
#. §2: `f `
#. §3: `unfold fixedPoints`
#: Game.Doc.Definition
msgid "Für eine Abbildung §0 ist §1 die Menge der Fixpunkte von §2.\n"
"Du kannst die Definition mit §3 leicht ausschreiben."
msgstr ""

#. §0: `A`
#. §1: `B`
#. §2: `S`
#. §3: `A B : Set S`
#. §4: `A ∪ B`
#. §5: `∪`
#. §6: `\\union`
#: Game.Doc.Definition
msgid "Für zwei Teilmengen §0 und §1 von §2 (also §3) ist §4 ihre die Vereinigung.\n"
"Du schreibst §5 als §6."
msgstr ""

#. §0: `A`
#. §1: `B`
#. §2: `S`
#. §3: `A B : Set S`
#. §4: `A ∩ B`
#. §5: `∪`
#. §6: `\\inter`
#: Game.Doc.Definition
msgid "Für zwei Teilmengen §0 und §1 von §2 (also §3) ist §4 ihr Schnitt.\n"
"Du schreibst §5 als §6."
msgstr ""

#. §0: `f : A → B`
#. §1: `range f`
#. §2: `f`
#. §3: ```
#. range f = {f a | a : A}
#.         = {  b | ∃ a, f a = b}
#. ```
#. §4: `f '' univ`
#. §5: `mem_range`
#. §6: ```
#. x ∈ range f ↔ ∃ a, f a = b
#. ```
#: Game.Doc.Definition
msgid "Für eine Abbildung §0 ist §1 die gesamte Bildmenge von §2:\n"
"§3\n"
"Das ist also im Wesentlichen eine andere Schreibweise für §4.\n"
"Um damit zu arbeiten, ist §5 ganz nützlich:\n"
"§6"
msgstr ""

#. §0: `f : A → B`
#. §1: `image f : Set A → Set B`
#. §2: `A`
#. §3: `f '' A`
#. §4: `f`
#: Game.Doc.Definition
msgid "Für eine Abbildung §0 ist §1\n"
"eine der induzierten Abbildung auf den Potenzmengen –\n"
"sie bildet eine Teilmenge von §2 ab auf das Bild §3 dieser Teilmenge unter §4."
msgstr ""

#. §0: `f : A → B`
#. §1: `preimage f : Set B → Set A`
#. §2: `B`
#. §3: `f ⁻¹' A`
#. §4: `f`
#: Game.Doc.Definition
msgid "Für eine Abbildung §0 ist §1\n"
"eine der induzierten Abbildung auf den Potenzmengen –\n"
"sie bildet eine Teilmenge von §2 ab auf das Urbild §3 dieser Teilmenge unter §4."
msgstr ""

#. §0: `f : A → B`
#. §1: `S`
#. §2: `A`
#. §3: ```
#. f '' S = {f a | a ∈ S}
#.        = {b | ∃ a ∈ S, f a = b}
#. ```
#. §4: `f`
#. §5: `f`
#. §6: `''`
#: Game.Doc.Definition
msgid "Für eine Abbildung §0 und eine Teilmenge §1 von §2 ist\n"
"§3\n"
"ihr Bild unter §4.  Beachte das Leerzeichen zwischen §5 und §6."
msgstr ""

#. §0: `f : A → B`
#. §1: `T`
#. §2: `B`
#. §3: ```
#. f ⁻¹' T = { a | f a ∈ T}
#. ```
#. §4: `f`
#. §5: `f \\-1'`
#. §6: `f`
#. §7: `\\-1'`
#: Game.Doc.Definition
msgid "Für eine Abbildung §0 und eine Teilmenge §1 von §2 ist\n"
"§3\n"
"ihr Urbild unter §4.\n"
"Du schreibst das als §5.\n"
"Beachte das Leerzeichen zwischen §6 und §7."
msgstr ""

#. §0: `fun x ↦ _`
#. §1: `fun (x : ℤ) ↦  -x`
#. §2: `ℤ → ℤ`
#. §3: `↦`
#. §4: `\\maps`
#. §5: `\\mapsto`
#. §6: `↦`
#. §7: `=>`
#: Game.Doc.Definition
msgid "Die Notation §0 wird verwendet, um „anonyme Funktionen“ zu definieren.\n"
"Zum Beispiel definiert §1 die Negation §2, ohne ihr einen Namen zu geben.\n"
"Den Pfeil §3 schreibst du als §4 oder §5.\n"
"Alternativ kannst du statt §6 auch §7 verwenden."
msgstr ""

#. §0: `A : Set T`
#. §1: `A`
#. §2: `T`
#. §3: `A`
#. §4: `T`
#: Game.Doc.Definition
msgid "§0 bedeutet, dass §1 eine Teilmenge von §2 ist\n"
"(oder genauer, dass §3 eine Menge ist, die aus Elementen vom Typ §4 besteht)."
msgstr ""

#. §0: `A : Set T`
#. §1: `a`
#. §2: `T`
#. §3: `T`
#. §4: `a ∈ A`
#. §5: `a`
#. §6: `A`
#. §7: `A = { a : T | P a }`
#. §8: `a ∈ A`
#. §9: `simp`
#. §10: `P a`
#: Game.Doc.Definition
msgid "Für eine Teilmenge §0 und ein Element §1 aus §2 (genauer: vom Typ §3) bedeutet §4, dass\n"
"§5 in §6 liegt.\n"
"\n"
"Für Teilmengen der Form §7 kannst du die Aussage\n"
"§8 mit §9 zu §10 vereinfachen."
msgstr ""

#. §0: `P : T → Prop`
#. §1: `{ a : T | P a } : Set P`
#. §2: ```
#. { n : ℕ | Even n }
#. ```
#. §3: `a ∈ { a : T | P a }`
#. §4: `simp`
#. §5: `P a`
#: Game.Doc.Definition
msgid "Für ein Prädikat §0 ist §1 die Teilmenge,\n"
"die aus all jenen Elementen besteht, die das Prädikat erfüllen.  Zum Beispiel ist\n"
"§2\n"
"die Menge der geraden natürlichen Zahlen.\n"
"\n"
"Die Aussage §3 kannst du mit §4 zu §5 vereinfachen."
msgstr ""

#. §0: `(A B : Set T)`
#. §1: `A\\B`
#. §2: `A`
#. §3: `B`
#. §4: `A`
#. §5: `B`
#: Game.Doc.Definition
msgid "Für zwei Teilmengen §0 ist §1 die Differenz aus §2 and §3,\n"
"bestehend aus allen Elementen von §4, die nicht in §5 liegen."
msgstr ""

#. §0: `A B : Set T`
#. §1: `A ⊆ B`
#. §2: `A`
#. §3: `B`
#. §4: `rw [subset_iff]`
#. §5: `A ⊆ B`
#. §6: `∀ x, x ∈ A → x ∈ B`
#. §7: `A ⊆ B`
#. §8: `intro a ha`
#. §9: `a`
#. §10: `ha : a ∈ A`
#. §11: `a ∈ B`
#. §12: `h : A ⊆ B`
#. §13: `a`
#. §14: `ha : a ∈ A`
#. §15: `have hb := h ha`
#. §16: `hb : a ∈ B`
#. §17: `⊆`
#. §18: `\\subset`
#: Game.Doc.Definition
msgid "Für §0 bedeutet §1, dass §2 in §3 enthalten ist.\n"
"\n"
"Mit §4 kannst du §5 zu §6 umschreiben.\n"
"\n"
"Ist §7 das Beweisziel, kannst du auch direkt mit §8\n"
"ein Element §9 mit §10 wählen (und dann §11 zeigen).\n"
"\n"
"Ist §12 eine Annahme, und ist ein Element §13 mit §14 gegeben,\n"
"erhältst du mit §15 die Aussage §16.\n"
"\n"
"Du schreibst §17 als §18."
msgstr ""

#. §0: `∅ : Set T`
#. §1: `∅ : Set ℕ`
#. §2: `∅ : Set ℝ`
#. §3: `rw [eq_empty_iff_forall_not_mem]`
#. §4: `S = ∅`
#. §5: `∀ (x : T), x ∉ s`
#. §6: `∅`
#. §7: `\\emptyset`
#: Game.Doc.Definition
msgid "§0 ist die leere Teilmenge.\n"
"Im Formaloversum ist also §1 etwas anderes als §2\n"
"– das eine ist eine Teilmenge von ℕ, das andere eine Teilmenge von ℝ!\n"
"\n"
"Mit §3 überführst du eine Gleichung der Form §4 in die\n"
"Aussage §5.\n"
"\n"
"Du schreibst §6 als §7."
msgstr ""

#. §0: `univ : Set T`
#. §1: `T`
#. §2: `rw [eq_univ_iff_forall]`
#. §3: `S = univ`
#. §4: `∀ (x : T), x ∈ S`
#: Game.Doc.Definition
msgid "§0 ist die „Teil“menge, die aus *allen* Elementen vom Typ §1 besteht.\n"
"\n"
"Mit §2 überführst du eine Gleichung der Form §3 in die\n"
"Aussage §4."
msgstr ""

#. §0: `A : Finset T`
#. §1: `a : T`
#. §2: `insert a A`
#. §3: `A ∪ {a}`
#. §4: `a`
#. §5: `A`
#. §6: `insert a A = A`
#: Game.Doc.Definition
msgid "Für eine endliche Teilmenge §0 und ein Element §1 ist\n"
"§2 eine andere Schreibweise für §3.\n"
"Sollte §4 bereits in §5 liegen, ist offenbar §6."
msgstr ""

#. §0: `A : Finset T`
#. §1: `a : T`
#. §2: `erase A a`
#. §3: `A \\ {a}`
#. §4: `a`
#. §5: `A`
#. §6: `erase A a = A`
#: Game.Doc.Definition
msgid "Für eine endliche Teilmenge §0 und ein Element §1 ist\n"
"§2 eine andere Schreibweise für §3.\n"
"Falls §4 gar nicht in §5 liegt, ist offenbar §6."
msgstr ""

#. §0: `A : Finset T`
#. §1: `card A : ℕ`
#. §2: `A`
#. §3: `A`
#: Game.Doc.Definition
msgid "Für eine endliche Teilmenge §0 ist §1 die Kardinalität von §2,\n"
"also die Anzahl der Elemente in §3."
msgstr ""

#. §0: `n : ℕ`
#. §1: `Fin n`
#. §2: $\\{0, \\dots, n-1\\}$
#. §3: `Fin n`
#. §4: `Icc 0 (n-1)`
#. §5: `Fin n`
#. §6: `Fin n : Type`
#. §7: `Icc 0 (n-1) : Finset ℕ`
#. §8: `ℕ`
#: Game.Doc.Definition
msgid "Für §0 ist §1 die Menge §2.\n"
"\n"
"(§3 ist zu unterscheiden von §4:\n"
"§5 ist eine Menge, oder genauer ein Typ, also §6,\n"
"während §7 eine endliche Teilmenge von §8 ist.)"
msgstr ""

#. §0: `Nonempty T`
#. §1: `T`
#. §2: `T`
#. §3: `h : Nonempty T`
#. §4: `t : T`
#. §5: `obtain ⟨t⟩ := h`
#. §6: `t : T`
#. §7: `Nonempty T`
#. §8: `use t`
#. §9: `A : Set T`
#. §10: `Nonemty A`
#. §11: `∃ x, x ∈ A`
#. §12: `unfold Nonempty`
#: Game.Doc.Definition
msgid "§0 bedeutet, dass ein Element in §1 („vom Typ §2“) existiert.\n"
"Ist §3 als Annahme gegeben, erhalten wir ein Element §4 mit §5.\n"
"Haben wir umgekehrt bereits ein Element §6 gegeben oder konstruiert,\n"
"so können wir §7 mit §8 beweisen.\n"
"\n"
"Analog ist für eine Teilmenge §9 die Aussage §10 definiert als als §11.\n"
"Das kannst du in diesem Fall leicht mit §12 überprüfen."
msgstr ""

#. §0: `A : Set T`
#. §1: `Set.Finite A`
#. §2: `A`
#. §3: `h : Set.Finite A`
#. §4: `h.toFinset : Finset T`
#. §5: `A`
#: Game.Doc.Definition
msgid "Für eine Teilmenge §0 bedeutet §1, dass §2 nur endlich viele Elemente hat.\n"
"Ist §3 als Annahme gegeben, so ist §4 dieselbe Teilmenge §5,\n"
"aber nun explizit als endliche Teilmenge aufgefasst."
msgstr ""

#. §0: `(A : Prop)`
#. §1: `(True : Prop)`
#. §2: `(False : Prop)`
#: Game.Doc.Definition
msgid "§0 ist eine beliebige Aussage, ohne weitere Angabe, ob diese wahr, falsch oder\n"
"nicht beweisbar ist.\n"
"\n"
"Siehe auch §1 und §2 für die uneingeschränkt wahre bzw.\\\\ unwahre\n"
"Aussage."
msgstr ""

#. §0: `A ∧ B`
#. §1: `A`
#. §2: `B`
#. §3: `A ∧ B`
#. §4: `constructor`
#. §5: `A`
#. §6: `B`
#. §7: `A ∧ B`
#. §8: `obtain ⟨h₁, h₂⟩ := h`
#. §9: `h : A ∧ B`
#. §10: `h₁ : A`
#. §11: `h₂ : B`
#: Game.Doc.Definition
msgid "§0 (\"und\") ist die Aussage, dass sowohl §1 als auch §2 wahr ist.\n"
"\n"
"## §3 als Beweisziel\n"
"\n"
"Die Taktik §4 erlaubt dir, die beiden Teilaussagen §5 und §6 einzeln zu beweisen.\n"
"\n"
"## §7 als Annahme\n"
"\n"
"Mit §8 zerlegst du eine Annahme der Form §9\n"
"in ihre Bestandteile §10 und §11."
msgstr ""

#. §0: `A ∨ B`
#. §1: `A`
#. §2: `B`
#. §3: `A ∨ B`
#. §4: `left`
#. §5: `right`
#. §6: `A ∨ B`
#. §7: `A`
#. §8: `B`
#. §9: `A`
#. §10: `B`
#. §11: ```
#. obtain h | h := h
#. ```
#: Game.Doc.Definition
msgid "§0 (\"oder\") ist die Aussage, dass mindestens eine der Aussagen §1, §2 wahr ist.\n"
"\n"
"## §3 als Beweisziel\n"
"\n"
"Die Taktik §4 bzw. §5 kannst du dich entscheiden,\n"
"welche Aussage du beweisen möchtest.\n"
"\n"
"## §6 als Annahme\n"
"\n"
"Da du nicht weißt, welche der Aussagen §7, §8 du voraussetzen kannst,\n"
"musst du das Beweisziel unter Umständen zweimal zeigen:\n"
"einmal unter der Annahme §9, einmal unter der Annahme §10.\n"
"Für dieses Vorgehen verwendest du die Taktik\n"
"§11"
msgstr ""

#. §0: `A B : Prop`
#. §1: `A → B`
#. §2: `A`
#. §3: `B`
#. §4: `X Y : Type`
#. §5: `X → Y`
#. §6: `X`
#. §7: `Y`
#. §8: `A → B`
#. §9: `intro h`
#. §10: `h : A`
#. §11: `B`
#. §12: `apply`
#: Game.Doc.Definition
msgid "Für §0 ist §1 die Implikation „§2 impliziert §3“.\n"
"Für andere §4 ist §5 eine Abbildung, die Werte aus §6 nach §7 abbildet.\n"
"\n"
"## Implikation als Beweisziel\n"
"\n"
"Ist dein Beweisziel eine Implikation §8, so kannst du mit §9 §10 annehmen,\n"
"und musst dann §11 beweisen.\n"
"\n"
"## Implikation als Annahme\n"
"\n"
"Um eine Implikation unter deinen Annahmen zu verwenden, benutzt du die Taktik §12."
msgstr ""

#. §0: `A ↔ B`
#. §1: `A`
#. §2: `B`
#. §3: `↔`
#. §4: `A ↔ B`
#. §5: `constructor`
#. §6: `A → B`
#. §7: `B → A`
#. §8: `↔`
#. §9: `h : A ↔ B`
#. §10: `obtain ⟨h₁, h₂⟩ := h`
#. §11: `h₁ : A → B`
#. §12: `h₂ : B → A`
#. §13: `h.mp`
#. §14: `h.mpr`
#. §15: `mp`
#: Game.Doc.Definition
msgid "§0 bedeutet, dass die Aussagen §1 und §2 logisch äquivalent sind („genau dann, wenn“).\n"
"\n"
"## §3als Beweisziel\n"
"\n"
"Um §4 zu zeigen, kannst du beispielsweise §5 aufrufen\n"
"und dann separat §6 und §7 beweisen.\n"
"\n"
"## §8 als Annahme\n"
"\n"
"Eine Annahme der Form §9 kannst du mit §10 in die beiden Bestandteile\n"
"§11 und §12 zerlegen.\n"
"Du kannst aber auch mit §13 und §14 direkt auf diese Bestandteil Bezug nehmen.\n"
"(Die Abkürzung §15 steht für „modus ponens“.)"
msgstr ""

#. §0: `P : A → Prop`
#. §1: `∃ a : A, P a`
#. §2: `a`
#. §3: `A`
#. §4: `A`
#. §5: `P a`
#. §6: `A`
#. §7: `∃ a : A, true`
#. §8: `Nonempty A`
#. §9: `∃`
#. §10: `∃ a : A, …`
#. §11: `a`
#. §12: `use`
#. §13: `use a`
#. §14: `∃`
#. §15: `h : ∃ a : A, P a`
#. §16: `choose a ha using h`
#. §17: `obtain ⟨a, ha⟩ := h`
#. §18: `a : A`
#. §19: `ha : P a`
#: Game.Doc.Definition
msgid "Existenzieller Quantor: Ist §0 ein Prädikat, so ist\n"
"§1 die Aussage, dass ein Element §2 in §3 (genauer: vom Typ §4)\n"
"existiert, für das die Aussage §5 wahr ist.\n"
"Eine reine Existenzaussage („es gibt ein Element vom Typ §6)\n"
"lässt sich zum Beispiel als §7 oder als §8 formulieren.\n"
"\n"
"## §9 als Beweisziel\n"
"\n"
"Um eine Aussage der Form §10 zu beweisen,\n"
"konstruierst du ein geeignetes Element §11 und nutzt dann die §12-Taktik (§13).\n"
"\n"
"## §14 als Annahme\n"
"\n"
"Eine Annahme der Form §15 kannst du mit\n"
"§16 oder §17 in ihre Bestandteile §18 und §19\n"
"zerlegen."
msgstr ""

#. §0: `P : A → Prop`
#. §1: `∃! a : A, P a`
#. §2: `a`
#. §3: `A`
#. §4: `A`
#. §5: `P a`
#. §6: `a`
#. §7: `a`
#. §8: `∃!`
#. §9: `∃! a : A, …`
#. §10: `a`
#. §11: `use`
#. §12: `use a`
#. §13: `simp`
#. §14: `P a ∧ ∀ a' : A, P a' → a' = a`
#. §15: `P a`
#. §16: `a`
#. §17: `a`
#. §18: `∃!`
#. §19: `h : ∃! a : A, P a`
#. §20: ```
#.   obtain ⟨a, h_exists, h_unique⟩ := h
#.   simp at h_unique
#. ```
#. §21: ```
#.    a : A
#.    h_exists : P a
#.    h_unique : ∀ (y : A), P y → y = a
#. ```
#: Game.Doc.Definition
msgid "Existenzieller Quantor: Ist §0 ein Prädikat, so ist\n"
"§1 die Aussage, dass *genau ein* Element §2 in §3 (genauer: vom Typ §4)\n"
"existiert, für das die Aussage §5 wahr ist.\n"
"Die Aussage hat also zwei Teile: erstens existiert\n"
"solch ein §6, zweitens ist §7 eindeutig.\n"
"\n"
"## §8 als Beweisziel\n"
"\n"
"Um eine Aussage der Form §9 zu beweisen, konstruierst du zunächst ein geeignetes Element §10 und\n"
"nutzt dann die §11-Taktik (§12), in der Regel unmittelbar gefolgt von §13.\n"
"Danach sollte das Beweisziel folgende Form haben:\n"
"\n"
"§14\n"
"\n"
"Links steht §15: du musst noch zeigen, dass §16 die geforderte Eigenschaft hat.\n"
"Rechts steht die Eindeutigkeitsaussage: jedes Element mit dieser Eigenschaft ist gleich §17.\n"
"\n"
"## §18 als Annahme\n"
"\n"
"Eine Annahme der Form §19 kannst du mit\n"
"\n"
"§20\n"
"in die Bestandteile\n"
"§21\n"
"zerlegen."
msgstr ""

#. §0: `P : A → Prop`
#. §1: `∀ a : A, P a`
#. §2: `P a`
#. §3: `a`
#. §4: `A`
#. §5: `a`
#. §6: `A`
#. §7: `∀`
#. §8: `∀ a : A, …`
#. §9: `intro a`
#. §10: `a`
#. §11: `∀`
#. §12: `h : ∀ a : A, P a`
#. §13: `a₀ : A`
#. §14: `h a₀`
#. §15: `P a₀`
#. §16: `specialize h a₀`
#. §17: `a`
#. §18: `h : P a₀`
#. §19: `a₀`
#: Game.Doc.Definition
msgid "Universeller Quantor: Ist §0 ein Prädikat, so ist\n"
"§1 die Aussage, dass die Aussage §2 für alle §3 in §4\n"
"(genauer: für alle §5 vom Typ §6) wahr sei.\n"
"\n"
"## §7 als Beweisziel\n"
"\n"
"Um eine Aussage der Form §8 zu beweisen, wählst du mit §9 zunächst ein\n"
"beliebiges Element §10.\n"
"\n"
"## §11 als Annahme\n"
"\n"
"Ist §12 eine Annahme und §13 ein konkretes Element, so ist §14\n"
"eine Notation für §15.\n"
"Du kannst auch mit §16 die gegebene Annahme\n"
"über alle möglichen §17 zu einer Annahme §18 über dieses konkrete §19 einschränken."
msgstr ""

#. §0: `True : Prop`
#. §1: `True`
#. §2: `tauto`
#. §3: `decide`
#. §4: `True`
#. §5: `True`
#. §6: `True`
#: Game.Doc.Definition
msgid "Die Aussage §0 ist immer wahr.\n"
"\n"
"## §1 als Beweisziel\n"
"\n"
"Die Taktiken §2 und §3 schließen jeden Beweis mit §4 als Beweisziel.\n"
"\n"
"## §5 als Annahme\n"
"\n"
"Als Annahme ist §6 überhaupt nicht hilfreich."
msgstr ""

#. §0: `False : Prop`
#. §1: `False`
#. §2: `False`
#. §3: `contradiction`
#. §4: `False`
#. §5: `h : ¬ A`
#. §6: `apply h`
#. §7: `A`
#. §8: `¬ A`
#. §9: `A → False`
#. §10: `False`
#. §11: `False`
#. §12: `contradiction`
#: Game.Doc.Definition
msgid "Die Aussage §0 ist immer falsch.\n"
"\n"
"## §1 als Beweisziel\n"
"\n"
"Ist §2 dein Beweisziel, kannst du zum Beispiel versuchen, in deinen Annahmen einen Widerspruch zu finden.\n"
"Sobald der Widerspruch hinreichend evident ist, schließt §3 einen solchen Beweis.\n"
"\n"
"Ist §4 dein Beweisziel und du hast eine Annahme oder ein Lemma der Form §5 zur Verfügung,\n"
"so kannst du mit §6 das Beweisziel zu §7 ändern\n"
"(denn §8 bedeutet §9).\n"
"\n"
"## §10  als Annahme\n"
"\n"
"Liegt dir §11 als Annahme vor, kannst du den Beweis sofort mit §12 beenden\n"
"– denn aus einer falschen Aussage folgt bekanntlich jede andere."
msgstr ""

#. §0: `¬ A`
#. §1: `A`
#. §2: `A → False`
#. §3: `push_neg`
#. §4: `by_contra`
#. §5: `contrapose`
#. §6: `h : ¬ A`
#. §7: `apply`
#. §8: `False`
#: Game.Doc.Definition
msgid "§0 ist die logische Negation von §1.\n"
"Sie ist intern als §2 implementiert.\n"
"\n"
"Nützliche Taktiken sind: §3, §4, §5.\n"
"Außerdem kannst du eine Annahme der Form §6 mit §7 auf das Beweisziel §8 anwenden."
msgstr ""

#. §0: `rfl`
#. §1: `rw`
#. §2: `trans`
#: Game.Doc.Definition
msgid "Nützliche Taktiken für Gleicheit sind: §0, §1, §2"
msgstr ""

#. §0: `x ≠ y`
#. §1: `¬ x = y`
#. §2: `unfold Ne`
#: Game.Doc.Definition
msgid "Ungleichheit §0 ist definiert als §1.  Du siehst das mit §2."
msgstr ""

#. §0: `Even n`
#. §1: `n : ℕ`
#. §2: ```
#. ∃ r : ℕ, n = r + r
#. ```
#. §3: `unfold Even`
#: Game.Doc.Definition
msgid "§0 ist die Aussage, dass §1 gerade ist:\n"
"§2\n"
"Das kannst du leicht mit §3 prüfen."
msgstr ""

#. §0: `Odd n`
#. §1: `n : ℕ`
#. §2: ```
#. ∃ k : ℕ, n = 2 * k + 1
#. ```
#. §3: `unfold Odd`
#: Game.Doc.Definition
msgid "§0 ist die Aussage, dass §1 ungerade ist:\n"
"§2\n"
"Das kannst du leicht mit §3 prüfen."
msgstr ""

#. §0: `n : ℕ`
#. §1: `Prime n`
#. §2: `n`
#. §3: `prime_def`
#: Game.Doc.Definition
msgid "Für §0 bedeutet §1, dass §2 eine Primzahl ist.\n"
"Um mit dieser Definition zu arbeiten, ist es oft hilfreich, sie mit dem Lemma\n"
"§3 umzuschreiben."
msgstr ""

#. §0: `succ : ℕ → ℕ`
#. §1: `n ↦ n + 1`
#: Game.Doc.Definition
msgid "§0 ist die Abbildung §1.\n"
"Sie bildet also eine natürliche Zahl auf ihren Nachfolger (englisch *successor*) ab."
msgstr ""

#. §0: `n : ℤ`
#. §1: `n.toNat : ℕ`
#. §2: `n : ℤ`
#. §3: `n.toNat : ℕ`
#. §4: `n : ℕ`
#. §5: `(n : ℤ)`
#. §6: `↑n`
#: Game.Doc.Definition
msgid "Ist §0 eine ganze Zahl größergleich 0, so ist §1 dieselbe Zahl, aufgefasst als natürliche Zahl.\n"
"(Ist §2 eine negative ganze Zahl, so ist §3 ebenfalls definiert, aber ihr Wert hat keine mathematische Bedeutung.)\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Eine natürliche Zahl §4 lässt sich stets als ganze Zahl auffassen.\n"
"Dafür schreibst du sie entweder explizit als §5 oder als §6."
msgstr ""

#. §0: `x : ℝ`
#. §1: `|x|`
#. §2: `x`
#. §3: `|`
#: Game.Doc.Definition
msgid "Für §0 ist §1 der Betrag von §2.\n"
"(Hier ist §3 der gewöhnliche senkrechte Strich auf der Tastatur.)"
msgstr ""

#. §0: `I : Finset T`
#. §1: `∑ i ∈ I, f i`
#. §2: $\\sum_{i\\in I} f(i)$
#. §3: `\\sum`
#: Game.Doc.Definition
msgid "Für eine endliche Indexmenge §0 ist §1 die leansche Schreibweise für die Summe\n"
"§2.  Du schreibst das Summenzeichen als §3."
msgstr ""

#. §0: `I : Finset T`
#. §1: `∏ i ∈ I, f i`
#. §2: $\\prod_{i\\in I} f(i)$
#. §3: `\\prod`
#: Game.Doc.Definition
msgid "Für eine endliche Indexmenge §0 ist §1 die leansche Schreibweise für das Produkt\n"
"§2.  Du schreibst das Produktzeichen als §3."
msgstr ""

#. §0: `P : MvPolynomial (Fin n) R`
#. §1: `P`
#. §2: `n`
#. §3: `X 0`
#. §4: `X (n-1)`
#. §5: `R`
#: Game.Doc.Definition
msgid "§0 bedeutet, dass §1 ein Polynomial in §2 Unbestimmten\n"
"§3, …, §4 mit Koeffizienten in §5 ist."
msgstr ""

#. §0: `A`
#. §1: `trace A`
#. §2: `A`
#. §3: `∑ i, A i i`
#: Game.Doc.Definition
msgid "Für eine Matrix §0 ist §1 die Spur von §2. Der Ausdruck ist auch auf Leansch äquivalent zu §3."
msgstr ""

#. §0: `apply`
#. §1: `hAB : A → B`
#. §2: `⊢ B`
#. §3: `apply hAB`
#. §4: `⊢ A`
#. §5: `h : A `
#. §6: `apply hAB at h`
#. §7: `h : B`
#. §8: `hAB`
#: Game.Doc.Tactic
msgid "Mit §0 wendest du eine Implikation §1 an:\n"
"\n"
"| vorher | Taktik           | nachher |\n"
"|:------------ |:---------------- |:-------- |\n"
"| §2        | §3      | §4    |\n"
"| §5     | §6 | §7  |\n"
"\n"
"In beiden Fällen kann die Implikation §8 wahlweise\n"
"als Annahme gegeben oder ein bereits bekanntes Lemma sein."
msgstr ""

#. §0: `assumption`
#: Game.Doc.Tactic
msgid "Die Taktik §0 schließt den Beweis, wenn eine der Annahmen genau dem Beweisziel entspricht."
msgstr ""

#. §0: `by_cases h : P`
#. §1: `P`
#. §2: `by cases h : a = b`
#. §3: `a = b`
#. §4: `a ≠ b`
#. §5: `(h : P)`
#. §6: `(h : ¬P)`
#: Game.Doc.Tactic
msgid "Die Taktik §0 beginnt eine Fallunterscheidung, ob §1 wahr oder falsch ist.\n"
"Zum Beispiel unterscheidet §2 die Fälle §3 und §4.\n"
"\n"
"Das Beweisziel wird hierzu dupliziert, und\n"
"in der ersten „Kopie“ wird die Annahme §5 hinzugefügt,\n"
"in der zweiten „Kopie“ die Annahme §6."
msgstr ""

#. §0: `by_contra h`
#. §1: `P`
#. §2: `by_contra h`
#. §3: `(h : ¬ P)`
#. §4: `False`
#. §5: `contradiction`
#. §6: `A → B`
#. §7: `contrapose`
#: Game.Doc.Tactic
msgid "Die Taktik §0 leitet einen Widerspruchsbeweis ein.\n"
"Ist §1 dein aktuelles Beweisziel, so generiert §2 eine neue Annahme §3\n"
"und setzt das Beweisziel auf §4.\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"* Am Ende eines Widerspruchsbeweises steht gewöhnlich §5:\n"
"diese Taktik schließt den Beweis, wenn sie zwei offensichtlich widersprüchliche Annahmen findet.\n"
"* Ist das Beweisziel von der Form §6, kannst du mit §7\n"
"einen Beweis durch Kontraposition beginnen."
msgstr ""

#. §0: ```
#. h : ∃ (b : B), P b
#. ```
#. §1: `choose b hb using h`
#. §2: `b : A`
#. §3: `hb : P b`
#. §4: `choose`
#. §5: ```
#. h : ∀ (a : A), ∃ (b : B), P a b
#. ```
#. §6: `choose f hf using h`
#. §7: `f : A → B`
#. §8: `hf : ∀ (a : A), P a (f a)`
#. §9: `P : A → (B → Prop)`
#. §10: `a`
#. §11: `b`
#: Game.Doc.Tactic
msgid "Eine Annahme der Form\n"
"§0\n"
"kannst du mit\n"
"§1 in die Bestandteile §2 und §3\n"
"zerlegen.\n"
"\n"
"Allgemeiner kannst du §4 verwenden, um Elemente mit dem Auswahlaxiom zu wählen:\n"
"aus einer Annahme der Form\n"
"§5\n"
"extrahiert §6\n"
"eine Abbildung §7 und die Annahme §8.\n"
"\n"
"(Hier ist §9 ein Prädikat, das von zwei Variablen §10 und §11 abhängt.)"
msgstr ""

#. §0: `constructor`
#. §1: `⊢ A ∧ B`
#. §2: `⊢ A`
#. §3: `⊢ B`
#. §4: `⊢ A ↔ B`
#. §5: `⊢ A → B`
#. §6: `⊢ B → A`
#. §7: `obtain`
#. §8: `A ∨ B`
#. §9: `left`
#. §10: `right`
#: Game.Doc.Tactic
msgid "Die Taktik §0 teilt ein Beweisziel in seine Bestandteile auf:\n"
"\n"
"| vorher | nachher                |\n"
"|:------------ |:----------------------- |\n"
"| §1    | §2 und §3         |\n"
"| §4    | §5 und §6 |\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"* Eine *Annahme* zerlegst du mit §7 in ihre Bestandteile.\n"
"* Möchtest du §8 beweisen, musst du dich mit §9 bzw. §10 für eine Seite entscheiden."
msgstr ""

#. §0: `contradiction`
#. §1: `h : n ≠ n`
#. §2: `h : A`
#. §3: `h' : ¬A`
#. §4: `h : False`
#. §5: `contradiction`
#. §6: `by_contra`
#: Game.Doc.Tactic
msgid "Die Taktik §0 schließt den Beweis, wenn sie einen Widerspruch in den Annahmen findet.\n"
"Ein solcher Widerspruch kann zum Beispiel folgendermaßen aussehen:\n"
"\n"
"* §1\n"
"* §2 und §3\n"
"* §4\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Normalerweise wird §5 benutzt, um einen Widerspruchsbeweis zu\n"
"schließen, der mit §6 eröffnet wurde."
msgstr ""

#. §0: `contrapose`
#. §1: `A → B`
#. §2: `¬B → ¬A`
#. §3: `revert h`
#. §4: `contrapose`
#: Game.Doc.Tactic
msgid "Die Taktik §0 ändert ein Beweisziel der Form §1 zu §2 und leitet somit\n"
"einen Beweis durch Kontraposition ein.\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Die Taktik §3 kann nützlich sein, um eine Annahme als Implikationsprämisse zu schreiben,\n"
" bevor du §4 verwendest."
msgstr ""

#. §0: ```
#. A = B
#. ```
#. §1: `T`
#. §2: `A B : Set T`
#. §3: `ext x`
#. §4: ```
#. x ∈ A ↔ x ∈ B
#. ```
#: Game.Doc.Tactic
msgid "Zwei Teilmengen einer gegebenen Menge sind gleich, wenn sie dieselben Elemente besitzen.\n"
"Steht im Beweisziel\n"
"§0\n"
"für zwei Teilmengen von §1 (also für §2),\n"
"so überführt §3 das Beweisziel in die Äquivalenz\n"
"§4"
msgstr ""

#. §0: ```
#. f = g
#. ```
#. §1: `f g : X → Y`
#. §2: `funext x`
#. §3: ```
#. f x = g x
#. ```
#: Game.Doc.Tactic
msgid "Zwei Abbildungen mit demselben Werte- und Definitionsbereich sind gleich,\n"
"wenn sie auf allen Elementen des Definitionsbereichs dieselben Werte annehmen.\n"
"Ein Beweisziel der Form\n"
"§0\n"
"für Abbildungen §1 wird durch §2\n"
"in die Gleichung\n"
"§3\n"
"überführt."
msgstr ""

#. §0: `generalize`
#. §1: `generalize h : a = b`
#. §2: `a`
#. §3: `b`
#. §4: `h : a = b`
#. §5: ```
#. Even x ∨ ¬Even x
#. ```
#. §6: ```
#. generalize h : (Even x) = A
#. ```
#. §7: ```
#. A ∨ ¬A
#. ```
#. §8: `tauto`
#: Game.Doc.Tactic
msgid "Mit §0 kannst du ein Beweisziel verallgemeinern\n"
"– in der Hoffnung, dass ein höherer Abstraktionsgrad einen einfacheren Beweis erlaubt.\n"
"Genauer ersetzt §1 alle Vorkommen von §2 im Beweisziel durch §3\n"
"(und ergänzt die Annahme §4).\n"
"\n"
"## Beispiel\n"
"\n"
"Ein Ziel der Form\n"
"§5\n"
"lässt sich mit\n"
"§6\n"
"in\n"
"§7\n"
"überführen (und dann einfach mit §8 beweisen)."
msgstr ""

#. §0: `have h : P`
#. §1: `suffices h : P`
#: Game.Doc.Tactic
msgid "Mit §0 führst du ein Zwischenresultat ein.\n"
"Anschließend musst du zuerst dieses Zwischenresultat beweisen,\n"
"bevor du den eigentlichen Beweis fortsetzen kannst.\n"
"\n"
"## Freunde und Verwandte\n"
"§1 funktioniert genauso, außer dass du zunächst den Hauptweise forsetzen kannst und\n"
"erst ganz am Ende dein Zwischenresultat beweisen musst."
msgstr ""

#. §0: `if … then … else`
#. §1: `fun x ↦ if 0 ≤ x then x else -x`
#. §2: `h : A`
#. §3: `rw [if_pos h]`
#. §4: `if A then B else C`
#. §5: `B`
#. §6: `h : ¬ A`
#. §7: `rw [if_neg h]`
#. §8: `if A then B else C`
#. §9: `C`
#: Game.Doc.Tactic
msgid "Mit §0 kannst du Abbildungen mit zwei Definitionszweigen definieren.\n"
"\n"
"Zum Beispiel definiert §1 die Betragsfunktion.\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"* Hast du §2 als Annahme zur Verfügung, kannst du mit\n"
"§3 den Ausdruck §4 zu §5 reduzieren.\n"
"* Hast du §6 als Annahme zur Verfügung, kannst du analog mit\n"
"§7 den Ausdruck §8 zu §9 reduzieren."
msgstr ""

#. §0: `induction n`
#. §1: `n`
#. §2: `induction n with d dh`
#. §3: `d`
#. §4: `hd`
#. §5: `n = 0`
#. §6: `hd`
#. §7: `induction`
#. §8: `induction'`
#. §9: `0`
#. §10: `Nat.zero`
#. §11: `d + 1`
#. §12: `Nat.succ d`
#. §13: `zero_eq`
#. §14: `Nat.succ_eq_add_one`
#: Game.Doc.Tactic
msgid "Die Taktik §0 führt einen Induktionsbeweis über §1.\n"
"Mit §2 kannst du Namen für die Induktionsvariable (hier: §3)\n"
"und die Induktionsannahme (hier: §4) vorgeben.\n"
"Die Taktik ersetzt also das ursprüngliche Beweisziel durch zwei neue Beweisziele:\n"
"* einen Induktionsanfang, in dem §5 gesetzt wird, und\n"
"* einen Induktionsschritt, in dem dir die Induktionsannahme §6 zur Verfügung steht.\n"
"\n"
"## Modifikationen in diesem Spiel\n"
"\n"
"Außerhalb dieses Spiels heißt §7 §8,\n"
"§9 wird zunächst als §10 and §11 als §12 geschrieben.\n"
"Diese Terme sind jeweils definitionsgleich, müssen aber gelegentlich mit\n"
"§13 und §14 explizit umgeschrieben werden."
msgstr ""

#. §0: `intro`
#. §1: `A → B`
#. §2: `∀ x, P x`
#. §3: `A → B`
#. §4: `intro h`
#. §5: `h : A`
#. §6: `B`
#. §7: `∀ x, P x`
#. §8: `intro x`
#. §9: `x`
#. §10: `P x`
#. §11: `⊢ A → B`
#. §12: `intro h`
#. §13: `h : A`
#. §14: `⊢ B`
#. §15: `⊢  x, P x`
#. §16: `intro x hx`
#. §17: `x : X`
#. §18: `hx : P x`
#. §19: `⊢ P x`
#. §20: `revert h`
#. §21: `intro h`
#: Game.Doc.Tactic
msgid "Die Taktik §0 wird für Beweisziele Form §1 oder §2 verwendet.\n"
"\n"
"Ist dein Beweisziel §3, erhältst du mit §4 die Annahme §5, und musst dann\n"
"§6 beweisen.\n"
"Ist dein Beweisziel §7, gibst du dir mit §8 ein beliebiges §9 vor und musst dann §10 beweisen.\n"
"\n"
"| vorher | Taktik       | nachher                     |\n"
"|:------------ |:------------ |:---------------------------- |\n"
"| §11    | §12    | §13, §14               |\n"
"| §15  | §16 | §17, §18, §19 |\n"
"\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Die Taktik §20 macht das genaue Gegenteil von §21."
msgstr ""

#. §0: `A ∨ B`
#. §1: `left`
#. §2: `right`
#: Game.Doc.Tactic
msgid "Wenn das Beweisziel von der Form §0 ist, entscheidest du dich mit §1, die linke Seite zu zeigen.\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Mit §2 entscheidest du dich entsprechend für die rechte Seite."
msgstr ""

#. §0: `let`
#. §1: `let x : ℕ := 5 ^ 2`
#. §2: `let x := …`
#. §3: `x`
#. §4: `simp only [x]`
#: Game.Doc.Tactic
msgid "Die Taktik §0 führt eine temporäre Definition ein, zum Beispiel\n"
"§1.\n"
"\n"
"Hast du erst einmal mit §2 ein §3 definiert, kannst du die Definition später mit §4 einsetzen."
msgstr ""

#. §0: `linarith`
#. §1: ```
#. h : m ≤ x → n < x
#. ```
#. §2: ```
#. rw [imp_iff_or_not] at h
#. ```
#. §3: ```
#. h : n < x ∨ ¬m ≤ x
#. ```
#. §4: `linarith`
#: Game.Doc.Tactic
msgid "Die Taktik §0 kann zeigen, dass eine lineare Gleichung oder Ungleichung aus gegebenen Gleichungen oder Ungleichungen folgt.\n"
"Sie ist recht flexibel, und funktioniert genauso gut in ℕ wie in ℝ.\n"
"Die (Un)Gleichungen müssen aber einzeln gegeben sein, nicht logisch verknüpft.\n"
"Eine Annahme der Form\n"
"§1\n"
"muss beispielsweise erst mit\n"
"§2\n"
"zu\n"
"§3\n"
"umgeschrieben werden, damit §4 damit etwas anfangen kann."
msgstr ""

#. §0: `omega`
#. §1: `ℕ`
#. §2: `ℤ`
#. §3: `linarith`
#: Game.Doc.Tactic
msgid "Die Taktik §0 kann zeigen, dass eine lineare Gleichung oder Ungleichung in §1 oder §2\n"
"aus gegebenen Gleichungen oder Ungleichungen folgt.\n"
"Sie kommt, anders als §3, auch mit logischen Verknüpfungen von (Un)Gleichungen zurecht."
msgstr ""

#. §0: `push_neg`
#. §1: `¬∀ x, P x`
#. §2: `∃ x, ¬P x`
#. §3: `¬∃ x, P x`
#. §4: `∀ x, ¬P x`
#. §5: `¬`
#. §6: ```
#.   ¬ ∀ ε, ∃ δ, ∀ y, | x - y | < δ → | f x - f y | < ε
#. ```
#. §7: `push_neg`
#. §8: ```
#.   ∃ ε, ∀ δ, ∃ y, ¬ (| x - y | < δ → | f x - f y | < ε)
#. ```
#. §9: `not_forall`
#. §10: `not_exists`
#. §11: `rw`
#: Game.Doc.Tactic
msgid "Die Taktik §0 schiebt Negation an Quantoren vorbei:\n"
"\n"
"| vorher       | nachher      |\n"
"|:------------ |:-------------|\n"
"| §1  | §2  |\n"
"| §3  | §4  |\n"
"\n"
"Bei geschachtelten Ausdrücken schiebt sie die Negation §5 soweit nach rechts wie möglich.\n"
"Zum Beispiel wird aus dem Beweisziel\n"
"§6\n"
"mit §7\n"
"§8\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Die beiden Lemmas §9 und §10 können mit §11 einzeln angewendet werden."
msgstr ""

#. §0: `obtain`
#. §1: `h : A ∧ B`
#. §2: `obtain ⟨h₁, h₂⟩ := h`
#. §3: `h₁ : A`
#. §4: `h₂ : B`
#. §5: `h : A ↔ B`
#. §6: `obtain ⟨h₁, h₂⟩ := h`
#. §7: `h₁ : A → B`
#. §8: `h₂ : B → A`
#. §9: `h : Nonempty X`
#. §10: `obtain ⟨x⟩ := h`
#. §11: `x : X`
#. §12: `h : ∃ x : X, P x`
#. §13: `obtain ⟨x, hx⟩ := h`
#. §14: `x : X`
#. §15: `hx : P x`
#. §16: `h : A ∨ B`
#. §17: `obtain h \\| h := h`
#. §18: `h : A`
#. §19: `h : B`
#. §20: `\\<`
#. §21: `\\>`
#. §22: `⟨_, _⟩`
#. §23: $(G, 0, +)$
#: Game.Doc.Tactic
msgid "Die Taktik §0 teilt eine Annahme in ihre Einzelteile auf.\n"
"\n"
"| vorher       | Taktik                 | nachher                                   |\n"
"|:------------------ |:---------------------- |:------------------------------------------ |\n"
"| §1        | §2 | §3 und §4                      |\n"
"| §5        | §6 | §7 und §8              |\n"
"| §9   | §10      | §11                                    |\n"
"| §12 | §13  | §14 und §15                     |\n"
"| §16        | §17   | ein Ziel mit §18, ein Ziel mit §19 |\n"
"\n"
"Die Klammern in den ersten vier Beispielen tippst du als §20 bzw. §21.\n"
"Hier ist §22 der *anonyme Konstruktor*.\n"
"Du kannst ihn dir ungefähr so vorstellen wie die Tupel-Notation in\n"
"„eine abelsche Gruppe ist ein Tupel §23 derart, dass …“."
msgstr ""

#. §0: `revert h`
#. §1: `h`
#. §2: `h : A`
#. §3: `⊢ B`
#. §4: `⊢ A → B`
#. §5: `intro h`
#. §6: `revert h`
#: Game.Doc.Tactic
msgid "Die Taktik §0 fügt die Annahme §1 als Implikationsprämisse ins Beweisziel ein:\n"
"aus §2 und §3 wird §4.\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Die Taktik §5 macht das genaue Gegenteil von §6."
msgstr ""

#. §0: `rfl`
#. §1: `X = X`
#. §2: `rfl`
#. §3: `A = B`
#. §4: `A`
#. §5: `B`
#: Game.Doc.Tactic
msgid "Die Taktik §0 beweist §1.  Genauer schließt §2 jedes Beweisziel der Form §3,\n"
"in dem §4 und §5 definitionsgleich sind."
msgstr ""

#. §0: `A ∨ B`
#. §1: `right`
#. §2: `left`
#: Game.Doc.Tactic
msgid "Wenn das Beweisziel von der Form §0 ist, entscheidest du dich mit §1, die rechte Seite zu zeigen.\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Mit §2 entscheidest du dich entsprechend für die linke Seite."
msgstr ""

#. §0: `ring`
#. §1: `+, -, *, ^`
#: Game.Doc.Tactic
msgid "Die Taktik §0 beweist Gleichungen mit den Operationen §1 in Halbringen,\n"
"also insbesondere in ℕ, ℤ, ℚ, ℝ, …   Sie funktioniert besonders gut in kommutativen Ringen."
msgstr ""

#. §0: `h : X = Y`
#. §1: `h : X ↔ Y`
#. §2: `rw [h]`
#. §3: `X`
#. §4: `Y`
#. §5: `rw [←h]`
#. §6: `h`
#. §7: `Y`
#. §8: `X`
#. §9: `rw [h, g, ←f]`
#. §10: `h`
#. §11: `g`
#. §12: `f`
#. §13: `rw [h] at h₂`
#. §14: `h₂`
#. §15: `nth_rw`
#. §16: `h`
#. §17: `n`
#. §18: ```
#.    h : ∀ n, 2*n = f n
#.    ```
#. §19: ```
#.    h (n : ℕ) : 2*n = f n
#.    ```
#. §20: `rw [h]`
#. §21: `nth_rw k [h]`
#. §22: `k`
#. §23: `2*a + 2*b > 2*a`
#. §24: `rw [h]`
#. §25: `f a + 2*b > f a`
#. §26: `nth_rw 2 [h]`
#. §27: `2*a + f b > 2*a`
#: Game.Doc.Tactic
msgid "Hast du eine Gleichung §0 oder eine Äquivalenz §1 als Annahme oder als Lemma gegeben,\n"
"so kannst du mit §2 alle Vorkommen von §3 im Beweisziel durch §4 ersetzen.\n"
"\n"
"## Varianten\n"
"\n"
"* §5 wendet §6 rückwärts an, ersetzt also alle §7 durch §8.\n"
"* §9 wendet §10, §11 und (rückwärts) §12 an.\n"
"* §13 führt die Ersetzungen in der Annahme §14 durch, nicht im Beweisziel\n"
"* §15: Besitzt §16 Argumente, z.B. §17 in\n"
"   §18\n"
"   oder in\n"
"   §19\n"
"   so sucht §20 im Beweisziel von links nach rechts nach einem passenden Ausdruck,\n"
"   und ersetzt dann *alle* Vorkommen *des ersten* Ausdrucks, den die Taktik findet.\n"
"   Mit §21 kannst du stattdessen alle Vorkommen des §22-ten Ausdrucks ersetzen.\n"
"\n"
"  | vorher    | Taktik       | nachher        |\n"
"  |:----------------- |:-------------- |:----------------- |\n"
"  | §23 | §24       | §25 |\n"
"  |                   | §26 | §27 |"
msgstr ""

#. §0: `simp`
#. §1: `mathlib`
#. §2: `@[simp]`
#. §3: `simp [h]`
#. §4: `h`
#. §5: `h`
#. §6: `simp [F]`
#. §7: `F`
#. §8: `simp only [h,f,g]`
#. §9: `h`
#. §10: `f`
#. §11: `g`
#. §12: `simp?`
#: Game.Doc.Tactic
msgid "Die Taktik §0 versucht eine große Zahl an Lemmas anzuwenden, um einen gegebenen Ausdruck zu vereinfachen.\n"
"(Technisch handelt es sich um alle Lemmas in §1, die durch §2 gekennzeichnet sind.)\n"
"\n"
"## Varianten\n"
"\n"
"* §3 benutzt zum Vereinfachen zusätzlich die Voraussetzung §4 oder das Lemma §5\n"
"* §6 benutzt zusätzliche die Definition von §7\n"
"* §8 benutzt ausschließlich die Voraussetzungen/Lemmas/Definitionen §9, §10 und §11\n"
"* §12 zeigt dir an, welche Lemmas verwendet wurden"
msgstr ""

#. §0: `specialize h a₁ a₂`
#. §1: `have h := h a₁ a₂`
#. §2: `h : ∀ m₁ m₂, P m₁ m₂`
#. §3: `h : P a₁ a₂`
#. §4: `specialize`
#. §5: `have`
#. §6: `specialize h …`
#. §7: `h`
#. §8: `h`
#. §9: ```
#. have ha := h a₁ a₂
#. have hb := h b₁ b₂
#. ```
#. §10: ```
#. h : ∀ m₁ m₂, P m₁ m₂
#. ha : P a₁ a₂
#. hb : P b₁ b₂
#. ```
#: Game.Doc.Tactic
msgid "§0 ist äquivalent zu §1: die Taktik ersetzt eine Annahme\n"
"§2 durch den Spezialfall §3.\n"
"\n"
"Falls du mehrmals spezialisieren möchtest, solltest du statt §4\n"
"§5 verwenden, da §6 die alte Annahme §7 überschreibt.\n"
"Aus obiger Annahme §8 erhältst du beispielsweise mit\n"
"§9\n"
"die folgenden drei Annahmen:\n"
"§10"
msgstr ""

#. §0: `suffices h : P`
#. §1: `P`
#. §2: `P`
#. §3: `have h : P`
#. §4: `P`
#: Game.Doc.Tactic
msgid "Mit §0 leitest du einen Beweisabschnitt ein, in dem du zeigst,\n"
"dass das gewünschte Beweisziel aus §1 folgt.\n"
"Danach beweist du §2.\n"
"\n"
"## Freunde und Verwandte\n"
"§3 funktioniert genauso, außer dass du zunächst §4 beweisen musst und erst dann\n"
"den Hauptbeweis fortsetzen kannst."
msgstr ""

#. §0: `symm`
#. §1: `=`
#. §2: `↔`
#. §3: `symm at h`
#. §4: `h`
#. §5: `h.symm`
#. §6: `symm at h`
#. §7: `h`
#. §8: `rw [←h]`
#. §9: ```
#.   symm at h
#.   rw [h]
#.   ```
#. §10: `rw [h.symm]`
#: Game.Doc.Tactic
msgid "Mit §0 (für „symmetry“) vertauschst du die Seiten einer Gleichung (§1) oder Äquivalenz (§2) im Beweisziel.\n"
"\n"
"## Varianten\n"
"* §3 operiert auf der Annahme §4 statt auf dem Beweisziel\n"
"* §5 ist das Ergebnis von §6, und kann wie §7 verwendet werden\n"
"\n"
"Jede der drei folgenden Taktiken bzw. Taktiksequenzen hat also denselben Effekt:\n"
"* §8\n"
"* §9\n"
"* §10"
msgstr ""

#. §0: `trans`
#. §1: `⊢ A = C`
#. §2: `trans B`
#. §3: `⊢ A = B`
#. §4: `⊢ B = C`
#. §5: `⊢ A ↔ C`
#. §6: `trans B`
#. §7: `⊢ A ↔ B`
#. §8: `⊢ B ↔ C`
#. §9: `A = B₁ = B₂ = B₃ … = C`
#. §10: `calc`
#: Game.Doc.Tactic
msgid "Mit §0 fügst du in eine Gleichung oder Äquivalenz einen Zwischenschritt ein.\n"
"\n"
"| vorher | Taktik    | nachher                |\n"
"|:------------ |:--------- |:----------------------- |\n"
"| §1    | §2 | §3 und §4 |\n"
"| §5    | §6 | §7 und §8 |\n"
"\n"
"Da du die Taktik mehrmals wiederholen kannst, ist sie geeignet,\n"
"um Schritt für Schritt eine „Rechnung“ §9 durchzuführen.\n"
"\n"
"(Außerhalb vom Spiel ist allerdings die mehrzeilige Taktik §10 besser für derartige Rechnungen geeignet.)"
msgstr ""

#. §0: `decide`
#. §1: `True`
#. §2: `Even 4`
#. §3: `2 ≤ 5`
#. §4: `4 ≠ 6`
#. §5: `Prime 7`
#: Game.Doc.Tactic
msgid "Mit §0 kannst du Aussagen beweisen, die mit einem einfachen Algorithmus\n"
"entscheidbar sind.  Dazu gehören insbesondere §1 und Aussagen über konkrete Zahlen wie:\n"
"- §2\n"
"- §3\n"
"- §4\n"
"- §5"
msgstr ""

#. §0: `unfold F`
#. §1: `F`
#. §2: `unfold F at h`
#. §3: `h`
#. §4: `unfold`
#. §5: `push_neg`
#. §6: `rw`
#. §7: `unfold F`
#. §8: `simp only [F]`
#: Game.Doc.Tactic
msgid "Mit §0 kannst du die Definition §1 im Beweisziel ausschreiben.\n"
"Mit §2 machst du das Gleiche, aber in der Annahme §3.\n"
"\n"
"Zwar sind Beweisziel oder Annahme vor und nach §4 definitionsgleich,\n"
"aber viele Taktiken (z.B. §5 oder §6) operieren auf einer syntaktischen Ebene,\n"
"sie „sehen nicht durch Definitionen hindurch“.\n"
"\n"
"## Freunde und Verwandte\n"
"\n"
"Die Taktiken §7 und §8 machen praktisch das Gleiche."
msgstr ""

#. §0: `∃x, P x`
#. §1: `use n`
#. §2: `P x`
#: Game.Doc.Tactic
msgid "Wenn das Beweisziel von der Form §0 ist, kannst du mit §1 ein konkretes Element angeben,\n"
"für das du §2 beweisen möchtest."
msgstr ""

#. §0: `tauto`
#. §1: `generalize`
#. §2: `tauto`
#: Game.Doc.Tactic
msgid "Die Taktik §0 beweist logische Tautologien.\n"
"\n"
"# Freunde und Verwandte\n"
"\n"
"Manchmal muss das Beweisziel zuerst mit §1 abstrahiert werden, damit §2  die Tautologie erkennt."
msgstr ""

#: Game.Levels.Logo.L01_Tauto
msgid ""
msgstr ""

#: Game.Levels.Logo.L01_Tauto
msgid "Gerade seid Ihr auf Königin *Logisindes* Planeten. Sie kommt ohne Umschweife zum Punkt:\n"
"\n"
"**Logisinde**: Werte Wesen aus fremden Welten, gestatten Sie eine Frage. Warum gilt …\n"
"\n"
"Und sie kritzelt etwas auf ein Stück Papier: oben ein paar Annahmen, unten eine Schlussfolgerung.\n"
"Dazwischen sollst du offenbar einen Beweis eintragen.\n"
"Du siehst Robo hilflos an."
msgstr ""

#: Game.Levels.Logo.L01_Tauto
msgid ""
msgstr ""

#. §0: `«{A}» «{B}» «{C}» : Prop`
#. §1: `«{A}»`
#. §2: `«{B}»`
#. §3: `«{C}»`
#. §4: `→`
#. §5: `tauto`
#: Game.Levels.Logo.L01_Tauto
msgid "**Robo**: Das ist ganz einfach. Mit §0 meint sie:\n"
"§1, §2 und §3 sind irgendwelche Aussagen (*propositions*).\n"
"Und mit §4 meint sie ⇒, also “impliziert”. Die anderen Symbole kennst du, oder?\n"
"\n"
"**Du**: Ehhm, ja. Aber da muss ich jetzt trotzdem erst einmal überlegen.\n"
"\n"
"**Robo**: (flüsternd) Behaupte doch einfach, dass sei eine Tautologie.\n"
"\n"
"**Du**: Ernsthaft?\n"
"\n"
"**Robo**: Ja. Schreib einfach §5.\n"
"\n"
"**Robo**: Mach schon …"
msgstr ""

#. §0: `tauto`
#: Game.Levels.Logo.L01_Tauto
msgid "**Logisinde**: (etwas konsterniert) Ja, das ist streng genommen richtig.\n"
"Aber glaubt bloß nicht, dass Ihr damit auf *diesem* Planeten viel weiterkommt!\n"
"Meine Untertanen verstehen §0 nicht. Da müsst Ihr Euch schon etwas mehr anstrengen."
msgstr ""

#: Game.Levels.Logo.L02_Rfl
msgid ""
msgstr ""

#. §0: $42 = 42$
#: Game.Levels.Logo.L02_Rfl
msgid "In der Zwischenzeit hat bereits sich eine lange Schlange Untertanen gebildet, die gern ihren\n"
"Fragen stellen würden. Logisinde winkt den ersten nach vorn. Er räuspert sich.\n"
"\n"
"**Untertan**: Warum ist §0?\n"
"\n"
"Du schaust ihn fassungslos an.\n"
"Er schreibt es dir wieder auf."
msgstr ""

#. §0: `rfl`
#: Game.Levels.Logo.L02_Rfl
msgid "**Robo**: Ist doch klar. Du musst ihn einfach daran erinnern,\n"
"dass Gleichheit *reflexiv* ist. Probier mal §0."
msgstr ""

#: Game.Levels.Logo.L02_Rfl
msgid "**Untertan**: Ah, richtig. Ja, Sie haben ja so recht. Das vergesse ich immer. Rfl, rfl, rfl …"
msgstr ""

#: Game.Levels.Logo.L03_Assumption
msgid ""
msgstr ""

#: Game.Levels.Logo.L03_Assumption
msgid "Während der erste Untertan noch rfl, rfl, rfl murmelt, tritt schon der nächste nach vorne.\n"
"Es ist schüchtern und schreibt bloß."
msgstr ""

#. §0: `«{n}» : ℕ`
#. §1: `«{n}»`
#. §2: `«{n}» ∈ ℕ`
#. §3: `«{h₁}»`
#. §4: `«{h₂}»`
#. §5: `«{h₃}»`
#. §6: `n < 10`
#. §7: `1 < n`
#. §8: `n ≠ 5`
#. §9: `1 < n`
#. §10: `assumption`
#: Game.Levels.Logo.L03_Assumption
msgid "\n"
"**Robo**: §0 bedeutet, §1 ist eine natürliche Zahl.\n"
"\n"
"**Du**: Warum schreibt er dann nicht §2??\n"
"\n"
"**Robo**: Weil das hier alles komische Typen sind … Ich kann dir das später mal in Ruhe\n"
"erklären. Jetzt will ich erst einmal die Frage entschlüsseln.\n"
"\n"
"**Robo**: Also, §3, §4, §5 sind einfach nur Namen für verschiedene Annahmen,\n"
"und zwar für die Annahme §6, §7 und §8. Beweisen sollen wir: §9.\n"
"\n"
"**Du**: Aber das war doch gerade eine der Annahmen.\n"
"\n"
"**Robo**: Ja, stimmt.\n"
"\n"
"**Du**: ???\n"
"\n"
"**Robo**: Du musst ihm das halt explizit sagen. Probiers mal mit §10."
msgstr ""

#: Game.Levels.Logo.L03_Assumption
msgid "**Untertan**: Ja richtig! Wenn Ihr nur wüsstet, was ich mir an dieser Frage schon den Kopf\n"
"zerbrochen habe!"
msgstr ""

#: Game.Levels.Logo.L04_Assumption
msgid ""
msgstr ""

#: Game.Levels.Logo.L04_Assumption
msgid "Ein dritter Untertan kommt mit folgendem Problem."
msgstr ""

#. §0: `«{A}» : Prop`
#. §1: `«{A}»`
#. §2: `«{hA}»`
#. §3: `«{A}»`
#. §4: `«{A}»`
#: Game.Levels.Logo.L04_Assumption
msgid "\n"
"**Robo**: Hier bedeutet §0 wieder, dass §1 irgendeine Aussage ist.\n"
"Und §2 ist ein Name für die Annahme, dass §3 wahr ist.\n"
"\n"
"**Du**: Und unter dieser Annahme sollen wir jetzt §4 beweisen?\n"
"\n"
"**Robo**: Ja. Da kommst du jetzt selbst drauf, wie das geht, oder?"
msgstr ""

#. §0: `assumption`
#: Game.Levels.Logo.L04_Assumption
msgid "**Robo**: Ist doch genau wie eben:\n"
"die Aussage, die zu beweisen ist, gehört selbst zu den Annahmen.\n"
"Also wird §0 auch wieder funktionieren."
msgstr ""

#: Game.Levels.Logo.L04_Assumption
msgid "**Untertan**: Das ging ja schnell. Super! Vielen Dank."
msgstr ""

#: Game.Levels.Logo.L05_True
msgid ""
msgstr ""

#: Game.Levels.Logo.L05_True
msgid "Der nächste Untertan in der Reihe ist ein Schelm."
msgstr ""

#. §0: `True`
#. §1: `decide`
#: Game.Levels.Logo.L05_True
msgid "\n"
"**Robo**: Dieses §0 ist eine spezielle Aussage, nämlich die Aussage, die immer und\n"
"bedingungslos wahr ist.\n"
"\n"
"**Du**: Und was genau ist dann zu beweisen?\n"
"\n"
"**Robo**: Ich glaube, nichts. Probier mal §1."
msgstr ""

#. §0: `decide`
#. §1: `decide`
#: Game.Levels.Logo.L05_True
msgid "**Schelm**: Wollte nur mal sehen, dass Ihr nicht auf den Kopf gefallen seid …\n"
"\n"
"**Du** *(zu Robo)*: Können wir nicht einfach immer dieses §0 verwenden?\n"
"\n"
"**Robo**: Nein, §1 funktioniert nur in speziellen Situationen, in denen es einen\n"
"einfachen Algorithmus gibt, der entscheidet, ob die Aussage wahr ist."
msgstr ""

#: Game.Levels.Logo.L06_Not
msgid ""
msgstr ""

#: Game.Levels.Logo.L06_Not
msgid "Der Schelm hat noch eine Schwester dabei."
msgstr ""

#. §0: `¬`
#. §1: `(A : Prop)`
#. §2: `¬A`
#. §3: `False`
#. §4: `decide`
#: Game.Levels.Logo.L06_Not
msgid "\n"
"**Robo**: Dieses Zeichen §0 bedeutet Negation. Also wenn eine Aussage §1\n"
"wahr ist, dann ist §2 falsch, und umgekehrt.\n"
"\n"
"**Du**: Und §3 ist wahrscheinlich die Aussage, die immer falsch ist?\n"
"\n"
"**Robo**: Ja, richtig.\n"
"\n"
"**Du**: Ist das jetzt nicht doch wieder §4?\n"
"\n"
"**Robo**: Probier mal!"
msgstr ""

#: Game.Levels.Logo.L06_Not
msgid "Die Schwester lacht und eilt ihrem Bruder hinterher."
msgstr ""

#: Game.Levels.Logo.L07_Contradiction
msgid ""
msgstr ""

#: Game.Levels.Logo.L07_Contradiction
msgid "Als nächstes kommen drei Querulanten. Der erste hat folgendes Problem:"
msgstr ""

#. §0: `«{A}»`
#. §1: `«{h}»`
#. §2: `False`
#. §3: `False`
#. §4: `False`
#. §5: `«{A}»`
#. §6: `True`
#. §7: `False`
#. §8: `contradiction`
#: Game.Levels.Logo.L07_Contradiction
msgid "**Du** Wenn ich das jetzt richtig lese, ist §0 eine Aussage,\n"
"und wir haben außerdem eine Annahme names §1, die besagt …\n"
"\n"
"**Robo**: … die besagt, dass §2 gilt.\n"
"\n"
"**Du**: Ich dachte, §3 gilt nie?\n"
"\n"
"**Robo**: Ja, genau. Die Annahme ist §4, also falsch.\n"
"Und aus einer falschen Annahme kann man bekanntlich alles beweisen!\n"
"Insbesondere die gesuchte Aussage §5.\n"
"\n"
"**Du**: Und wie erkläre ich das jetzt diesem Formalosophen?\n"
"\n"
"**Robo**: Ich glaube, du musst ihn darauf hinweisen, dass zwischen der allgemeingültigen\n"
"Annahme §6 und seiner Annahme §7 ein Widerspruch besteht. Probier mal §8."
msgstr ""

#. §0: `contradiction`
#: Game.Levels.Logo.L07_Contradiction
msgid "Der erste Querulant ist offenbar zufrieden.\n"
"\n"
"**Du**: War das jetzt ein Widerspruchsbeweis?\n"
"\n"
"**Robo**: Nein, nein, ein Widerspruchsbeweis sieht anders aus. Das Argument hier war:\n"
" wir haben eine §0 in unserem Annahmen, also folgt jede beliebige Aussage."
msgstr ""

#: Game.Levels.Logo.L08_Contradiction
msgid ""
msgstr ""

#: Game.Levels.Logo.L08_Contradiction
msgid "Auftritt zweiter Querulant."
msgstr ""

#: Game.Levels.Logo.L08_Contradiction
msgid ""
msgstr ""

#. §0: `«{n}» ≠ «{n}»`
#: Game.Levels.Logo.L08_Contradiction
msgid "\n"
"**Du** Ist §0 nicht auch ein Widerspruch?\n"
"\n"
"**Robo**: Probiers mal!"
msgstr ""

#: Game.Levels.Logo.L08_Contradiction
msgid "**Du**: Ja, scheint funktioniert zu haben.\n"
"\n"
"**Du**: Aber irgendwie kommt mir das immer noch ein wenig suspekt vor.\n"
"Jetzt habe ich bewiesen, dass eine beliebige natürliche Zahl gleich 37 ist?\n"
"\n"
"**Robo**: Nein, nicht doch. Nur eine beliebige Zahl, die ungleich sich selbst ist, ist gleich 37.\n"
"Und gleich 38, und gleich 39, …\n"
"\n"
"**Du**: Okay, okay, verstehe."
msgstr ""

#: Game.Levels.Logo.L09_Contradiction
msgid ""
msgstr ""

#: Game.Levels.Logo.L09_Contradiction
msgid "Auftritt dritter Querulant."
msgstr ""

#: Game.Levels.Logo.L09_Contradiction
msgid ""
msgstr ""

#: Game.Levels.Logo.L09_Contradiction
msgid "\n"
"**Du** Wieder ein Widerspruch in den Annahmen?\n"
"\n"
"**Robo**: Ich sehe, du hast langsam den Dreh raus."
msgstr ""

#. §0: `n ≠ 10`
#. §1: `n = 10`
#. §2: `≠`
#. §3: `¬(· = ·)`
#: Game.Levels.Logo.L09_Contradiction
msgid "**Robo**: Gut gemacht. Bei dieser Frage ist auch ein bisschen offensichtlicher,\n"
"worin der Widerspruch besteht: Die Annahme §0 ist genau die Negation von §1.\n"
"Man muss §2 immer als §3 lesen."
msgstr ""

#: Game.Levels.Logo.L10_And
msgid ""
msgstr ""

#: Game.Levels.Logo.L10_And
msgid "Der nächste Formalosoph in der Reihe hat seine Frage bereits mitgebracht.\n"
"Er legt sie uns vor, setzt sich hin und häkelt."
msgstr ""

#: Game.Levels.Logo.L10_And
msgid ""
msgstr ""

#. §0: `«{A}»`
#. §1: `«{B}»`
#. §2: `«{A}» und «{B}»`
#. §3: `trivial`
#. §4: `constructor`
#. §5: `destructor`
#. §6: `constructor`
#: Game.Levels.Logo.L10_And
msgid "\n"
"**Du**: Also, wir haben zwei Annahmen: §0 gilt, und §1 gilt auch. Und beweisen sollen wir\n"
"dass §2 gilt. Ich glaube, diese Formalospinner treiben mich noch zur Verzweiflung.\n"
"Kann ich nicht wieder §3 sagen?\n"
"\n"
"**Robo**: Nee, diesmal wird das nicht funktionieren.\n"
"Du musst das Beweisziel einfach in zwei Teile zerlegen. Probier mal §4.\n"
"\n"
"**Du**: Du meinst, §5??\n"
"\n"
"**Robo**: Nein, §6. Ich weiß, das ist verwirrend,\n"
"aber die nennen das hier so weil man die Aussage aus mehreren Teilen\n"
"konstruieren kann."
msgstr ""

#. §0: `«{B}»`
#: Game.Levels.Logo.L10_And
msgid "\n"
"**Robo**: Schau mal, das ist Zauberpapier.\n"
"Jetzt haben wir auf einmal zwei Beweisziele.\n"
"Hier ist dast Ziel §0.\n"
"Ich glaube, du weißt schon, wie man die jeweils erreicht.\n"
"Die Ziele stehen ja jeweils in den *Annahmen*."
msgstr ""

#: Game.Levels.Logo.L10_And
msgid "**Robo**: Super!\n"
"\n"
"Ihm scheinen diese Fragen inzwischen Spaß zu machen.\n"
"\n"
"**Robo**: Meinst du, dieser Hebel, an dem \"Editor mode\" steht, ist echt?\n"
"Oder ist der nur gemalt? Probier mal!"
msgstr ""

#: Game.Levels.Logo.L11_And
msgid ""
msgstr ""

#: Game.Levels.Logo.L11_And
msgid "Langsam wird die Schlange kürzer. Die nächste Formalosophin, ebenfalls häkelnd, hat folgendes Anliegen."
msgstr ""

#. §0: `obtain ⟨h₁, h₂⟩ := «{h}»`
#. §1: `\\<`
#. §2: `\\>`
#. §3: `\\<>`
#. §4: `h\\1`
#. §5: `h₁`
#. §6: `h₂`
#. §7: `obtain ⟨hA, hBC⟩ := «{h}»`
#: Game.Levels.Logo.L11_And
msgid "\n"
"**Du**: Jetzt müssen wir wohl die Annahme de-konstruieren.\n"
"\n"
"**Robo**: Ja, genau. Das geht am einfachsten mit §0.\n"
"\n"
"**Du**: Moment, wie schreib ich *das* denn hier auf?\n"
"\n"
"**Robo**: Die bleiden Klammern schreibst du als §1 und §2, oder gleichzeitig als §3.\n"
"Und h₁ schreibst du einfach als §4. Aber du kannst dir auch einfach andere Namen\n"
"für §5 und §6, zum Beispiel §7."
msgstr ""

#: Game.Levels.Logo.L11_And
msgid "**Robo**: Du hast einen Beweis dafür in den *Annahmen*."
msgstr ""

#. §0: `obtain ⟨h₁, h₂ , h₃⟩ := h`
#: Game.Levels.Logo.L11_And
msgid "**Robo**: Du hättest das übrigens auch direkt verschachtelt schreiben können:\n"
"§0."
msgstr ""

#: Game.Levels.Logo.L12_Or
msgid ""
msgstr ""

#: Game.Levels.Logo.L12_Or
msgid "Der nächste bitte …"
msgstr ""

#. §0: `«{A}»`
#. §1: `left`
#. §2: `right`
#: Game.Levels.Logo.L12_Or
msgid "\n"
"**Du** Muss ich jetzt wieder das Beweisziel de-konstruieren?\n"
"\n"
"**Robo** Nein, viel einfacher. Wenn du eine Oder-Aussage beweisen sollst, musst du dich\n"
"einfach entscheiden, ob du die linke oder rechte Seite beweisen willst.\n"
"\n"
"**Du** Und wie erkläre ich meinem Formalosophen, welche Seite ich gern beweisen würde?\n"
"Ich will natürlich §0 beweisen!\n"
"\n"
"**Robo** Mit §1 bzw. §2. Ist doch logisch, oder?"
msgstr ""

#: Game.Levels.Logo.L12_Or
msgid "Auch dieser Formalosoph zieht zufrieden von dannen."
msgstr ""

#: Game.Levels.Logo.L13_Or
msgid ""
msgstr ""

#: Game.Levels.Logo.L13_Or
msgid "Der nächste bitte …"
msgstr ""

#: Game.Levels.Logo.L13_Or
msgid ""
msgstr ""

#. §0: `(«{A}» ∧ «{B}») ∨ «{A}»`
#. §1: `obtain …`
#. §2: `obtain ⟨h₁, h₂⟩ := «{h}»`
#. §3: `obtain h | h := «{h}»`
#: Game.Levels.Logo.L13_Or
msgid "**Robo** Schau mal, wenn du mit dem Finger eine Annahme berührst, zeigt es dir,\n"
"wie die Klammern gesetzt sind. Irre…\n"
"\n"
"**Du** Ah ich sehe, also §0!\n"
"\n"
"**Du** Ich glaube den ganzen Zircus hier langsam nicht mehr:\n"
"Zuerst ein \"Und\" im Ziel, dann \"Und\" in der Annahme, dann \"Oder\" im Ziel und jetzt\n"
"\"Oder\" in der Annahme, die haben sich doch abgesprochen!\n"
"\n"
"**Robo** Lass ihnen doch ihren Spaß.\n"
"Wir sind ja gleich hier fertig, und können zu einem interessanteren Planeten weiterfliegen.\n"
"\n"
"**Du** Also, wieder §1?\n"
"\n"
"**Robo** Ja, aber diesmal nicht §2, sondern §3."
msgstr ""

#. §0: `«{A}» ∧ «{B}»`
#. §1: `«{A}»`
#: Game.Levels.Logo.L13_Or
msgid "**Robo**\n"
"Jetzt musst du dein Ziel zweimal beweisen:\n"
"Einmal unter Annahme der linken Seite §0,\n"
"und einmal unter Annahme der rechten Seite §1.\n"
"Hier haben nehmen wir an, die linke Seite\n"
"sei wahr."
msgstr ""

#. §0: `obtain ⟨h₁, h₂⟩ := «{h}»`
#. §1: `\\<>`
#: Game.Levels.Logo.L13_Or
msgid " **Robo** Wie man mit einem Und in den Annahmen umgeht,\n"
"weißt du doch schon:\n"
"§0. Zur Erinnerung: Für die Klammern schreibst du §1."
msgstr ""

#. §0: `(«{A}» ∧ «{B}») ∨ «{A}»`
#. §1: `«{A}»`
#: Game.Levels.Logo.L13_Or
msgid "**Robo** Jetzt musst du dein Ziel noch unter der rechten Annahme\n"
"von §0 zeigen, also angenommen, §1 sei wahr."
msgstr ""

#. §0: `ℕ`
#. §1: `0, 1, 2, …`
#. §2: `=`
#. §3: `≠`
#. §4: `¬(·=·)`
#. §5: `Prop`
#. §6: `True`
#. §7: `(True : Prop)`
#. §8: `False`
#. §9: `(False : Prop)`
#. §10: `¬`
#. §11: `∧`
#. §12: `∨`
#. §13: `(n : ℕ)`
#. §14: `(A : Prop)`
#. §15: `(ha : A)`
#. §16: `(A : Prop)`
#. §17: `(h : A ∧ B)`
#. §18: `h`
#. §19: `Taktiken`
#. §20: `rfl`
#. §21: `A = A`
#. §22: `assumption`
#. §23: `contradiction`
#. §24: `decide`
#. §25: `constructor`
#. §26: `left`
#. §27: `right`
#. §28: `obtain ⟨h₁, h₂⟩ := h`
#. §29: `obtain h := h \\| h`
#: Game.Levels.Logo.L13_Or
msgid "**Du** Okay, das scheint ihn zufriedenzustellen. Nur noch eine Seele…\n"
"Kannst du mir vorher noch einmal kurz alles Leansch zusammenfassen,\n"
"das du mir bis hierher beigebracht hast?\n"
"\n"
"Robo strahlt überglücklich. Noch *nie* warst du so auf ihn angewiesen.\n"
"\n"
"**Robo** Na klar, schau her!\n"
"\n"
"## Notationen / Begriffe\n"
"\n"
"|               | Beschreibung                                                             |\n"
"|:--------------|:-------------------------------------------------------------------------|\n"
"| *Goal*        | Was aktuell zu beweisen ist.                                             |\n"
"| *Annahme*     | Objekte & Resultate, die man zur Verfügung hat.                          |\n"
"| *Taktik*      | Befehl im Beweis. Entspricht einem Beweisschritt.                        |\n"
"| §0           | Typ aller natürlichen Zahlen.                                            |\n"
"| §1  | Explizite natürliche Zahlen.                                             |\n"
"| §2           | Gleichheit.                                                              |\n"
"| §3           | Ungleichheit. Abkürzung für §4.                                    |\n"
"| §5        | Typ aller logischen Aussagen.                                            |\n"
"| §6        | Die logische Aussage §7 ist bedingungslos wahr.             |\n"
"| §8       | Die logische Aussage §9 ist bedingungslos falsch.          |\n"
"| §10           | Logische Negierung.                                                      |\n"
"| §11           | Logisch UND.                                                             |\n"
"| §12           | Logisch ODER.                                                            |\n"
"| §13     | Eine natürliche Zahl.                                                    |\n"
"| §14  | Eine logische Aussage.                                                   |\n"
"| §15    | Ein Beweis, dass die logische Aussage §16 wahr ist.             |\n"
"| §17 | Eine Annahme, die den Namen §18 bekommen hat.                            |\n"
"\n"
"\n"
"## Taktiken\n"
"\n"
"Die Worte, die du aktiv gebrauchen musst, heißen zusammengefasst §19.\n"
"Hier sind alle Taktiken, die wir auf diesem Planeten gebraucht haben:\n"
"\n"
"|    | Taktik                    | Beispiel                                           |\n"
"|:---|:--------------------------|:---------------------------------------------------|\n"
"| 1  | §20                     | Beweist §21.                                   |\n"
"| 2  | §22              | Sucht das Goal in den Annahmen.                    |\n"
"| 3  | §23           | Sucht einen Widerspruch.                           |\n"
"| 4  | §24                  | Versucht zu entscheiden, ob eine Aussage wahr ist. |\n"
"| 5  | §25             | Teilt ein UND im Goal auf.                         |\n"
"| 6  | §26/§27            | Beweist eine Seite eines ODER im Goal.             |\n"
"| 7ᵃ | §28    | Teilt ein UND in den Annahmen auf.                 |\n"
"| 7ᵇ | §29     | Teilt ein ODER in den Annahmen in zwei Fälle auf.  |\n"
"\n"
"**Du** Woher weißt du das eigentlich alles?\n"
"\n"
"**Robo** Keine Ahnung. War, glaube ich, vorinstalliert."
msgstr ""

#: Game.Levels.Logo.L14_Summary
msgid ""
msgstr ""

#. §0: `∧`
#. §1: `∨`
#. §2: `obtain ⟨h₁, h₂⟩ := h`
#. §3: `obtain h \\| h := h`
#. §4: `constructor`
#. §5: `left`
#. §6: `right`
#: Game.Levels.Logo.L14_Summary
msgid "Der letzte Untertan tritt vor. Ihr Anliegen ist etwas komplizierter als die vorherigen.\n"
"\n"
"**Robo** Wirf einfach alles drauf, was du gelernt hast.\n"
"Hier, ich bin sogar so nett und zeig dir noch einmal die vier\n"
"wichtigsten Taktiken für diese Situation an.\n"
"\n"
"| (Übersicht) | Und (§0)                | Oder (§1)              |\n"
"|:------------|:-------------------------|:------------------------|\n"
"| Annahme     | §2   | §3   |\n"
"| Goal        | §4            | §5/§6          |"
msgstr ""

#. §0: `obtain ⟨⟩ := «{h}»`
#: Game.Levels.Logo.L14_Summary
msgid "**Robo**: Ich würd zuerst die Annahme «{h}» mit §0 aufteilen."
msgstr ""

#. §0: `∧`
#. §1: `constructor`
#: Game.Levels.Logo.L14_Summary
msgid "**Robo**: Jetzt kannst du das §0 im Goal mit §1 angehen."
msgstr ""

#. §0: `obtain`
#: Game.Levels.Logo.L14_Summary
msgid "**Robo**: Hier würde ich die Annahme «{h}» nochmals mit §0 aufteilen."
msgstr ""

#: Game.Levels.Logo.L14_Summary
msgid "**Robo** Bravo! Jetzt aber nichts wie weg hier, bevor sich eine neue Schlange bildet!\n"
"\n"
"Königin *Logisinde* ist in der Zwischenzeit eingeschlafen, und ihr stehlt euch heimlich davon."
msgstr ""

#: Game.Levels.Logo
msgid "Logo"
msgstr ""

#: Game.Levels.Logo
msgid "Durch eine unvorhergesehene und nicht-kanonische Singularität in der Raumzeit\n"
"bist du aus Versehen in ein Paralleluniversum gestolpert. Wie es aussieht, gibt es kein zurück.\n"
"Richte dich besser darauf ein, hier bleiben und dich zurechtzufinden zu müssen.\n"
"\n"
"Wie es aussieht, gibt es hier viele nette kleine Planeten. Alle bewohnbar, und bis zu\n"
"sieben Sonnenuntergänge täglich inklusive. Nur werden sie allesamt von Formalosophen bewohnt,\n"
"seltsamen Wesen mit ausgefallenen mathematischen Obsessionen. Und dummerweise hat sich\n"
"herumgesprochen, dass du in deinem früheren Universum Mathematiker warst. du wirst hier\n"
"keine Ruhe finden, solange du nicht lernst, ihren unablässigen Wissensdurst zu stillen.\n"
"\n"
"Es gibt nur zwei Schwierigkeiten: Erstens haben die Formalosophen allem Anschein nach\n"
"überhaupt kein tieferes mathematisches Verständnis, und zweitens kommunizieren Sie über Mathematik\n"
"exklusiv in einem dir fremden Dialekt, den sie Leansch [liːnʃ] nennen.\n"
"\n"
"Zum Glück hat Robo mit dir das Universum gewechselt.\n"
"Robo, das ist dein kleiner SmartElf. Robo ist zwar auch nicht die mathematische Leuchte, die du Dir\n"
"in dieser Situation gewünscht hättest, aber es scheint, er hat irgendwo Leansch gelernt.\n"
"Und das ist Gold wert."
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid ""
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Operationsleiter**: Hier, zum Beispiel:"
msgstr ""

#. §0: `\\to`
#. §1: `«{B}»`
#. §2: `«{A}»`
#. §3: `«{A}» und «{B}»`
#. §4: `tauto`
#. §5: `«{A}»`
#. §6: `h`
#. §7: `intro h`
#: Game.Levels.Implis.L01_Intro
msgid "\n"
"**Operationsleiter**: Die Arbeiter meinen, das wäre so richtig und wir würden das dringend\n"
"brauchen. Aber keiner kann es mir beweisen.\n"
"\n"
"**Du**: Einen Moment. Das ist ja gerade so eine Implikation (§0). Wir nehmen an,\n"
"dass §1 gilt, und wollen zeigen, dass dann gilt §2 impliziert §3. Ja,\n"
"klar! Natürlich stimmt das.\n"
"\n"
"Der Operationsleiter sieht dich erwartungsvoll an.\n"
"\n"
"**Du** *(leise zu Robo)*: Soll ich ihm §4 aufschreiben?\n"
"\n"
"**Robo** *(leise zurück)*: So wie der aussieht, fürchte ich, das wird er auch nicht verstehen.\n"
"Schreib den Beweis lieber aus.\n"
"\n"
"**Du**: Aber wie denn? Ich glaube, ich würde als erstes gern so etwas sagen wie 'Nehmen wir\n"
"also an, §5 gilt …'\n"
"\n"
"**Robo**: Ja, gute Idee. Wähle dazu für deine Annahme einfach einen Namen, zum Beispiel §6,\n"
"und schreib §7."
msgstr ""

#. §0: `«{A}»`
#. §1: `«{B}»`
#. §2: `«{A}» ∧ «{B}»`
#: Game.Levels.Implis.L01_Intro
msgid "\n"
"**Du**: Okay. Jetzt habe ich also sowohl §0 als auch §1 in meinen Annahmen und\n"
"muss §2 zeigen.\n"
"\n"
"**Robo**: Genau. Und wie das geht, weißt du ja schon."
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Operationsleiter**: Perfekt! Danke schön!\n"
"\n"
"Er geht zu einer Schalttafel und ein paar Knöpfe. Irgendwo setzt sich lautstark ein\n"
"Förderband in Bewegung.\n"
"\n"
"**Operationsleiter**: Habt Ihr vielleicht noch ein paar Minuten?"
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid ""
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "Der Operationsleiter holt aus einem Container einen Stapel Papier hervor.\n"
"\n"
"**Operationsleiter**: Hier hat sich echt einiges angesammelt. Wäre echt super, wenn Ihr mir\n"
"noch ein bisschen helfen könntet.\n"
"\n"
"Er übergibt Euch das oberste Blatt."
msgstr ""

#. §0: `Der Modus ponens ist eine schon in der antiken
#. Logik geläufige Schlussfigur, die in vielen logischen …`
#. §1: `mopo`
#. §2: `mopo`
#. §3: `revert «{hA}»`
#: Game.Levels.Implis.L02_Revert
msgid "\n"
"**Operationsleiter**: Das ist von einem Kollegen.\n"
"\n"
"**Robo**: Oh, das hab ich schon einmal irgendwo gelesen. Warte mal … Richtig! Das war\n"
"damals, als ich Wikipedia gecrawlt habe: §0\n"
"\n"
"**Du**: Robo! Gefragt ist ein Beweis und kein historischer Aufsatz! Oder komme ich hier\n"
"etwa mit §1 oder so etwas weiter?\n"
"\n"
"**Robo**: Okay, nein, sorry. §2 gibt es nicht. Probier lieber §3."
msgstr ""

#. §0: `revert`
#. §1: `intro`
#. §2: `intro`
#. §3: `«{A}» \\to «{B}»`
#. §4: `revert`
#: Game.Levels.Implis.L02_Revert
msgid "\n"
"**Du**: Aha. §0 ist quasi §1 rückwärts.\n"
"\n"
"**Robo**: Genau. §2 nimmt die Prämisse aus einer Implikation §3 im\n"
"Beweisziel und macht daraus eine Annahme. §4 nimmt umgekehrt eine Annahme und\n"
"setzt sie als Implikationsprämisse vor das Beweisziel. Aber nun mach schon fertig."
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "Der Operationsleiter nimmt erfreut Eure Lösung entgegen, und greift zum Telefon."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid ""
msgstr ""

#. §0: `revert`
#. §1: `revert`
#: Game.Levels.Implis.L03_Apply
msgid "Leider läuft das Telefonat nicht so gut. Er legt wieder auf und schüttelt mit dem Kopf.\n"
"\n"
"**Operationsleiter**: Der Kollege auf der anderen Seite des Mondes versteht kein §0. Oder\n"
"er tut zumindest so. Habt Ihr noch eine andere Idee?\n"
"\n"
"Er zieht eine Linie unter Euren Beweis, ergänzt ein durchgestrichenes ~§1~, und legt Euch\n"
"das Blatt ein zweites Mal vor."
msgstr ""

#. §0: `apply hAB at h`
#: Game.Levels.Implis.L03_Apply
msgid "\n"
"**Robo**: Vielleicht wäre es ohnehin eleganter gewesen, die gegebene Implikation anzuwenden.\n"
"Probier doch mal §0."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "**Du**: Ja, das kommt mir jetzt auch natürlich vor."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "Diesmal scheint das Telefonat erfolgreich zu verlaufen."
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid ""
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Operationsleiter**: Das hier ist jetzt wieder ein lokales Problem."
msgstr ""

#. §0: $A \\Rightarrow B \\Rightarrow C$
#. §1: $A \\Rightarrow C$
#. §2: `intro`
#: Game.Levels.Implis.L04_Apply
msgid "\n"
"**Du**: Ich soll Implikationen §0 zu §1\n"
"kombinieren?\n"
"\n"
"**Robo**: Vielleicht fängst du wieder mit §2 an?"
msgstr ""

#. §0: `have hB : B`
#: Game.Levels.Implis.L04_Apply
msgid "\n"
"**Operationsleiter**: Also *ich* würde an dieser Stelle jetzt erst einmal\n"
"§0 festhalten.\n"
"\n"
"**Robo**:  Für meinen Geschmack ein bisschen überflüssig.\n"
"Aber gut, kann man machen.\n"
"\n"
"**Robo** *(zu dir)*: Los, probiers mal!\n"
""
msgstr ""

#. §0: `B`
#: Game.Levels.Implis.L04_Apply
msgid "\n"
"**Robo**: Jetzt kannst du also erst einmal §0 beweisen …\n"
""
msgstr ""

#. §0: `«{hB}» : «{B}»`
#: Game.Levels.Implis.L04_Apply
msgid "\n"
"**Robo**: … und nachdem du das geschafft hast, hast du nun §0 als\n"
"Annahme zur Verfügung.\n"
""
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Operationsleiter**: Ihr seid echt super!"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid ""
msgstr ""

#. §0: $$
#.   \\begin{CD}
#.        A  @>{f}>> B @<{g}<< C    \\
#.     @V{h}VV    @V{i}VV   @V{j}VV \\
#.        D  @<{k}<< E @>{l}>> F    \\
#.     @A{m}AA    @A{n}AA   @V{p}VV \\
#.        G  @<{q}<< H @>{r}>> I
#.   \\end{CD}
#.   $$
#: Game.Levels.Implis.L05_Apply
msgid "Die nächste Seite sieht ein bisschen komplizierter aus. Damit Ihr nicht die Übersicht verliert, fasst Robo sofort die verschiedenen Implikationen in einem Diagramm zusammen.\n"
"  §0"
msgstr ""

#. §0: $A \\Rightarrow I$
#. §1: `intro`
#: Game.Levels.Implis.L05_Apply
msgid "\n"
"**Du**: Also ich muss einen Pfad von Implikationen §0 finden.\n"
"\n"
"**Robo**: Lass mich mal raten, wie wir anfangen … Wieder §1?"
msgstr ""

#. §0: `apply`
#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Na wieder §0, was sonst."
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "Der Operationsleiter bedankt sich wieder artig. Er drückt wieder auf ein paar Knöpfe,\n"
"und mit einem lauten Ratteln springen mehrere Förderbänder gleichzeitig wieder an."
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid ""
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Operationsleiter**: Wir hatten auch mal ein paar Förderbänder, die in beide Richtungen laufen\n"
"konnten. Die hatte ich vorsichtshalber alle abgestellt, weil in den neusten Handbüchern von\n"
"solchen Doppelbändern abgeraten wird. Aber vielleicht sind sie ja unter bestimmten\n"
"Voraussetzungen doch sicher? Was meint Ihr zu diesem Fall?"
msgstr ""

#. §0: `A ↔ B`
#. §1: $A \\iff B$
#. §2: `A ↔ B`
#. §3: `⟨A → B, B → A⟩`
#. §4: `A ∧ B`
#. §5: `constructor`
#: Game.Levels.Implis.L06_Iff
msgid "\n"
"**Robo**: §0 ist natürlich Leansch für §1, also genau-dann-wenn.\n"
"Die Aussage §2 besteht also aus zwei Teilen; sie ist als §3 definiert.\n"
"\n"
"**Du**: Also ganz ähnlich wie das UND, §4?\n"
"\n"
"**Robo**: Genau. Entsprechend kannst du auch hier mit §5 anfangen."
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Du**: Ah, und die beiden Teile habe ich schon in den Annahmen."
msgstr ""

#. §0: `(h : A ∧ B)`
#. §1: `h.left`
#. §2: `h.right`
#. §3: `(h : A ↔ B)`
#. §4: `h.mp`
#. §5: `h.mpr`
#. §6: `h.mp`
#. §7: `A → B`
#. §8: `mp`
#. §9: `mp`
#. §10: `mpr`
#: Game.Levels.Implis.L06_Iff
msgid "**Operationsleiter**: Okay, das leuchtet mir ein.\n"
"\n"
"**Robo** *(zu dir)*: Übrigens, so wie bei §0 die beiden\n"
"Teile §1 und §2 heißen,\n"
"heißen bei §3 die beiden Teile §4 und §5.\n"
"\n"
"**Du**: Also §6 ist §7? Wieso §8?\n"
"\n"
"**Robo**: §9 steht für Modus Ponens. Der Modus ponens ist eine schon in der antiken\n"
"Logik geläufige Schlussfigur, die in vielen logischen Systemen … Ach nee, das wolltest\n"
"du ja nicht hören. Das \"r\" in §10 steht für \"reverse\", weil's die Rückrichtung ist."
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid ""
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "**Operationsleiter**: Hier ist noch so etwas."
msgstr ""

#. §0: `symm`
#. §1: `symm at «{h}»`
#: Game.Levels.Implis.L07_Symm
msgid "\n"
"**Du**: Das ist ja nur verdreht.\n"
"\n"
"**Robo**: Ich kenne ein Werkzeug dafür. Mit §0 oder §1 kannst du eines\n"
"der beiden umdrehen."
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "**Operationsleiter**: Das war ja symmpel. Das nächste Problem sieht aber schwieriger aus."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid ""
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Operationsleiter**: Hier, könnt ihr dazu auch was sagen?"
msgstr ""

#. §0: $B \\iff A \\iff D \\iff C$
#. §1: `rw [h₁]`
#. §2: `C`
#. §3: `D`
#: Game.Levels.Implis.L08_Rw
msgid "\n"
"**Du**: §0, die sind doch alle äquivalent…\n"
"\n"
"**Robo**: Ja, aber du musst ihm helfen, die Äquivalenzen umzuschreiben. Mit §1 kannst\n"
"du §2 durch §3 ersetzen."
msgstr ""

#. §0: `←`
#. §1: `\\l`
#. §2: `rw [← hₓ]`
#: Game.Levels.Implis.L08_Rw
msgid "\n"
"**Du** Und wenn ich in die andere Richtung umschreiben möchte?\n"
"\n"
"**Robo**: Dann schreibst du ein §0 (§1, also klein \"L\") vor den Namen, also §2."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Operationsleiter**: Wenn Ihr so weitermacht, dann kommen wir ja durch den ganzen Packen durch!"
msgstr ""

#: Game.Levels.Implis.L09_Trans
msgid ""
msgstr ""

#. §0: `rw`
#. §1: `trans`
#. §2: $B \\iff A \\iff D \\iff C$
#. §3: `trans A`
#. §4: `B \\iff A`
#. §5: `trans D`
#: Game.Levels.Implis.L09_Trans
msgid "**Du**: Irgendwie fühlen sich diese §0 an, als würde man von hinten durch den Bauch argumentieren.  Geht das nicht auch irgendwie geradeaus, oder denken alle hier um die Ecke?\n"
"\n"
"**Robo**:  Vielleicht würde dir §1 besser gefallen.  Damit könntest du deine Kette von Äquivalenzen  §2 Schritt für Schritt abarbeiten: als erstes führst Du mit §3 den Zwischenschritt §4 ein, dann mit §5 den nächsten Zwischenschritt."
msgstr ""

#: Game.Levels.Implis.L09_Trans
msgid "**Robo**: Und, war das besser?\n"
"\n"
"**Du**:  Weiß nicht.  Wir können jedenfalls weitermachen."
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid ""
msgstr ""

#. §0: `rw`
#: Game.Levels.Implis.L10_Iff
msgid "**Operationsleiter**: Das hier ist wieder für meinen beschränkten Kollegen. Ich glaube,\n"
"§0 mag der auch nicht. Geht das trotzdem?"
msgstr ""

#. §0: `intro`
#: Game.Levels.Implis.L10_Iff
msgid "\n"
"**Du**: Naja ich kann wohl immerhin mal mit §0 anfangen …\n"
"\n"
"**Robo**: … und dann schauen wir weiter!"
msgstr ""

#. §0: `apply`
#. §1: `«{h}»`
#. §2: `rw [← «{h}»]`
#. §3: `«{A}» → «{B}»`
#. §4: `«{h}»`
#. §5: `«{h}».mp`
#. §6: `apply («{h}».mp) at …`
#: Game.Levels.Implis.L10_Iff
msgid "\n"
"**Robo**: Also eine Implikation wendet man mit §0 an …\n"
"\n"
"**Du**: Weiß ich doch! Aber §1 ist keine Implikation, sondern eine Äquivalenz.\n"
"Da würde ich doch eigentlich §2 sagen wollen.\n"
"\n"
"**Robo**: Die Richtung §3 von §4 heißt §5. Du kannst sie\n"
"mit §6 anwenden."
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Operationsleiter**: Okay, super. Das müsste passen.\n"
"\n"
"Er telefoniert wieder.\n"
"\n"
"**Operationsleiter**: Bingo!"
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid ""
msgstr ""

#. §0: `rw`
#. §1: `apply`
#: Game.Levels.Implis.L11_Iff
msgid "**Operationsleiter**: Ah, die nächste Seite ist auch von diesem Kollegen.\n"
"Aber da ist noch eine Notiz bei. Wir hatten hierfür schon einmal einen Beweis,\n"
"aber den mochte er nicht. Er wollte einen Beweis, der weder §0 noch §1 verwendet!!\n"
"\n"
"Er holt tief Luft und seuft.\n"
"\n"
"**Operationsleiter**: Ich glaube, der stellt sich immer viel dümmer, als er ist.\n"
"Aber meint Ihr, Ihr schafft das?"
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Du**: Hmm, mindestens mit der Implikation kann ich anfangen."
msgstr ""

#. §0: `intro`
#: Game.Levels.Implis.L11_Iff
msgid "**Robo**: Genau, das war §0."
msgstr ""

#. §0: `rw [«{h}»]`
#. §1: `apply («{h}».mp)`
#. §2: `obtain ⟨mp, mpr⟩ := «{h}»`
#: Game.Levels.Implis.L11_Iff
msgid "\n"
"**Du**: Also, ich kenne §0 und §1, aber das wollten wir ja\n"
"diesmal vermeiden.\n"
"\n"
"**Robo**: Was du machen könntest, ist, mit §2 die Annahme\n"
"in zwei Teile aufteilen."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Du**: Ah, und jetzt ist das Beweisziel in den Annahmen."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Operationsleiter**: Perfekt, das sollte reichen!"
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid ""
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "Beim nächsten Problem stutzt der Operationsleiter.\n"
"\n"
"**Operationsleiter**: Ehrlich gesagt weiß ich gar nicht, wo dieses Blatt herkommt. Das ist\n"
"gar nicht von mir. Sieht aber irgendwie interessant aus."
msgstr ""

#. §0: `A`
#. §1: `¬A`
#. §2: `by_cases h : A`
#: Game.Levels.Implis.L12_ByCases
msgid "\n"
"**Du**: Naja, eine der beiden Aussagen §0 oder §1 wird schon wahr sein.\n"
"\n"
"**Robo**: Klarer Fall für eine Fallunterscheidung, würde ich sagen. Probier\n"
"mal §2."
msgstr ""

#. §0: `A`
#. §1: `A`
#: Game.Levels.Implis.L12_ByCases
msgid "\n"
"**Robo**: Siehst du, jetzt hat der Beweis zwei Teile. Im ersten Teil nimmst\n"
"du an, dass §0 wahr ist. Im zweiten nimmst du an, dass §1 falsch ist."
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "Der Operationsleiter nickt zustimmend."
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid ""
msgstr ""

#. §0: `apply`
#. §1: ```
#. lemma not_not (A : Prop) : ¬¬A ↔ A
#. ```
#: Game.Levels.Implis.L13_Rw
msgid "**Operationsleiter**: Wieder etwas für den Kollegen …. Und er wollte wieder einen\n"
"Beweise ohne §0. Ich sehe hier auch, dass ich mir schon einmal etwas\n"
"hierzu notiert hatte. Richtig, es gibt da dieses Lemma:\n"
"§1\n"
"\n"
"**Operationsleiter**: Schafft Ihr das damit?"
msgstr ""

#. §0: `not_not`
#. §1: `↔`
#. §2: `=`
#. §3: `rw [not_not]`
#: Game.Levels.Implis.L13_Rw
msgid "\n"
"**Robo**: Ein Lemma, das wie §0 ein §1 oder §2 im Statement hat, kann\n"
"auch mit §3 verwendet werden."
msgstr ""

#. §0: `¬¬`
#. §1: `rw`
#. §2: `¬¬C`
#. §3: `¬¬B`
#: Game.Levels.Implis.L13_Rw
msgid "\n"
"**Du**: Häh, wieso hat das jetzt 2 von 3 der §0 umgeschrieben?\n"
"\n"
"**Robo**: §1 schreibt nur das erste um, das es findet, also §2. Aber weil dieses\n"
"mehrmals vorkommt, werden die alle ersetzt …\n"
"\n"
"**Du**: Ah, und §3 ist etwas anderes, also brauche ich das Lemma nochmals."
msgstr ""

#. §0: `rw`
#. §1: `rfl`
#: Game.Levels.Implis.L13_Rw
msgid "**Du**: Wir sind schon fertig …?\n"
"\n"
"**Robo**: Ja, §0 versucht immer anschließend §1 aufzurufen, und das hat hier funktioniert."
msgstr ""

#. §0: `tauto`
#. §1: `simp`
#: Game.Levels.Implis.L13_Rw
msgid "Statt dieser Aussage können oft auch die Taktiken §0 oder §1 verwendet werden."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid ""
msgstr ""

#. §0: `→`
#. §1: `↔`
#. §2: `intro`
#. §3: `revert`
#. §4: `intro`
#. §5: `apply`
#. §6: `apply at`
#. §7: `symm`
#. §8: `A ↔ B`
#. §9: `B ↔ A`
#. §10: `trans`
#. §11: `A ↔ C`
#. §12: `A ↔ B`
#. §13: `B ↔ C`
#. §14: `rw [h] `
#. §15: `h`
#. §16: `rw [h] at h₁`
#. §17: `h₁`
#. §18: `h`
#. §19: `by_cases h : P`
#. §20: `P`
#. §21: `¬P`
#: Game.Levels.Implis.L14_Summary
msgid "**Operationsleiter**: Ihr habt mir wirklich so geholfen! Hier ist das letzte Problem.\n"
"Das habe ich von meinem Vorgänger geerbt. Er hat behauptet, wenn wir das lösen können,\n"
"dann läuft hier wieder alles. Aber es sah mir immer viel zu schwierig aus, um es überhaupt\n"
"zu versuchen. Wollt Ihr es einmal probieren?\n"
"\n"
"**Du**: Klar, zeig her! Robo, kannst du mir vielleicht auch noch einmal so eine nette\n"
"Zusammenfassung anzeigen, was ich theoretisch in den letzten fünf Minuten gelernt habe?\n"
"\n"
"**Robo**: Hier ist die Übersicht:\n"
"\n"
"## Notationen / Begriffe\n"
"\n"
"|     | Beschreibung                 |\n"
"|:--- |:---------------------------- |\n"
"| §0 | Implikation                  |\n"
"| §1 | genau-dann-wenn / Äquivalenz |\n"
"\n"
"## Taktiken\n"
"\n"
"| Taktik           | Beispiel                                                          |\n"
"|:---------------- |:----------------------------------------------------------------- |\n"
"| §2          | holt linke Seite einer Implikations im Beweisziel in die Annahmen |\n"
"| §3         | Umkehrung von §4                                             |\n"
"| §5          | wendet Implikation “rückwärts” auf das Beweisziel an              |\n"
"| §6       | wendet Implikation “vorwärts” auf eine Annahme an                 |\n"
"| §7           | ändert §8 zu §9                                         |\n"
"| §10          | ändert §11 zu §12 und §13                             |\n"
"| §14        | schreibt Beweisziel mithilfe der Äquivalenz §15 um                |\n"
"| §16   | schreibt Annahme §17 mithilfe der Äquivalenz §18 um              |\n"
"| §19 | Fallunterscheidung zwischen §20 und §21                          |"
msgstr ""

#. §0: `tauto`
#: Game.Levels.Implis.L14_Summary
msgid "Oft kann auch §0 diese Art von logischen Ausdrücken lösen."
msgstr ""

#. §0: `tauto`
#: Game.Levels.Implis.L14_Summary
msgid "Oft kann auch §0 diese Art von logischen Ausdrücken lösen."
msgstr ""

#. §0: `→`
#: Game.Levels.Implis.L14_Summary
msgid "**Du** *(flüsternd)*: Ist das nicht die Definition von §0?\n"
"\n"
"**Robo** *(flüsternd)*: Könnte man so sehen. Aber auf Leansch ist das bloß eine Äquivalenz."
msgstr ""

#. §0: `by_cases`
#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Vielleicht kannst du wieder §0 benutzen."
msgstr ""

#. §0: `intro`
#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Na Implikationen gehst du immer mit §0 an."
msgstr ""

#. §0: `h`
#. §1: `obtain`
#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Ich würde mal die Annahme §0 mit §1 aufteilen."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Operationsleiter**: Das ist ja fantastisch! Tausend Dank! Dann will ich Euch auch gar\n"
"nicht länger aufhalten.\n"
"Ihr wollt bestimmt weiter zum Planeten Quantus, oder?\n"
"\n"
"**Du**: Ehm, vielleicht …\n"
"\n"
"**Operationsleiter**: Dann habe ich noch eine letzte Bitte. Ich habe hier noch ein Päckchen\n"
"für die Königin von Quantus! Auch schon von meinem Vorgänger geerbt. Die Post will es\n"
"nicht annehmen, weil ich die Adresse nicht weiß. Könntet Ihr es vielleicht zu ihr mitnehmen?\n"
"\n"
"**Du**: Klar! Robo, halt mal.\n"
"\n"
"Robo nimmt das Päckchen und lässt es irgendwo in seinem Innern verschwinden.\n"
"Der Operationsleiter sieht ihn entgeistert an.\n"
"\n"
"**Robo**: Keine Angst, ich verdaue nichts!"
msgstr ""

#: Game.Levels.Implis
msgid "Implis"
msgstr ""

#. §0: `tauto`
#: Game.Levels.Implis
msgid "Zurück im Raumschiff macht ihr euch auf den Weg zu einem benachbarten Planeten, der ebenfalls\n"
"bewohnt zu sein scheinen.\n"
"\n"
"**Du**: Ich habe immer noch das Gefühl, dass ich die Aufgabe von Königin *Logisinde*\n"
"ohne §0 nicht hätte lösen können.\n"
"Kamen in der Aufgabe nicht auch Implikationen vor?\n"
"\n"
"**Robo**: Vielleicht haben wir ja auf dem Planeten *Implis*, den wir gerade ansteuern,\n"
"Gelegenheit, noch etwas dazuzulernen. Festhalten bitte …\n"
"\n"
"Und damit leitet Robo den Landeanflug ein.\n"
"\n"
"Implis scheint ein riesiger Tagebau zu sein.\n"
"Überall verlaufen Förderbänder, kreuz und quer, aber die meisten stehen still.\n"
"Ein schüchterner Operationsleiter erwartet Euch bereits.\n"
"\n"
"**Operationsleiter**: Ihr kommt mir gerade recht! Ich habe schon gehört. Echte Mathematiker!\n"
"Wisst Ihr, wir fördern hier Wahrheitswerte. Und dabei muss man höllisch aufpassen.\n"
"Ein Fehler, und alles bricht zusammen. Aber ich bin sehr vorsichtig. Ich sage immer:\n"
"Lieber Stillstand als Untergang!"
msgstr ""

#: Game.Levels.Quantus.L01_NonemptyUse
msgid ""
msgstr ""

#: Game.Levels.Quantus.L01_NonemptyUse
msgid "Auf der Vorderseite steht folgendes."
msgstr ""

#. §0: `use _`
#: Game.Levels.Quantus.L01_NonemptyUse
msgid "**Du**: Ich soll zeigen, dass es eine natürlich Zahl gibt?\n"
"\n"
"**Robo**: Genau.  Dazu gibts du mit §0 einfach irgendeine natürlich Zahl an."
msgstr ""

#: Game.Levels.Quantus.L01_NonemptyUse
msgid "Ihr dreht das Blatt um."
msgstr ""

#: Game.Levels.Quantus.L02_NonemptyObtain
msgid ""
msgstr ""

#: Game.Levels.Quantus.L02_NonemptyObtain
msgid "Auf der Rückseite steht folgendes."
msgstr ""

#. §0: `A`
#. §1: `A`
#. §2: `h`
#. §3: `A`
#. §4: `obtain`
#. §5: `obtain ⟨a⟩ := h`
#: Game.Levels.Quantus.L02_NonemptyObtain
msgid "\n"
"**Du**: Was ist das denn jetzt?  §0 ist in „Typ“?\n"
"\n"
"**Robo** Du kannst dir §1 einfach als Menge vorstellen …\n"
"\n"
"**Du** … die laut Annahme §2 nicht leer ist?\n"
"\n"
"**Robo** Genau.\n"
"\n"
"**Du** Und zeigen soll ich, dass es ein Element in §3 gibt?\n"
"\n"
"**Robo** Richtig.\n"
"\n"
"**Du** Und folgt das nicht genau aus der Annahme?\n"
"\n"
"**Robo** Das ist wieder so ein Annahme, die man mit §4 „zerlegen“ kann.\n"
"Probier mal §5.\n"
""
msgstr ""

#: Game.Levels.Quantus.L02_NonemptyObtain
msgid "Ihr erhaltet einen bescheidenen Applaus.  Die Formalosophinnen tuscheln untereinander."
msgstr ""

#: Game.Levels.Quantus.L03_Decide
msgid ""
msgstr ""

#. §0: ```
#. def Even (n : ℕ) : Prop := ∃ r, n = r + r
#. ```
#. §1: `Odd`
#: Game.Levels.Quantus.L03_Decide
msgid "Offenbar versuchen sich die Formalosophinnen auf ein weiteres Problem zu einigen, dass sie euch präsentieren könnten.\n"
"Nach einer Weile kristallisieren sich zwei Lager heraus.\n"
"Ihr hört abwechselnd die Rufe „Even“ und „Odd“. Deshalb zeigt dir Robo\n"
"vorsichtshalber schon einmal die entsprechende Definition:\n"
"\n"
"§0\n"
"\n"
"Bevor er zu §1 weitergehen kann,\n"
"taucht von irgendwo aus der Menge folgendes Papier auf:"
msgstr ""

#. §0: `decide`
#: Game.Levels.Quantus.L03_Decide
msgid "\n"
"**Robo**: Moment! Dafür brauchst du die Definition gar nicht!\n"
"\n"
"**Du**: Das ist ja irgendwie trivial…\n"
"\n"
"**Robo**: Erinnerst du dich? §0 kann alle Aufgaben lösen, bei denen es einen\n"
"einfachen Algorithmus gibt um die Wahrheit zu bestimmen.\n"
"Aussagen zu konkreten Zahlen fallen meistens in diese Kategorie!\n"
""
msgstr ""

#. §0: `decide`
#. §1: `Even 42`
#. §2: `decide`
#: Game.Levels.Quantus.L03_Decide
msgid "**Du**: Was kann denn §0 noch alles?\n"
"\n"
"**Robo**: Konkret hat hier jemand einen ausführbaren\n"
"Algorithmus angegeben, wie entschieden werden\n"
"soll, ob §1 wahr oder falsch ist. Wenn §2 also so einen Algorithmus kennt,\n"
"dann kann es die Aufgabe lösen."
msgstr ""

#: Game.Levels.Quantus.L04_Exists
msgid ""
msgstr ""

#. §0: ```
#. def Even (n : ℕ) : Prop := ∃ r, n = r + r
#. ```
#. §1: ```
#. def Odd (n : ℕ) : Prop := ∃ r, n = 2 * r + 1
#. ```
#: Game.Levels.Quantus.L04_Exists
msgid "Die Rufe „Even“ und „Odd“ aus der Menge sind noch lange nicht verstummt, deshalb\n"
"zeigt dir Robo nochmals die Definitionen:\n"
"\n"
"§0\n"
"\n"
"und\n"
"\n"
"§1\n"
"\n"
"Damit erhaltet ihr auch ein weiteres Blatt:"
msgstr ""

#: Game.Levels.Quantus.L04_Exists
msgid "Das Quadrat einer geraden Zahl ist gerade."
msgstr ""

#. §0: `Even «{n}»`
#. §1: `r`
#. §2: `r + r = «{n}»`
#. §3: `unfold Even at *`
#. §4: `decide`
#. §5: `decide`
#. §6: `«{n}»`
#: Game.Levels.Quantus.L04_Exists
msgid "\n"
"**Robo**: Wie du oben siehst, ist §0 dadurch definiert,\n"
"dass ein §1 existiert so dass §2 ist. Am besten\n"
"öffnest du diese Definition mit §3 einmal.\n"
"Dann siehst du besser, was los ist.\n"
"\n"
"**Du**: Was ist mit §4?\n"
"\n"
"**Robo**: §5 wird nicht funktionieren, da §6 keine konkrete sondern\n"
"eine beliebige Zahl ist. Da musst du schon etwas Arbeit leisten!"
msgstr ""

#. §0: `«{h}»`
#. §1: `s`
#. §2: `s + s = «{n}»`
#. §3: `choose s hs using «{h}»`
#. §4: `s`
#: Game.Levels.Quantus.L04_Exists
msgid "\n"
"**Du**: Also von §0 weiß ich jetzt, dass ein §1 existiert, so dass §2 …\n"
"\n"
"**Robo**: Mit §3 kannst du dieses §4 tatsächlich einführen."
msgstr ""

#. §0: `r`
#. §1: `n ^ 2 = r + r`
#. §2: `let r := …`
#: Game.Levels.Quantus.L04_Exists
msgid "\n"
"**Du**: Und jetzt muss ich eine passende Zahl §0 finden, so dass §1?\n"
"\n"
"**Robo**: Genau. Wenn du willst, kannst du dir diese Zahl erst einmal mit\n"
"§2  zurechtlegen."
msgstr ""

#. §0: `use r`
#. §1: `use 2 * s^2`
#: Game.Levels.Quantus.L04_Exists
msgid "\n"
"**Robo**:  Die Zahl sieht gut aus!  Und jetzt sagst du einfach §0.\n"
"Du hättest natürlich auch gleich §1 sagen können.\n"
""
msgstr ""

#. §0: `ring`
#. §1: `rw`
#. §2: `n`
#. §3: `«{s}» + «{s}»`
#. §4: `ring`
#: Game.Levels.Quantus.L04_Exists
msgid "\n"
"**Du**: Ah, und jetzt §0!\n"
"\n"
"**Robo**: Aber zuerst musst du noch mit\n"
"§1 §2 durch §3 ersetzen, da §4 das sonst nicht weiß."
msgstr ""

#: Game.Levels.Quantus.L04_Exists
msgid "Applaus!"
msgstr ""

#: Game.Levels.Quantus.L05_neg_pow
msgid ""
msgstr ""

#: Game.Levels.Quantus.L05_neg_pow
msgid "Eine weitere Frage erreicht euch.  Dieses stammt offenbar aus dem anderen Lager."
msgstr ""

#. §0: `Odd.neg_pow`
#: Game.Levels.Quantus.L05_neg_pow
msgid "\n"
"**Robo**:  Ich glaube, hier kommst du mit §0 weiter.\n"
""
msgstr ""

#: Game.Levels.Quantus.L05_neg_pow
msgid ""
msgstr ""

#: Game.Levels.Quantus.L05_neg_pow
msgid ""
msgstr ""

#: Game.Levels.Quantus.L05_neg_pow
msgid ""
msgstr ""

#: Game.Levels.Quantus.L06_not_even_iff_odd
msgid ""
msgstr ""

#: Game.Levels.Quantus.L06_not_even_iff_odd
msgid "Sofort taucht das nächste Blatt auf.\n"
"Es scheint, als hätten sie sich diesmal auf einen Kompromiss geeignet."
msgstr ""

#. §0: `i`
#. §1: `by_cases h : Even i`
#: Game.Levels.Quantus.L06_not_even_iff_odd
msgid "\n"
"**Du**:  Ich glaube, ich würd gern eine Fallunterscheidung machen, ob §0 gerade oder ungerade ist.\n"
"\n"
"**Robo**:  Dann mach das doch – zum Beispiel mit §1.\n"
""
msgstr ""

#. §0: `not_even_iff_odd`
#. §1: `¬Even`
#. §2: `Odd`
#: Game.Levels.Quantus.L06_not_even_iff_odd
msgid "\n"
"**Robo**:  Mit §0 kannst du §1 in §2 verwandeln.\n"
""
msgstr ""

#: Game.Levels.Quantus.L06_not_even_iff_odd
msgid ""
msgstr ""

#: Game.Levels.Quantus.L06_not_even_iff_odd
msgid ""
msgstr ""

#: Game.Levels.Quantus.L06_not_even_iff_odd
msgid "Diesmal habt ihr die Formalosophinnen offenbar beeindruckt.  Sie nicken anerkennend.\n"
"\n"
"Dann geht das Getuschel wieder los."
msgstr ""

#: Game.Levels.Quantus.L07_Forall
msgid ""
msgstr ""

#: Game.Levels.Quantus.L07_Forall
msgid "Nach längerem Durcheinander findet folgende Aufgabe aus der Menge zu Euch."
msgstr ""

#. §0: `∀`
#. §1: `\\forall`
#. §2: `∀ x, …`
#. §3: `intro x`
#: Game.Levels.Quantus.L07_Forall
msgid "\n"
"**Du**: Das §0 heisst sicher \"für alle\".\n"
"\n"
"**Robo**: Und man schreibt §1. Ein §2 im Beweisziel kannst du wie eine\n"
"Implikation mit §3 angehen."
msgstr ""

#: Game.Levels.Quantus.L07_Forall
msgid "Wieder anerkennendes Nicken.\n"
"\n"
"Wieder Getuschel."
msgstr ""

#: Game.Levels.Quantus.L08_PushNeg
msgid ""
msgstr ""

#: Game.Levels.Quantus.L08_PushNeg
msgid "**Robo**: Während wir warten, zeig ich dir vielleicht kurz, wie sich Negation mit Quantoren verträgt. Ich habe so ein Gefühl, dass wir das gleich brauchen werden."
msgstr ""

#. §0: `«{P}»`
#. §1: `«{P}»`
#. §2: `«{X}»`
#. §3: `«{X}»`
#. §4: `«{P}» x`
#. §5: `x`
#. §6: `x`
#. §7: `x`
#. §8: `«{P}»`
#. §9: `x : «{X}»`
#. §10: `push_neg`
#: Game.Levels.Quantus.L08_PushNeg
msgid "\n"
"**Du**: Was ist denn jetzt dieses §0?\n"
"\n"
"**Robo**: §1 ist ein „Prädikat“; eine Aussage über Objekte vom Typ §2.\n"
"Zum Beispiel könnte §3 wieder der Typ der natürlichen Zahlen sein.\n"
"Und §4 könnte die Aussage sein:\n"
"Die natürliche Zahl §5 ist gerade. Oder: §6 hat sieben Primfaktoren. Oder: §7\n"
"ist Robo's Lieblingszahl. Oder …\n"
"\n"
"**Du**: Schon gut, ich glaub ich habs verstanden. §8 ist sozusagen eine Abbildung, die\n"
"ein Element §9 nimmt und auf eine Aussage wirft.\n"
"\n"
"**Robo**: Ja, sozusagen.\n"
"\n"
"**Du**: Gut. Dann ist auch ziemlich klar, was hier die Aussage ist.\n"
"Und du wolltest mir jetzt verraten, wie ich das auf Leansch zeige?\n"
"\n"
"**Robo**: Genau. Was du brauchst, ist §10."
msgstr ""

#. §0: `push_neg`
#. §1: `not_exists (P : X → Prop) : ¬ (∃ x, P x) ↔ ∀ x, (¬ P x)`
#. §2: `not_forall (P : X → Prop) : ¬ (∀ x, P x) ↔ ∃ x, (¬ P x)`
#. §3: `push_neg`
#: Game.Levels.Quantus.L08_PushNeg
msgid "**Robo**: Gut gemacht. Intern benutzt §0 übrigens zwei Lemmas:\n"
"\n"
" - §1\n"
" - §2\n"
"\n"
"Das erste Lemma ist die Aussage, die du gerade gezeigt hast.\n"
"\n"
"**Du**: Na toll. Ich habe die Aussage also gezeigt, indem ich sie benutzt habe …\n"
"\n"
"**Robo**: :-) Hauptsache, Du merkst dir §3."
msgstr ""

#: Game.Levels.Quantus.L09_PushNeg
msgid ""
msgstr ""

#: Game.Levels.Quantus.L09_PushNeg
msgid "Nach langem Hin und Her haben sich die Formalosophinnen endlich auf folgende Frage geeignet."
msgstr ""

#. §0: `¬`
#: Game.Levels.Quantus.L09_PushNeg
msgid "**Du**: Oha. Ganz links ein §0. Was du nicht sagst …"
msgstr ""

#. §0: `use`
#. §1: `not_odd_iff_even`
#. §2: `not_odd_iff_even`
#. §3: `rw`
#. §4: `use`
#: Game.Levels.Quantus.L09_PushNeg
msgid "\n"
"**Robo**: Jetzt brauchst du eine Zahl mit §0, und danach vermutlich das\n"
"Lemma §1 brauchen.\n"
"\n"
"**Du**: Könnte ich jetzt schon §2 anwenden?\n"
"\n"
"**Robo**: Nein, §3 kann nicht innerhalb von Quantoren umschreiben.\n"
"\n"
"**Du**: Aber wie würde ich das machen?\n"
"\n"
"**Robo**: Zeig ich dir später, nicht hier vor großem Publikum.\n"
"Ich würde jetzt lieber mit §4 eine richtige Zahl angeben, und danach umschreiben."
msgstr ""

#. §0: `not_odd_iff_even`
#: Game.Levels.Quantus.L09_PushNeg
msgid "**Robo**: Gute Wahl! Jetzt kannst du §0 verwenden."
msgstr ""

#. §0: `push_neg`
#: Game.Levels.Quantus.L09_PushNeg
msgid "Statt diesem Theorem kannst du §0 verwenden."
msgstr ""

#. §0: `push_neg`
#: Game.Levels.Quantus.L09_PushNeg
msgid "Statt diesem Theorem kannst du §0 verwenden."
msgstr ""

#: Game.Levels.Quantus.L09_PushNeg
msgid "Die Formalosophinnen sind ganz begeistert.\n"
"Nachdem sich der Beifall gelegt hat, hast du auch einmal eine Frage.\n"
"\n"
"**Du**: Kann uns hier irgendjemand vielleicht ein bisschen Orientierung im Formaloversum geben?\n"
"\n"
"**Alle**: Ja, ja.\n"
"\n"
"**Du**: Wer denn?\n"
"\n"
"Die Frage war wieder zu konkret. Betretenes Schweigen."
msgstr ""

#: Game.Levels.Quantus.L10_DrinkersParadox
msgid ""
msgstr ""

#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "**Du**: Könnt ihr eigentlich immer nur im Chor oder durcheinander reden?\n"
"\n"
"Wieder herrscht längeres Schweigen. Dann auf einmal:\n"
"\n"
"**Alle**: Es gibt unter uns eine Person, wenn die redet, dann reden alle!\n"
"\n"
"Du kratzt Dich am Kopf.\n"
"\n"
"**Robo**: Ist doch klar. Das ist auf jedem bewohnten Planeten so!\n"
"\n"
"**Du**: Was??\n"
"\n"
"**Robo**: Das ist eine Version vom Drinker's Paradox! Kennst du das nicht? Dann lies\n"
"das am besten Mal in deiner Handbibliothek nach! *In jeder Bar gibt es eine Person mit\n"
"der Eigenschaft, dass alle trinken, wenn sie trinkt.* Genauer gesagt: in jeder nicht-leeren Bar.\n"
"\n"
"**Du**: Glaube ich nicht.\n"
"\n"
"**Robo**: Glaube ich schon. Ich glaube sogar, du kannst das beweisen. Hier, probier mal!"
msgstr ""

#. §0: `«{isDrinking}»`
#. §1: `p`
#. §2: `«{isDrinking}» p`
#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "\n"
"**Du**: Also, §0 ist wieder so ein Prädikat …\n"
"Wenn §1 eine Person ist, ist §2 eine Aussage,\n"
"die wahr oder falsch ist. Soweit so gut.\n"
""
msgstr ""

#. §0: `∀ (y : «{People}»), «{isDrinking}» y`
#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "\n"
"**Du**: Und wie fang ich jetzt an?\n"
"\n"
"**Robo**: Ich sagte doch, schau am besten Mal in deine Handbibliothek.\n"
"Wenn ich mich richtige erinnere, hilft eine Fallunterscheidung, ob die Aussage\n"
"§0 wahr oder falsch ist.\n"
""
msgstr ""

#. §0: `by_cases`
#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "**Robo**: Schau mal §0 an."
msgstr ""

#. §0: `h_nonempty`
#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "\n"
"**Du**: Und wen nehm ich jetzt?\n"
"\n"
"**Robo**: Ist das nicht egal? Aus der Annahme §0 weißt du, dass es jemanden gibt."
msgstr ""

#. §0: `push_neg at «{h}»`
#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "**Robo**: Du könntest hier mit §0 weitermachen."
msgstr ""

#. §0: `«{h}»`
#. §1: `obtain`
#. §2: `«{h}»`
#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "**Du**: Also nach §0 existiert ja eine Person, die nicht trinkt. Könnte ich diese brauchen damit die Aussage trivialerweise wahr wird?\n"
"\n"
"**Robo**: Schau dir mal an wie man §1 auf die Annahme §2 anwenden könnte."
msgstr ""

#. §0: `«{hp}»`
#. §1: `«{hp'}»`
#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "**Robo**: Was siehst du, wenn du §0 und §1 anschaust?"
msgstr ""

#. §0: `∃`
#. §1: `∀`
#. §2: `Even n`
#. §3: `n`
#. §4: `Odd n`
#. §5: `n`
#. §6: `rw`
#. §7: `ring`
#. §8: `+, -, *, ^`
#. §9: `decide`
#. §10: `unfold`
#. §11: `use`
#. §12: `∃`
#. §13: `choose x hx using h`
#. §14: `∃`
#. §15: `intro`
#. §16: `∀`
#. §17: `push_neg`
#. §18: `¬∃`
#. §19: `¬∀`
#: Game.Levels.Quantus.L10_DrinkersParadox
msgid "**Du**: Verstehe. Aber jetzt habe ich auch wirklich genug von dieser Prädikatenlogik!\n"
"\n"
"**Robo**: Dann fliegen wir am besten weiter! Aber bevor du fragst – hier ist wieder ein Überblick, was du auf diesem Planeten gelernt hast.\n"
"\n"
"\n"
"|               | Beschreibung                |\n"
"|:--------------|:----------------------------|\n"
"| §0           | Existential-Quantifier      |\n"
"| §1           | Forall-Quantifier           |\n"
"| §2      | §3 ist gerade              |\n"
"| §4       | §5 ist ungerade            |\n"
"\n"
"|       | Taktik                    | Beispiel                                               |\n"
"|:------|:--------------------------|:-------------------------------------------------------|\n"
"| *13ᶜ* | §6                      | Umschreiben mit Gleichungen.                           |\n"
"| 15    | §7                    | Löst Gleichungen mit §8.                     |\n"
"| *4ᵇ*  | §9                  | Kann auch Aussagen zu konkreten Zahlen beantworten.    |\n"
"| 16    | §10                  | Setzt visuell die Bedeutung einer Definition ein.      |\n"
"| 17    | §11                     | Um ein §12 im Goal anzugehen.                          |\n"
"| 18    | §13     | Um ein §14 in den Annahmen zu zerlegen.                |\n"
"| *8ᵇ*  | §15                   | Um ein §16 im Goal anzugehen.                          |\n"
"| 19    | §17                | Für §18 und §19 im Goal.                             |"
msgstr ""

#: Game.Levels.Quantus
msgid "Quantus"
msgstr ""

#: Game.Levels.Quantus
msgid "Auf Quantus erwartet Euch bereits eine große Ansammlung von Formalosopheninnen.\n"
"Sie reden alle wild durcheinander und Ihr habt Probleme, Euch überhaupt Gehör zu verschaffen.\n"
"Robo produziert schließlich ein lautes Gong-Geräusch, das sie kurzzeitig zur Ruhe bringt.\n"
"\n"
"**Du**: Wir haben einen Brief für Eure Königin. Könntet Ihr uns zu Eurer Königin führen?\n"
"\n"
"**Alle** *(im Chor)*: Wir sind schon alle hier!\n"
"\n"
"**Du**: Okay. Und wer von Euch ist die Königin?\n"
"\n"
"Nun herrscht betretenes Schweigen. Alle zucken mit den Schultern.\n"
"\n"
"**Du**: Habt Ihr überhaupt eine Königin?\n"
"\n"
"**Alle** *(im Chor)*: Ja, ja. Wir haben eine Königin, wir haben eine Königin.\n"
"\n"
"**Robo** *(zu dir)*: Ich fasse mal zusammen. Es existiert eine Königin, aber keiner weiß, wer\n"
"sie ist …\n"
"\n"
"**Du**: Ist das nicht ein Widerspruch?\n"
"\n"
"**Robo**: Fragst du, du als Mathematiker? Nein, das ist kein Widerspruch. Das ist einfach eine\n"
"„reine Existenzaussage“.\n"
"\n"
"Du bist dir nicht ganz sicher, wie ernst er das meint.\n"
"\n"
"**Du**: Dann schlage ich vor, wir übergeben das Päckchen einfach an *alle* Bewohner. Dann haben\n"
"wir es ja insbesondere der Königin übergeben.\n"
"\n"
"**Du** *(in die Menge)*: Wir haben Euch ein Päckchen von Implis gebracht. Hier, das ist für Euch.\n"
"\n"
"Robo wirft es in die Menge, und die Formalosophinnen reißen es auf.\n"
"Tatsächlich befindet sich darin nur eine einziges Stück Papier.\n"
"Nach wenigen Minuten liegt es wieder bei euch.\n"
"Und die Formalosophinnen schauen alle neugirig, wie ihr damit umgeht."
msgstr ""

#: Game.Levels.Saturn.L01_Rewrite_equality
msgid ""
msgstr ""

#: Game.Levels.Saturn.L01_Rewrite_equality
msgid "Plötzlich erreicht euch ein Funkspruch."
msgstr ""

#. §0: `=`
#. §1: `↔`
#. §2: `rw`
#: Game.Levels.Saturn.L01_Rewrite_equality
msgid "**Du**: Ich habe das Gefühl, das habe ich schon einmal gesehen.\n"
"\n"
"**Robo**:  Ja!  Das sieht so ähnlich aus wie eine Aufgabe, die wir auf *Implis*\n"
"schon gelöst hatten.\n"
"Nur, das hier jetzt Gleichheiten von Zahlen statt Genau-Dann-Wenn-Aussagen stehen!\n"
"Aber das macht im Grunde gar keinen Unterschied.\n"
"Du kannst §0 und §1 mit §2 praktisch gleich behandeln."
msgstr ""

#. §0: `rw [hₓ]`
#. §1: `rw [← hₓ]`
#: Game.Levels.Saturn.L01_Rewrite_equality
msgid "**Du**: Also auch §0 und §1?\n"
"\n"
"**Robo**: Probiers doch einfach."
msgstr ""

#. §0: `←`
#. §1: `\\l`
#. §2: `rw [← hₓ]`
#: Game.Levels.Saturn.L01_Rewrite_equality
msgid "**Du**: Wie war das nochmals mit rückwärts umschreiben?\n"
"\n"
"**Robo**: §0 ist §1. Und dann §2"
msgstr ""

#: Game.Levels.Saturn.L01_Rewrite_equality
msgid "Es kommt ein 👍 zurück."
msgstr ""

#: Game.Levels.Saturn.L02_Ring_add_pow_two
msgid ""
msgstr ""

#: Game.Levels.Saturn.L02_Ring_add_pow_two
msgid "Der nächste Funkspruch sieht ein bisschen anders aus."
msgstr ""

#. §0: `binomi`
#. §1: `add_pow_two`
#. §2: `rw [add_pow_two]`
#: Game.Levels.Saturn.L02_Ring_add_pow_two
msgid "**Du**: Sind wir hier bei den anonymen Schulmathematikern?\n"
"Man rechnet das doch einfach aus, indem man die Terme umsortiert.\n"
"Was sollen wir da §0 zurückfunken?\n"
"\n"
"**Robo**: Nein, die Gleichung heißt in diesem Universum natürlich §1,\n"
"weil in der Formel zuerst ein “+” und dann ein “^2” steht.\n"
"Du könntest also §2 benutzen.\n"
"Danach sieht die linke Seite exakt wie die rechte aus, und du bist fertig."
msgstr ""

#. §0: `ring`
#: Game.Levels.Saturn.L02_Ring_add_pow_two
msgid "Es kommt ein 👍 zurück.\n"
"\n"
"  **Robo**: Du hättest allerdings auch einfach §0 sagen können."
msgstr ""

#: Game.Levels.Saturn.L02_Ring_add_pow_two
msgid ""
msgstr ""

#: Game.Levels.Saturn.L03_mul_comm
msgid ""
msgstr ""

#: Game.Levels.Saturn.L03_mul_comm
msgid "Noch ein Funkspruch."
msgstr ""

#. §0: `P`
#. §1: `P`
#. §2: `Fin 2`
#. §3: `ℚ`
#. §4: `Fin 2`
#. §5: $\\{0,1\\}$
#. §6: `X 0`
#. §7: `X 1`
#: Game.Levels.Saturn.L03_mul_comm
msgid "\n"
"**Du**:  Nanu, was ist denn §0 hier für ein Tier?\n"
"\n"
"**Robo**: §1 ist ein “multivariates Polynom”, wobei die Variablen mit §2\n"
"durchnummeriert sind und die Koeffizienten in §3 liegen.\n"
"\n"
"**Du**:  Und was ist §4?\n"
"\n"
"**Robo**:  Die Standardmenge mit zwei Elementen – §5.  Die Variablen heißen also §6 und §7.\n"
"\n"
"**Du**:  Spielt hier aber eigentlich alles keine Rolle, oder?  Der Polynomring ist doch kommutativ!\n"
"\n"
"**Robo**: So ist es.\n"
""
msgstr ""

#: Game.Levels.Saturn.L03_mul_comm
msgid "Wieder ein 👍."
msgstr ""

#: Game.Levels.Saturn.L03_mul_comm
msgid ""
msgstr ""

#: Game.Levels.Saturn.L04_mul_assoc
msgid ""
msgstr ""

#: Game.Levels.Saturn.L04_mul_assoc
msgid "Noch ein Funkspruch."
msgstr ""

#. §0: `mul_assoc`
#. §1: `ring`
#: Game.Levels.Saturn.L04_mul_assoc
msgid "**Robo** Hier könntest du §0 verwenden.  Oder *wieder* §1 …"
msgstr ""

#. §0: `ℕ`
#. §1: `ℕ`
#. §2: `ring`
#: Game.Levels.Saturn.L04_mul_assoc
msgid "Wieder ein 👍.\n"
"\n"
"  **Du**: Aber warte mal, diesmal waren die Koeffizienten doch in §0!\n"
"  Das ist doch gar kein Ring, und auch Polynome mit Koeffizienten in §1 bilden keinen Ring.\n"
"\n"
"  **Robo**: Mag sein.  Aber §2 funktioniert sogar für sogenannte Halbringe.\n"
"\n"
"  **Du**: So so …\n"
"\n"
"  Der anonyme möchte Funker wissen, ob ihr bereit seid für das End Game,\n"
"  oder ob ihr lieber noch ein paar Runden um seinen Planeten kreisen wollt.\n"
"\n"
"  „Bereit” funkt Robo zurück."
msgstr ""

#: Game.Levels.Saturn.L04_mul_assoc
msgid ""
msgstr ""

#: Game.Levels.Saturn.L04_mul_assoc
msgid ""
msgstr ""

#: Game.Levels.Saturn.L04_mul_assoc
msgid ""
msgstr ""

#: Game.Levels.Saturn.L04_mul_assoc
msgid ""
msgstr ""

#: Game.Levels.Saturn.L04_mul_assoc
msgid ""
msgstr ""

#: Game.Levels.Saturn.L05_Ring
msgid ""
msgstr ""

#: Game.Levels.Saturn.L05_Ring
msgid ""
msgstr ""

#: Game.Levels.Saturn.L05_Ring
msgid "“Bestanden” heißt es kurz und knapp vom anonymen Funker.\n"
"\n"
"  **Robo**: Ich glaube, der Antrieb hat sich jetzt genügend regeniert.\n"
"  Nichts wie weg!"
msgstr ""

#: Game.Levels.Saturn
msgid "Saturn"
msgstr ""

#: Game.Levels.Saturn
msgid "Diesen Planeten wolltet ihr eigentlich gar nicht ansteuern.\n"
"Aber ihr wart mit den Gedanken nicht ganz bei der Sache.\n"
"Und man darf in Universen nicht unaufmerksam sein, erst recht nicht, wenn man sich nicht auskennt.\n"
"Nun seid ihr bereits zu nah herangeflogen, die Gravitation ist zu stark, und euer regenerativer Antrieb ist gerade im Regenerationsmodus.\n"
"\n"
"**Du**:  Was ist das denn für eine orange Soße auf diesem Planeten?\n"
"\n"
"**Robo**:  Sieht eher giftig aus.  Oder heiß.\n"
"\n"
"**Du**:  Oder beides.  Ich will da wirklich nicht landen!\n"
"\n"
"**Robo**:  Ja, ja, ich gebe mir ja schon alle Mühe.  Und schau mal, wie viel Müll hier bereits orbitet!\n"
"Das beste, was wir momentan tun können, ist mit dem Strom zu fliegen."
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid ""
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Benedictus**: Hier, schaut mal. Das habe ich für Euch vorbereitet."
msgstr ""

#. §0: `∧`
#: Game.Levels.Spinoza.L01_Have
msgid "**Du**: Also als erstes teile ich wohl mal das Und (§0) auf."
msgstr ""

#. §0: `have`
#. §1: `have g : ¬ B`
#: Game.Levels.Spinoza.L01_Have
msgid "\n"
"**Du**: Und jetzt …\n"
"\n"
"**Benedictus**: … solltest du dir ein passendes Zwischenresultat zurechtlegen.\n"
"\n"
"**Robo**: Ja! Probier mal wieder §0.  Genauer: §1!"
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "\n"
"**Du**: Was? Jetzt hab ich einfach angenommen, dass sei richtig?\n"
"\n"
"**Robo**: Nein, jetzt musst du das natürlich erst noch beweisen, bevor du es dann benutzen kannst."
msgstr ""

#. §0: `apply`
#: Game.Levels.Spinoza.L01_Have
msgid "**Robo**: §0 sollte helfen"
msgstr ""

#. §0: `contradiction`
#: Game.Levels.Spinoza.L01_Have
msgid "**Du**: Und wie war das nochmals wenn zwei Annahmen sich widersprechen?\n"
"\n"
"**Robo**: §0."
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Benedictus**: Das sieht gut aus!"
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid ""
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid "**Benedictus**: Ihr hättet natürlich auch erst das Hauptresultat und dann das\n"
"Zwischenresultat beweisen können. Das könnt Ihr ja mal an dieser Aufgabe probieren, die ist\n"
"ganz ähnlich."
msgstr ""

#. §0: `have`
#. §1: `suffices`
#. §2: `suffices g : ¬B`
#. §3: `g`
#. §4: `g`
#: Game.Levels.Spinoza.L02_Suffices
msgid "\n"
"**Robo**: Ich weiß was er meint! Anstatt §0 kannst du auch §1\n"
"verwenden. Das funktioniert genau gleich, außer, dass dann die beiden Beweisziele vertauscht sind.\n"
"\n"
"**Du**: Also nach §2 muss ich dann zuerst zeigen, wie man mit §3 den Beweis\n"
"abschliesst, bevor ich §4 beweise?\n"
"\n"
"**Robo**: Genau!"
msgstr ""

#. §0: `«{g}»`
#: Game.Levels.Spinoza.L02_Suffices
msgid "**Robo**: Also hier beendest du den Beweis unter der Annahme §0 sei wahr."
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid "**Robo**: Und hier beweist du das Zwischenresultat."
msgstr ""

#. §0: `have`
#. §1: `suffices`
#: Game.Levels.Spinoza.L02_Suffices
msgid "**Benedictus**: Genau so meinte ich das. Ob Ihr nun in Zukunft §0 und\n"
"§1 verwendet, ist reine Geschmacksfrage. Hauptsache, Ihr wisst, wie Ihr\n"
"entfernte Ziele in kleinen Schritte erreicht."
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid ""
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "**Benedictus**: Hier ist noch eine Variante."
msgstr ""

#. §0: `¬`
#. §1: `contradiction`
#. §2: `by_contra h`
#. §3: `contradiction`
#: Game.Levels.Spinoza.L03_ByContra
msgid "\n"
"**Robo**: Ein §0 im Goal heißt häufig, dass du einen Widerspruchsbeweis führen\n"
"möchtest.\n"
"\n"
"**Du**: Und wie mache ich das? Mit §1?\n"
"\n"
"**Robo**: Mit §2 fängst du einen Widerspruchsbeweis an. Und mit §3\n"
"schließt du ihn ab."
msgstr ""

#. §0: `«{h}» : «{A}»`
#. §1: `suffices`
#. §2: `suffices k : B`
#: Game.Levels.Spinoza.L03_ByContra
msgid "\n"
"**Robo**: Jetzt hast du also eine Annahme §0, und damit musst du einen\n"
"Widerspruch herleiten.\n"
"\n"
"Du könntest zum Beispiel jetzt mit §1 sagten, welchen Widerspruch du gern herleiten\n"
"möchtest, etwa §2\n"
""
msgstr ""

#. §0: `«{B}»`
#. §1: `¬«{B}»`
#: Game.Levels.Spinoza.L03_ByContra
msgid "\n"
"**Du**: Ah, und jetzt kann ich einfach sagen dass sich die Annahmen §0 und §1 sich\n"
"widersprechen."
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "\n"
"**Robo**: Und jetzt musst du nur noch das Zwischenresultat herleiten, dass zu diesem\n"
"Widerspruch geführt hat."
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "**Benedictus**: Ich sehe schon, Ihr lernt schnell!"
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid ""
msgstr ""

#. §0: `not_imp_not`
#: Game.Levels.Spinoza.L04_ByContra
msgid "**Benedictus**: Ich habe noch eine schöne Frage zu ungeraden Quadraten für Euch.\n"
"Aber vorher beweist Ihr besser noch diese Äquivalenz hier. Ich glaube, die hat sogar\n"
"bei Euch einen Namen: *Kontrapositionsäquivalenz*, oder so etwas. Auf Leansch nennen wir\n"
"die Äquivalenz einfach §0. Ist doch viel einleuchtender, oder?"
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid ""
msgstr ""

#. §0: $A ⇒ B$
#. §1: $¬B ⇒ ¬A$
#. §2: `not_imp_not`
#: Game.Levels.Spinoza.L04_ByContra
msgid "\n"
"**Du**: Ja, das habe ich tatsächlich schon einmal gesehen.\n"
"\n"
"**Robo**: Ja, klar hast du das schon einmal gesehen. Das benutzen Mathematiker doch ständig.\n"
"Wenn ihnen zu §0 nichts einfällt, zeigen sie stattdessen §1. Ich würde das ja\n"
"statt *Kontraposition* eher *von_hinten_durch_die_Brust_ins_Auge* nennen.\n"
"Aber hier heißt es natürlich §2."
msgstr ""

#. §0: `constructor`
#: Game.Levels.Spinoza.L04_ByContra
msgid "**Robo**: Fang doch mal mit §0 an."
msgstr ""

#. §0: `suffices g : B`
#: Game.Levels.Spinoza.L04_ByContra
msgid "**Robo**: Ich würde wieder mit §0 einen Widerspruch herbeiführen."
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid "**Robo**: Hier würde ich ebenfalls einen Widerspruchsbeweis anfangen."
msgstr ""

#. §0: `suffices g : ¬ A`
#: Game.Levels.Spinoza.L04_ByContra
msgid "**Robo**: §0 sieht nach einer guten Option aus."
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid ""
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid ""
msgstr ""

#. §0: `by_contra`
#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Benedictus**: Gut, hier ist die angekündigte Frage. Versucht mal einen *direkten*\n"
"Beweis, ohne §0."
msgstr ""

#. §0: `even_square`
#. §1: `Odd (n^2) → Odd n`
#. §2: `Even n → Even (n^2)`
#. §3: `→`
#. §4: `revert`
#. §5: `revert «{h}»`
#. §6: `«{h}»`
#: Game.Levels.Spinoza.L05_Contrapose
msgid "\n"
"**Robo**: Ich schlage vor, wir führen das auf das Lemma §0 zurück, das wir auf\n"
"Quantus schon gezeigt hatten. Hier steht ja im Grunde §1. Und unter\n"
"Kontraposition ist das äquivalent zu §2.\n"
"\n"
"**Du**: Richtig. Von hinten durch die Brust … Aber warte, im Moment steht da doch gar kein §3.\n"
"\n"
"**Robo**: Erinner dich an §4. Mit §5 kannst du die Annahme §6 als\n"
"Implikationsannahme ins Beweissziel schieben."
msgstr ""

#. §0: `contrapose`
#: Game.Levels.Spinoza.L05_Contrapose
msgid "\n"
"**Du**: Und jetzt kann ich dieses Kontrapositionslemma anwenden? Wie hieß das noch einmal?\n"
"\n"
"**Robo**: Tatsächlich kannst auch einfach §0 schreiben."
msgstr ""

#. §0: `not_odd_iff_even`
#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Robo**: Vielleicht hilft jetzt §0 weiter?"
msgstr ""

#. §0: `even_square`
#: Game.Levels.Spinoza.L05_Contrapose
msgid "\n"
"**Du**: Das sieht schon ganz gut aus. Jetzt kann ich tatsächlich das alte Lemma\n"
"§0 anwenden!"
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Benedictus**: Hervorragend! Ich glaube, damit seid Ihr jetzt ganz gut gewappnet."
msgstr ""

#: Game.Levels.Spinoza.L06_Summary
msgid ""
msgstr ""

#: Game.Levels.Spinoza.L06_Summary
msgid "**Du**: Aber hätten wir die letzte Aufgabe nicht genauso gut per Widerspruch beweisen können?\n"
"\n"
"**Benedictus**: Klar. Ich dachte nur, ein zweiter Widerspruchsbeweis wäre langweilig.\n"
"Aber Ihr könnt die Aufgabe gern noch einmal probieren.\n"
"Hier, ich gebe Sie Euch mit auf die Reise.\n"
"Aber nun seht zu, dass Ihr weiterkommt!"
msgstr ""

#. §0: `by_contra g`
#: Game.Levels.Spinoza.L06_Summary
msgid "\n"
"Sobald Ihr Euch sicher vom Gravitationsfeld des Asteroiden befreit habt, beugt Ihr\n"
"Euch wieder über die Aufgabe.\n"
"\n"
"**Robo**: Okay, also diesmal fangen wir mit §0 an!"
msgstr ""

#. §0: `Odd (n ^ 2)`
#: Game.Levels.Spinoza.L06_Summary
msgid "**Robo**: Jetzt würde ich einen Widerspruch zu §0 führen."
msgstr ""

#. §0: `suffices d : ¬ Odd (n ^ 2)`
#: Game.Levels.Spinoza.L06_Summary
msgid "**Robo**: Also §0."
msgstr ""

#. §0: `have`
#. §1: `suffices`
#. §2: `by_contra`
#. §3: `contradiction`
#. §4: `contrapose`
#. §5: `revert`
#. §6: `contrapose`
#: Game.Levels.Spinoza.L06_Summary
msgid "**Robo**: Bravo! Hier ein Überblick, was uns Benediktus gezeigt hat.\n"
"\n"
"\n"
"| **Taktik**      | **Zweck**                                              |\n"
"|:----------------|:-------------------------------------------------------|\n"
"| §0          | Zwischenresultat annehmen                              |\n"
"| §1      | Zwischenresultat annehmen                              |\n"
"| §2     | Widerspruchsbeweis anfangen                            |\n"
"| §3 | Widerspruchsbeweis schließen                           |\n"
"| §4    | Kontraposition                                         |\n"
"| §5        | nützlich, um danach §6 anzuwenden            |"
msgstr ""

#: Game.Levels.Spinoza
msgid "Spinoza"
msgstr ""

#: Game.Levels.Spinoza
msgid "**Robo**: Ich glaube, das ist Spinoza, einer der ganz wenigen Asteroiden vom Type QED. Schnell. Wir müssen uns ein bisschen beeilen, sonst verpassen wir ihn.\n"
"\n"
"Eine halbe Stunde später seid ihr gelandet. Sehr einladend wirkt Spinoza nicht. Seine gesamte Oberfläche ist von feinem, rötlichen Sand bedeckt.\n"
"Ein einziger, einsamer Formalosoph, der sich als Benedictus vorstellt, erwartet euch.\n"
"\n"
"**Benedictus**: Schön, dass Ihr gekommen seid! Ich habe schon auf Euch gewartet!\n"
"\n"
"**Du**: Hast du auch ein paar dringende Fragen … ?\n"
"\n"
"**Benedictus**: Ach nein, aus dem Alter bin ich heraus. Aber ich kann mir denken, wie es Euch auf Implis und Quantus ergangen ist. Und glaubt, mir auf den anderen Planeten wird es nicht viel besser. Aber ich kann Euch vielleicht ein bisschen vorbereiten.\n"
"\n"
"**Du**: Können wir nicht einfach hier bleiben und uns ein wenig ausruhen?\n"
"\n"
"Benedictus schüttelt den Kopf.\n"
"\n"
"**Benedictus**: Nein. Spinoza verträgt keine drei Bewohner. Und Ihr müsst bald wieder weiter, sonst wird der Weg zu weit. Wir kommen nur alle 400 Jahre bei den Planeten vorbei."
msgstr ""

#: Game.Levels.Luna.L01_le_rfl
msgid ""
msgstr ""

#. §0: `n ≤ n`
#: Game.Levels.Luna.L01_le_rfl
msgid "Du fühlst dich ein wenig überfahren, aber versuchst trotzdem, ein Gespräch zu beginnen.\n"
"\n"
"**Du**: Ist gut, wir bemühen uns, nichts durcheinander zu bringen. Ist es sehr schwer,\n"
"hier Ordnung zu halten?\n"
"\n"
"**Lina**: Man muss zum Beispiel wissen, dass §0 ist."
msgstr ""

#. §0: `rfl`
#: Game.Levels.Luna.L01_le_rfl
msgid "**Robo**: §0?"
msgstr ""

#: Game.Levels.Luna.L01_le_rfl
msgid "**Lina**:  Zugegeben, das war ein triviales Beispiel."
msgstr ""

#: Game.Levels.Luna.L01_le_rfl
msgid ""
msgstr ""

#: Game.Levels.Luna.L02_Omega
msgid ""
msgstr ""

#. §0: `0 < n`
#. §1: `n < 0`
#. §2: `n ≠ 0`
#: Game.Levels.Luna.L02_Omega
msgid "**Lina**: Außerdem muss man zum Beispiel wissen, dass §0 oder §1 für ganze Zahlen nichts anderes\n"
"bedeutet als §2."
msgstr ""

#. §0: `omega`
#: Game.Levels.Luna.L02_Omega
msgid "**Ritha** *(flüsternd)*: Probiert mal §0!"
msgstr ""

#. §0: `omega`
#. §1: `omega`
#. §2: `omega`
#: Game.Levels.Luna.L02_Omega
msgid "Lina rollt die Augen.\n"
"\n"
"**Lina**: Ritha ist ein großer Fan von §0.  Dabei ist §1 ziemlich impotent.\n"
"Sobald man die ganzen Zahlen verlässt, kann §2 gar nichts mehr.\n"
"\n"
"**Ritha**:  Selber impotent!\n"
"\n"
"Ritha macht eine unanständige Grimasse."
msgstr ""

#: Game.Levels.Luna.L03_Linarith__lt_trichotomy
msgid ""
msgstr ""

#: Game.Levels.Luna.L03_Linarith__lt_trichotomy
msgid "**Lina**: Probierts doch mal hiermit!"
msgstr ""

#. §0: `obtain`
#. §1: `x < y`
#. §2: `x = y`
#. §3: `x > y`
#. §4: ```
#. obtain h | h | h := lt_trichotomy x y
#. ```
#: Game.Levels.Luna.L03_Linarith__lt_trichotomy
msgid "Wird typischerweise mit §0 verwendet, um in einem Beweis die drei Fälle §1, §2 und §3 zu unterscheiden:\n"
"\n"
"§4"
msgstr ""

#. §0: `by_cases h_leq : «{a}» ≤ «{b}»`
#. §1: `by_cases h_lt : «{a}» < «{b}»`
#: Game.Levels.Luna.L03_Linarith__lt_trichotomy
msgid "\n"
"**Du**:  Fallunterscheidung ??\n"
"\n"
"**Robo**:  Ja, könntest du versuchen. Zum Beispiel erst §0 und dann §1.\n"
""
msgstr ""

#. §0: `linarith`
#: Game.Levels.Luna.L03_Linarith__lt_trichotomy
msgid "\n"
"**Du**:  Und jetzt??\n"
"\n"
"**Lina** (*triumphal*): §0!\n"
""
msgstr ""

#. §0: `apply lt_trichotomy`
#: Game.Levels.Luna.L03_Linarith__lt_trichotomy
msgid "**Lina**:  Ihr hättet übrigens auch einfach §0 sagen können."
msgstr ""

#: Game.Levels.Luna.L04_Omega2
msgid ""
msgstr ""

#: Game.Levels.Luna.L04_Omega2
msgid "**Lina**:  Hier habe ich noch etwas."
msgstr ""

#: Game.Levels.Luna.L04_Omega2
msgid "Ritha scheint euch mit ihren Augen irgendein Zeichen geben zu wollen."
msgstr ""

#: Game.Levels.Luna.L04_Omega2
msgid "**Lina**:  Ja, okay, mein Fehler."
msgstr ""

#: Game.Levels.Luna.L05_Linarith2
msgid ""
msgstr ""

#: Game.Levels.Luna.L05_Linarith2
msgid "**Lina:** Nochmal dieselbe Frage, aber jetzt in ℝ!"
msgstr ""

#. §0: `omega`
#. §1: `linarith`
#. §2: `linarith`
#. §3: `intro`
#: Game.Levels.Luna.L05_Linarith2
msgid "\n"
"**Du** (*zu Robo*):  Hier komme ich weder mit §0 noch mit §1 weiter.\n"
"\n"
"**Robo**:  Ich glaube, du musst §2 nur etwas auf die Sprünge helfen.\n"
"Lös am besten erst einmal ganz kanonisch die beiden Implikationen mit §3 auf.\n"
""
msgstr ""

#. §0: `«{hx}»`
#. §1: `push_neg at «{hx}»`
#: Game.Levels.Luna.L05_Linarith2
msgid "\n"
"**Robo**:  Und jetzt machst du die Annahme §0 ein bisschen lesbarer.\n"
"Probier vielleicht einmal §1?\n"
""
msgstr ""

#. §0: `«{hx}» : m ≤ x → n < x`
#. §1: `→`
#. §2: `rw`
#. §3: `imp_iff_or_not`
#: Game.Levels.Luna.L05_Linarith2
msgid "\n"
"**Robo**:  Mmm … §0 sieht immer noch suboptimal aus.\n"
"Aber wir wissen ja, was §1 bedeutet – probier mal ein §2 mit §3!\n"
""
msgstr ""

#. §0: `«{hx}»`
#. §1: `obtain`
#: Game.Levels.Luna.L05_Linarith2
msgid "\n"
"**Robo**:  Okay.  Das ist besser. Und jetzt kannst du §0 noch mit §1 in die\n"
"beiden Bestandteile aufspalten.\n"
""
msgstr ""

#: Game.Levels.Luna.L05_Linarith2
msgid ""
msgstr ""

#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid ""
msgstr ""

#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid "**Ritha**:  Kann ich auch mal?  Hier."
msgstr ""

#. §0: `Icc`
#. §1: `Icc a b`
#. §2: $[a, b]$
#. §3: $\\{a, a + 1, \\dots, b\\}$
#. §4: $$
#. [a, b] ∪ \\{ b + 1 \\} = [a, b + 1]
#. $$
#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid "\n"
"**Du**:  Was ist denn §0?\n"
"\n"
"**Ritha**:  Na das **I**ntervall, das links **c**losed und rechts **c**losed, also abgeschlossen ist.\n"
"\n"
"**Robo**:  Du würdest §1 vermutlich als §2 schreiben,\n"
"oder als §3, weil wir ja hier wieder in den natürlichen Zahlen sind.\n"
"Zu zeigen ist also:\n"
"\n"
"§4\n"
""
msgstr ""

#. §0: `ext`
#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid "**Robo:** Gleichheit von Mengen ruft nach §0."
msgstr ""

#. §0: `simp`
#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid "\n"
"**Robo:**  Schieß mal gleich noch ein §0 hinterher.\n"
""
msgstr ""

#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid "Ritha macht wieder irgendwelche Zeichen."
msgstr ""

#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid ""
msgstr ""

#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid ""
msgstr ""

#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid ""
msgstr ""

#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid ""
msgstr ""

#: Game.Levels.Luna.L06_Icc__Icc_insert_succ_right
msgid ""
msgstr ""

#: Game.Levels.Luna.L07_Linarith2
msgid ""
msgstr ""

#. §0: `omega`
#: Game.Levels.Luna.L07_Linarith2
msgid "**Lina**:  Genug von §0, jetzt bin ich wieder an der Reihe."
msgstr ""

#. §0: $$
#. \\begin{aligned}
#. \\tfrac{35}{11}\\cdot y &\\le -\\tfrac{22}{21}\\cdot x + \\tfrac{35}{2}  \\
#. \\tfrac{8}{9} \\cdot y &\\le x + \\tfrac{17}{8}
#. \\end{aligned}
#. $$
#. §1: $$
#. y ≤ \\tfrac{34}{7}
#. $$
#: Game.Levels.Luna.L07_Linarith2
msgid "**Du**:  Das muss ich mir erst noch einmal untereinander schreiben.  Gegeben ist:\n"
"\n"
"§0\n"
"\n"
"Und wir sollen zeigen:\n"
"§1\n"
"\n"
"Robo??\n"
"\n"
"Lina grinst.\n"
""
msgstr ""

#: Game.Levels.Luna.L07_Linarith2
msgid "**Du**: Nicht schlecht!"
msgstr ""

#: Game.Levels.Luna.L08_Omega3
msgid ""
msgstr ""

#: Game.Levels.Luna.L08_Omega3
msgid "**Ritha**:  Jetzt ich wieder!"
msgstr ""

#. §0: `simp at «{h'}»`
#: Game.Levels.Luna.L08_Omega3
msgid "**Ritha**:  Probier unbedingt mal §0."
msgstr ""

#: Game.Levels.Luna.L08_Omega3
msgid ""
msgstr ""

#: Game.Levels.Luna.L09_lt_trichotomy2
msgid ""
msgstr ""

#: Game.Levels.Luna.L09_lt_trichotomy2
msgid "**Lina**:  Jetzt ich wieder."
msgstr ""

#. §0: `b`
#. §1: `use …`
#. §2: `lt_trichotomy`
#. §3: ```
#. obtain h | h | h := lt_trichotomy a c
#. ```
#: Game.Levels.Luna.L09_lt_trichotomy2
msgid "**Du**:\n"
"Nun, es ist schon ziemlich klar, welches §0 man hier verwenden könnte.\n"
"\n"
"**Robo**: Wenn dir das so klar ist, dann fang doch schon einmal mit §1 an.\n"
"Und danach wirst du §2 gut gebrauchen können.  Zum Beispiel so:\n"
"§3\n"
""
msgstr ""

#: Game.Levels.Luna.L09_lt_trichotomy2
msgid "**Lina**: Habt ihr gut gemacht!  Schade, dass ihr schon weiterfliegen müsst.\n"
"  Aber wenn ihr noch länger bleibt, bringt ihr unseren Tagesrhythmus völlig durcheinander."
msgstr ""

#: Game.Levels.Luna.L10_Icc_subset_Icc_iff
msgid ""
msgstr ""

#. §0: `omega`
#: Game.Levels.Luna.L10_Icc_subset_Icc_iff
msgid "**Ritha** (*zu Lina*):  Bitte, lass mich doch auch noch eine Frage stellen …\n"
"\n"
"**Lina**:  Okay, eine einzige …  Aber nicht wieder zu §0!\n"
"\n"
"Ritha macht große Augen und sieht Lina flehend an.\n"
"\n"
"**Lina**:  Wenns *unbedingt* sein muss.  Aber mach schnell! Wir haben jetzt wirklich keine Zeit mehr!"
msgstr ""

#: Game.Levels.Luna.L10_Icc_subset_Icc_iff
msgid ""
msgstr ""

#. §0: `subset_iff`
#. §1: `simp`
#: Game.Levels.Luna.L10_Icc_subset_Icc_iff
msgid "\n"
"**Robo**: Vielleicht hilft hier mal wieder §0.  Und wenn gar nichts geht, probier mal §1.\n"
""
msgstr ""

#. §0: `«{h}»`
#. §1: `«{h}»`
#. §2: `a₁ ≤ b₁`
#. §3: `a₁ ≤ a₁`
#. §4: `a₁ ≤ a₁`
#. §5: `have`
#: Game.Levels.Luna.L10_Icc_subset_Icc_iff
msgid "\n"
"**Robo**:  Die Annahme §0 musst du sicherlich irgendwie ausnutzen.\n"
"Du könnest §1 zum Beispiel auf die Ungleichung §2 oder auf §3 anwenden!\n"
"(Die Ungleichung §4 formulierst du am besten mit §5 aus.)\n"
""
msgstr ""

#: Game.Levels.Luna.L10_Icc_subset_Icc_iff
msgid ""
msgstr ""

#: Game.Levels.Luna
msgid "Luna"
msgstr ""

#: Game.Levels.Luna
msgid "Robo hat einen kleinen Mond entdeckt, auf den ihr jetzt zusteuert.\n"
"Er hat eine ganz glatte Oberfläche, aber an einer Stelle hat die Oberfläche eine kleine\n"
"Öffnung, von der eine Treppe ins Innnere führt. Ihr landet und steigt neugierig hinab.\n"
"\n"
"Unten angekommen findest du dich in der aufgeräumtesten Wohnung wieder, die du je gesehen hast.\n"
"Ein kleines Mädchen begrüßt Euch.\n"
"\n"
"**Lina**: Ich bin Lina, die einzige Bewohnerin von Luna.\n"
"\n"
"Dann sieht sie Robo.\n"
"\n"
"**Lina**: Naja, eigentlich sind wir hier auch zu zweit …\n"
"\n"
"Sie dreht sich um und ruft etwas, da kommt ein Smart-Elf angefahren.\n"
"\n"
"**Lina**: Das ist Ritha!\n"
"\n"
"Robo findet sie offensichtlich süß.\n"
"\n"
"**Lina**: Aber jetzt steht mal hier nicht so unordentlich herum, bitte! Schuhe und Helme dort\n"
"und dort verstauen, und dann stellt Euch auf die markierten Besucher-Standpunkte. Sonst komme\n"
"ich hier noch ganz durcheinander."
msgstr ""

#: Game.Levels.Babylon.L01_Sum_Simp_Card
msgid ""
msgstr ""

#: Game.Levels.Babylon.L01_Sum_Simp_Card
msgid "**Babylonier**: Jeder Turm hat eine Inschrift. Da könnt ihr noch einmal genau nachlesen,\n"
"warum er steht. Hier zum Beispiel."
msgstr ""

#. §0: $( \\sum_{i\\in I} 1)$
#. §1: $I$
#. §2: $I$
#. §3: `simp`
#: Game.Levels.Babylon.L01_Sum_Simp_Card
msgid "\n"
"**Du**: Oh das ist ganz schön viel neues … mal sehen …\n"
"\n"
"Das sieht aus wie §0 ist gleich …\n"
"\n"
"**Robo**: … der Anzahl der Element in §1, also der Kardinalität von §2.\n"
"\n"
"**Babylonier**: Und, könnt ihr das beweisen?\n"
"\n"
"**Robo** *(zu Dir)*: Ich würde als erstes §3 versuchen.\n"
"Das ist wirklich eine starke Taktik, die viele Terme vereinfacht."
msgstr ""

#: Game.Levels.Babylon.L01_Sum_Simp_Card
msgid "**Babylonier**: Seht gut, das passt!"
msgstr ""

#: Game.Levels.Babylon.L02_Card2
msgid ""
msgstr ""

#: Game.Levels.Babylon.L02_Card2
msgid "Ihr schaut euch zusammen den nächsten Turm an."
msgstr ""

#. §0: `simp`
#: Game.Levels.Babylon.L02_Card2
msgid "**Du**:  Wieder §0?"
msgstr ""

#: Game.Levels.Babylon.L03_sum_congr
msgid ""
msgstr ""

#: Game.Levels.Babylon.L03_sum_congr
msgid "Als nächstes kommt ihr an einen leeren Bauplatz, auf dem sich schon lange nichts getan zu haben scheint.\n"
"Auf dem Bauschild steht:"
msgstr ""

#. §0: $I \\subseteq \\{-1,0,1\\}$
#. §1: `trans ∑ i ∈ I, 0`
#. §2: `\\sum`
#: Game.Levels.Babylon.L03_sum_congr
msgid "\n"
"**Du**: Die Annahme sieht wie eine verklausulierte Variante von §0 aus.\n"
"Das kann ja so oder so keine große Summe werden.\n"
"\n"
"**Robo**: Nein.  Aber wir brauchen wohl einen Zwischenschritt, um das angegebene Ergebnis zu erhalten.\n"
"Ich schlage vor: §1.  Das Summezeichen schreibst du als §2.\n"
""
msgstr ""

#. §0: `apply sum_congr`
#: Game.Levels.Babylon.L03_sum_congr
msgid "\n"
"**Robo**:  Genau. Jetzt kannst du nämlich §0 schreiben\n"
"– zwei Summen sind insbesondere dann gleich, wenn über dieselbe Indexmenge summiert wird und\n"
"auch die Ausdrücke, über die summiert wird, übereinstimmen.\n"
""
msgstr ""

#: Game.Levels.Babylon.L03_sum_congr
msgid ""
msgstr ""

#: Game.Levels.Babylon.L04_sum_subset
msgid ""
msgstr ""

#: Game.Levels.Babylon.L04_sum_subset
msgid "Ihr wandert weiter von Turm zu Turm.  Schließlich bleibst du an einem Turm stehen,\n"
"  der dir seltsam vorkommt.  Nachdem ihr einmal um ihn herumgelaufen seid, weißt du auch, warum:\n"
"  Es fehlt ein Eingang.  Immerhin findet ihr eine Bodenplatte mit folgender Inschrift."
msgstr ""

#. §0: $$
#. \\sum_{i=0}^{n} (i^3 - 3 i^2 + 2 i)  = \\sum_{i=3}^{n} (i^3 - 3 i^2 + 2i)
#. $$
#. §1: $0$
#. §2: $i$
#. §3: `sum_subset`
#. §4: `I₁ ⊆ I₂`
#. §5: `I₁`
#. §6: `I₂`
#. §7: `I₁`
#. §8: `I₂`
#: Game.Levels.Babylon.L04_sum_subset
msgid "**Du**: Mal langsam.  Zu zeigen ist:\n"
"\n"
"§0\n"
"\n"
"Vermutlich ist der Ausdruck in der Summe einfach §1 für die ersten drei Werte von §2 … ja, genau.\n"
"Und wie formulier ich das jetzt?\n"
"\n"
"**Robo**: Du könntest §3 verwenden: ist §4,\n"
"und verschwindet der Ausdruck in der Summe auf allen Element von §5, die nicht in §6 liegen,\n"
"so ist die Summe über §7 gleich der Summe über §8.\n"
""
msgstr ""

#. §0: `apply sum_subset`
#: Game.Levels.Babylon.L04_sum_subset
msgid "**Robo**:  Gut.  Und jetzt §0."
msgstr ""

#. §0: `Icc_subset_Icc_iff`
#: Game.Levels.Babylon.L04_sum_subset
msgid "\n"
"**Robo**:  Hier kannst du bestimmt §0 gut gebrauchen.\n"
""
msgstr ""

#: Game.Levels.Babylon.L04_sum_subset
msgid "\n"
"**Robo**: Super!  Jetzt musst du nur noch zeigen, was du vorhin gesagt hattest:\n"
"Der Ausdruck unter der Summe ist für die ersten drei Indizes Null."
msgstr ""

#. §0: ```
#. i ^ 3 - 3 * i ^ 2 + 2 * i = 0
#. ```
#: Game.Levels.Babylon.L04_sum_subset
msgid "\n"
"**Robo**: Ich schlage vor, du führst erst einmal alle Annahmen ein, bis da nur noch\n"
"§0\n"
"als Beweisziel steht.\n"
""
msgstr ""

#. §0: $«{i}»=0$
#. §1: $«{i}»=1$
#. §2: $«{i}»=2$
#. §3: `have`
#: Game.Levels.Babylon.L04_sum_subset
msgid "**Robo**:  Aus den Annahmen muss ja irgendwie folgen §0 oder §1 oder §2.\n"
"Vielleicht formulierst du das mit §3 explizit aus."
msgstr ""

#. §0: `simp`
#. §1: `omega`
#: Game.Levels.Babylon.L04_sum_subset
msgid "\n"
"**Robo**:  Irgendeine Kombination von §0 und §1 wird das schon lösen.\n"
"Hat doch auf Luna auch geklappt.\n"
""
msgstr ""

#. §0: `obtain h | h | h  := «{h}»`
#: Game.Levels.Babylon.L04_sum_subset
msgid "\n"
"**Robo**:  Die Annahme «{h}» kannst du ja jetzt mit §0 in die drei Fälle aufteilen.\n"
""
msgstr ""

#: Game.Levels.Babylon.L04_sum_subset
msgid ""
msgstr ""

#: Game.Levels.Babylon.L05_sum_subset2
msgid ""
msgstr ""

#: Game.Levels.Babylon.L05_sum_subset2
msgid ""
msgstr ""

#. §0: $$
#. \\sum_{i \\in I} \\left( (-1)^i + 1 \\right)
#. $$
#. §1: $I$
#. §2: $i$
#. §3: $i$
#. §4: $2$
#. §5: `trans`
#. §6: ```
#. ∑ i ∈ { i ∈ I | Even i}, ((-1)^i + 1)
#. ```
#. §7: ```
#. ∑ i ∈ { i ∈ I | Even i}, 2
#. ```
#: Game.Levels.Babylon.L05_sum_subset2
msgid "\n"
"**Du**:  Hier ist jetzt zu zeigen, dass\n"
"§0\n"
"dasselbe ist wie zweimal die Anzahl der geraden Zahlen in §1.  Richtig?\n"
"\n"
"**Robo**:  Richtig.\n"
"\n"
"**Du**:  Und das ist so, weil … der Ausdruck in der Summe für ungerade §2 verschwindet,\n"
"und für gerade §3 gleich §4 ist. Mmmm …\n"
"\n"
"**Robo**:  Mach doch wieder mit §5 ein paar Zwischenschritte.  Zurerst willst du die Summe auf die Menge\n"
"der geraden Indizes einschränken, also auf:\n"
"§6\n"
"Und danach willst du vermutlich\n"
"§7\n"
"als Zwischenschritt verwenden.\n"
""
msgstr ""

#. §0: `Even.neg_pow`
#. §1: `Odd.neg_pow`
#: Game.Levels.Babylon.L05_sum_subset2
msgid "\n"
"**Robo**:  Dazu hatten wir doch schon mal etwas gesehen, zum Beispiel §0 und §1.\n"
""
msgstr ""

#. §0: `sum_congr`
#: Game.Levels.Babylon.L05_sum_subset2
msgid "\n"
"**Robo**: Das sieht gut aus. Jetzt bist du so weit, dass du wieter §0 verwenden kannst.\n"
""
msgstr ""

#. §0: `simp`
#: Game.Levels.Babylon.L05_sum_subset2
msgid "\n"
"**Robo**: Probier mal wieder §0.\n"
""
msgstr ""

#: Game.Levels.Babylon.L05_sum_subset2
msgid "**Babylonier**:  Das habt ihr gut gemacht."
msgstr ""

#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid ""
msgstr ""

#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid "**Babylonier**: Kommt, ich zeig euch mal einen unserer schönsten Türme!\n"
"\n"
"Der Weg führt steil bergan.  Der Turm, der euch oben auf dem Berg erwartet, ist tatsächlich sehr imposant.\n"
"\n"
"**Robo**: Das muss der bekannte *Gaußsche Turm von Babylon* sein!\n"
"Über den hab ich schon einmal etwas gelesen.\n"
"\n"
"**Babylonier**: Richtig. Gauß war ein Babylonier!"
msgstr ""

#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid ""
msgstr ""

#. §0: $$
#. \\sum_{i = 0}^n i = \\tfrac{1}{2} \\cdot n \\cdot (n + 1)
#. $$
#. §1: `n`
#. §2: `induction n with d hd`
#. §3: `with …`
#. §4: `d`
#. §5: `hd`
#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid "**Du**: Diese Summe habe ich auch schon einmal gesehen.\n"
"§0\n"
"\n"
"Gabs da nicht diese Geschichte mit dem kleinem Gauß, der da ein ganz einfaches Argument für hatte?\n"
"\n"
"**Robo**: Mit Geschichte kenn ich mich nicht aus.  Ich würde einfach eine Induktion über §1 machen.\n"
"Das wäre auf Leansch: §2!\n"
"\n"
"**Du**:  Warum §3?\n"
"\n"
"**Robo**:  Der Zusatz ist natürlich optional.\n"
"Du kannst damit Namen für Induktionsvariable (§4) und -hypothese (§5) vorgeben."
msgstr ""

#. §0: `simp`
#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid "**Du**: Zuerst der Induktionsanfang …\n"
"\n"
"**Robo**: Diesen kannst du oft mit §0 abkürzen!"
msgstr ""

#. §0: $[0, «{d}»+1]$
#. §1: $[0,«{d}»]$
#. §2: $«{d}»+1$
#. §3: `insert_Icc_eq_Icc_add_one_right`
#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid "**Robo**: Jetzt willst du das Interval §0, über das summiert wird, aufspalten in §1 und §2.\n"
"Dazu könntest du das Lemma §3 verwenden, das wir schon gesehen hatten.\n"
""
msgstr ""

#. §0: `sum_insert`
#. §1: $[0,«{d}»]$
#. §2: $«{d}»+1$
#. §3: `rw [sum_insert]`
#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid "**Robo**:  Genau!  Und jetzt spaltet dir §0 die Summe genau so auf, wie du das haben möchtest:\n"
"also eine Summe über §1 und dann noch einen zusätzlichen Summanden für §2.\n"
"Probiers mal: §3\n"
""
msgstr ""

#. §0: `rw`
#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid "**Du**: Und wie wende ich jetzt die Induktionshypothese an?\n"
"\n"
"**Robo**: Mit §0, wie jede andere Annahme auch."
msgstr ""

#. §0: `simp`
#. §1: `ring`
#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid "\n"
"**Du**: Der Rest sollte jetzt einfach nur Rechnerei sein.\n"
"\n"
"**Robo**:  Stimmt.  Irgendeine Kombination von §0 und §1 sollte das schaffen.\n"
""
msgstr ""

#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid ""
msgstr ""

#: Game.Levels.Babylon.L06_Induction_sum_insert__arithmetic_sum
msgid ""
msgstr ""

#: Game.Levels.Babylon.L07_Induction2_sum_insert2
msgid ""
msgstr ""

#: Game.Levels.Babylon.L07_Induction2_sum_insert2
msgid "Direkt neben dem Gaußschen Turm ist wieder ein leerer Bauplatz.  Diesmal steht folgendes auf dem Schild:"
msgstr ""

#. §0: $\\sum_{i=-n}^«{n}» i = 0$
#. §1: `insert_Icc_eq_Icc_add_one_right`
#. §2: `insert_Icc_eq_Icc_sub_one_left`
#: Game.Levels.Babylon.L07_Induction2_sum_insert2
msgid "\n"
"**Du**:  §0 – ja, das sieht richtig aus.\n"
"\n"
"**Robo**:  Sollte auch ganz genau so beweisbar sein, wie die Gaußsche Summe eben …\n"
"außer dass du vermutlich nach §1 auch noch\n"
"§2 brauchen wirst.\n"
""
msgstr ""

#. §0: `rw [sum_insert]`
#: Game.Levels.Babylon.L07_Induction2_sum_insert2
msgid "\n"
"**Robo**:  Genau, und jetzt wieder §0.\n"
""
msgstr ""

#. §0: `-1 + -«{d}»`
#. §1: `-«{d}» - 1`
#. §2: `have`
#. §3: `ℤ`
#. §4: ```
#. have : -1 + (-d : ℤ)  = -d - 1
#. ```
#: Game.Levels.Babylon.L07_Induction2_sum_insert2
msgid "\n"
"**Robo**: Ich fürchte, als nächstes musst du §0 als §1 umschreiben.\n"
"Vielleicht ist es am einfachsten, wenn du diese Gleichung mit §2 ausformulierst.\n"
"Du musst nur irgendwie klarmachen, dass das eine Gleichung in §3 sein soll,\n"
"beispielsweise so:\n"
"§4\n"
""
msgstr ""

#: Game.Levels.Babylon.L07_Induction2_sum_insert2
msgid ""
msgstr ""

#: Game.Levels.Babylon.L08_Induction3_sub_insert3
msgid ""
msgstr ""

#: Game.Levels.Babylon.L08_Induction3_sub_insert3
msgid "Aus reiner Neugierde schaust du dir noch einen Nachbarsturm näher an."
msgstr ""

#. §0: $$
#. \\sum_{i = 0}^n (2i + 1) = n^2
#. $$
#: Game.Levels.Babylon.L08_Induction3_sub_insert3
msgid "\n"
"**Du**:  Hier also eine Summe nur über ungeraden Zahlen.\n"
"§0\n"
"\n"
"**Robo**: Das funktioniert doch genau gleich wie zuvor.\n"
""
msgstr ""

#: Game.Levels.Babylon.L08_Induction3_sub_insert3
msgid "**Babylonier**:  Und?  Gefällt es euch hier?\n"
"\n"
"  **Robo**:  Ja, sehr.  Das ist wirklich alles beeindruckend, was ihr hier aufgebaut habt.\n"
"  Aber wir wollen euch nicht länger aufhalten.\n"
"\n"
"  **Du**:  Ich denke auch, wir sollten langsam wieder aufbrechen.\n"
"\n"
"  Ihr verabschiedet euch und macht euch auf den Weg zurück zum Raumschiff."
msgstr ""

#: Game.Levels.Babylon.L09_Boss
msgid ""
msgstr ""

#: Game.Levels.Babylon.L09_Boss
msgid "Ihr seid noch nicht weit gegangen, da kommt hinter einem Turm plötzlich ein besonders großer Babylonier hervor,\n"
"stellt sich euch in den Weg, schaut euch finster an und fordert in tiefer Stimme einen Beweis der\n"
"folgenden Gleichung."
msgstr ""

#: Game.Levels.Babylon.L09_Boss
msgid "**Du**: Naja. Das wird schon klappen … "
msgstr ""

#. §0: `arithmetic_sum`
#: Game.Levels.Babylon.L09_Boss
msgid "\n"
"**Robo**:  Denk daran, dass wir schon §0 bewiesen hatten.\n"
""
msgstr ""

#: Game.Levels.Babylon.L09_Boss
msgid "Der Babylonier denkt ganz lange nach, und ihr bekommt das Gefühl, dass er gar nie\n"
"aggressiv war, sondern nur eine sehr tiefe Stimme hat.\n"
"\n"
"Mit einem kleinen Erdbeben setzt er sich hin und winkt euch dankend zu."
msgstr ""

#: Game.Levels.Babylon
msgid "Babylon"
msgstr ""

#: Game.Levels.Babylon
msgid "Ihr erreicht einen Planet, auf dem unzählige Steinplatten zu bizzar hohen Türme\n"
"gestapelt sind. Die ganze Landschaft wirkt wie ein grosses Puzzle, in dem jede Platte\n"
"feinsäuberlich auf den darunterliegenden Platten aufbaut. Einige Türme sind so hoch, dass man ihre Spitze gar nicht erkennen kann. Bald trefft ihr auch den ersten Bewohner dieses Planeten an.\n"
"\n"
"**Babylonier**: Willkommen auf *Babylon*!\n"
"\n"
"**Du**: Oh …\n"
"\n"
"Dich beschleicht ein ungutes Gefühl.\n"
"\n"
"**Du**: Seid ihr euch sicher, dass diese Türme stabil sind?\n"
"\n"
"**Babylonier**: 100 Pro!\n"
"\n"
"**Du**: Wie baut ihr denn diese Meisterwerke?\n"
"\n"
"**Babylonier**: Ganz einfach! Ein Stein nach dem anderen."
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid ""
msgstr ""

#. §0: `f`
#. §1: `A`
#. §2: `A`
#. §3: `A`
#. §4: `f`
#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Cantor**: … Wir betrachten also eine Abbildung §0 von §1 in die Potenzmenge von §2,\n"
"und nun die Menge alle jener Elemente aus §3, die nicht in ihrem Bild unter §4 liegen …\n"
"\n"
"Oh!  Ein Publikum. Nein, *zwei* Publikums!  Hört und seht, seht und staunt.\n"
"\n"
"Er zieht aus seinem Zylinder einen Zettel, faltet ihn zu einer Schwalbe,\n"
"und lässt ihn zu euch herunterfliegen.\n"
"\n"
"**Cantor**:  Wenn ich schon zwei Publikums habe, könnten die ja auch ein bisschen mitmachen, nicht wahr?"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid ""
msgstr ""

#. §0: `Set A`
#. §1: `A`
#. §2: `A`
#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Du**:  Ist also §0 die Potenzmenge von §1?\n"
"\n"
"**Robo**: Ja, sozusagen.  Es ist die Menge, oder genauer der Typ, aller Teilmengen von §2.\n"
"\n"
"**Du**:  Und ich soll zeigen, dass … aha.  Vermutlich ein Widerspruchsbeweis, oder?\n"
"\n"
"**Robo**:  Vermutlich.\n"
""
msgstr ""

#. §0: `«{h}»`
#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Cantor**:  Ja, ja, ja!  Und jetzt hübsch §0 zerlegen …"
msgstr ""

#. §0: `obtain`
#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Robo:  … mit §0, wie immer."
msgstr ""

#. §0: `«{a}» ∈ «{f}» «{a}»`
#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Du**: Jetzt vermutlich eine Fallunterscheidung zu §0?"
msgstr ""

#. §0: `by_cases h₁ : «{a}» ∈ «{f}» «{a}»`
#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Robo**: Das wäre §0."
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "Cantor reibt sich die Hände.\n"
"\n"
"**Cantor**:  Das sieht gut aus!\n"
""
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "Cantor klatsch in die Hände und freut sich.\n"
"Wie von Zauberhand fliegt der Zettel zu ihm zurück."
msgstr ""

#: Game.Levels.Cantor.L02_CantorPowerset
msgid ""
msgstr ""

#: Game.Levels.Cantor.L02_CantorPowerset
msgid "**Cantor**:  Passt auf, die Überlegung geht eigentlich noch weiter!\n"
"\n"
"Er greift in seinen Zylinder, und holt alle möglichen Dinge heraus.\n"
"Eine alte Zahnbürste, ein Kartenspiel, ein weißes Kaninchen …\n"
"Schließlich kommt ein zerknüllter Zettel zum Vorschein.\n"
"\n"
"**Cantor**: Hier sind ja meine Notizen!  Tada!  Mein berühmtes Diagonalargument!\n"
"\n"
"Er faltet den Zettel auf, reißt vorsichtig die oberste Zeile ab,\n"
"und lässt sie zu euch hinuntersegeln.\n"
"Dann beugt er sich neugierig über den Bühnenrand, um zu sehen, was ihr macht."
msgstr ""

#. §0: `push_neg`
#. §1: `intro f`
#: Game.Levels.Cantor.L02_CantorPowerset
msgid "**Du**: Das habe ich schon einmal gesehen!\n"
"Kurz:  „Die Potenzmenge ist stets mächtiger als die Menge selbst.“\n"
"War auch ein Widerspruchsbeweis, meine ich.\n"
"\n"
"**Robo:** Ja, aber ich würde mit §0 und §1 anfangen."
msgstr ""

#. §0: `f`
#: Game.Levels.Cantor.L02_CantorPowerset
msgid "**Cantor**:  Na, was meint ihr?  Gibt es vielleicht irgendeine Menge,\n"
"die nicht von §0 getroffen wird?"
msgstr ""

#. §0: `let s := { a | a ∉ «{f}» a }`
#: Game.Levels.Cantor.L02_CantorPowerset
msgid "**Robo**:  Probier mal die Menge von gerade!\n"
"Du könntest sie erst einmal mit §0 einführen."
msgstr ""

#. §0: `specialize «{hf}» «{s}»`
#. §1: `simp`
#. §2: `simp [«{s}»]`
#. §3: `simp`
#: Game.Levels.Cantor.L02_CantorPowerset
msgid "**Robo**:  Super!\n"
"Jetzt kannst du z.B. einfach mit §0 weitermachen.\n"
"Und wenn du später §1 anwendest,\n"
"kannst du mit §2 dafür sorgen, dass §3 durch deine Definition hindurchsieht.\n"
""
msgstr ""

#: Game.Levels.Cantor.L02_CantorPowerset
msgid "Cantor hüpft von einem Bein auf das andere."
msgstr ""

#: Game.Levels.Cantor.L02_CantorPowerset
msgid "**Cantor**:  Ja!\n"
"\n"
"**Du**:  Robo, könnten wir jetzt nicht das Resultat von eben verwenden?\n"
"\n"
"**Robo**:  Sorry, ging alles so schnell!  Habe ich wohl vergessen, abzuspeichern."
msgstr ""

#: Game.Levels.Cantor.L03_IsFixedPt_abs
msgid ""
msgstr ""

#: Game.Levels.Cantor.L03_IsFixedPt_abs
msgid "**Du**: Jetzt habe ich aber noch nicht erkannt, was daran „diagonal“ ist.\n"
"\n"
"**Cantor**: Nein?  Na dann pass auf!  Wir machen das jetzt noch einmal  l a n g s a m.\n"
"\n"
"Er wühlt wieder in seinem Zylinder.  Ein Kompass.  Eine Violine. Eine Dose Schnupftabak.\n"
"\n"
"**Cantor**:  Ach nein, wir machen das anders.\n"
"\n"
"Er greift noch einmal tief in seinen Zylinder hinein,\n"
"und holt einen ganzen Stapel Papier heraus. Den wirft er euch zu.\n"
"Ihr seht euch die Zettel nacheinander an."
msgstr ""

#: Game.Levels.Cantor.L03_IsFixedPt_abs
msgid "**Cantor**:  Gut gemacht!\n"
"\n"
"  Er hat angefangen mit ein paar Kakteen zu jonglieren,\n"
"  aber offenbar verfolgt er dennoch irgendwie, was ihr macht."
msgstr ""

#. §0: `|x|`
#. §1: `x`
#. §2: `IsFixedPt`
#. §3: `unfold`
#: Game.Levels.Cantor.L03_IsFixedPt_abs
msgid "**Robo**: Also §0 ist einfach der übliche Betrag der reellen Zahl §1.\n"
"Und was §2 bedeutet findest du vermutlich mit §3 heraus."
msgstr ""

#. §0: `IsFixedPt`
#. §1: `IsFixedPt f x`
#. §2: `f x = x`
#: Game.Levels.Cantor.L03_IsFixedPt_abs
msgid "**Du**:  Ähm …\n"
"\n"
"**Robo**:  §0 soll vermutlich “is fixed point” heißen.\n"
"Jedenfalls bedeutet §1 offenbar gerade §2.\n"
""
msgstr ""

#: Game.Levels.Cantor.L03_IsFixedPt_abs
msgid "**Robo**:  So weit, so gut."
msgstr ""

#. §0: `simp`
#: Game.Levels.Cantor.L03_IsFixedPt_abs
msgid "**Robo**: §0 kann man immer mal probieren."
msgstr ""

#. §0: `simp`
#: Game.Levels.Cantor.L03_IsFixedPt_abs
msgid "**Robo**: §0 kann man immer mal probieren."
msgstr ""

#: Game.Levels.Cantor.L04_fixedPoints_neg
msgid ""
msgstr ""

#: Game.Levels.Cantor.L04_fixedPoints_neg
msgid ""
msgstr ""

#: Game.Levels.Cantor.L04_fixedPoints_neg
msgid "**Cantor**:  Weiter so!\n"
"\n"
"  Er hat die Kakteen gegen Spatzen eingetauscht."
msgstr ""

#. §0: `fixedPoints f`
#. §1: `unfold`
#: Game.Levels.Cantor.L04_fixedPoints_neg
msgid "\n"
"**Du**: Hier ist §0 wohl die Menge aller Fixpunkte?\n"
"\n"
"**Robo**: Probiers aus – §1 sollte wieder helfen.\n"
""
msgstr ""

#. §0: `unfold IsFixedPt`
#: Game.Levels.Cantor.L04_fixedPoints_neg
msgid "\n"
"**Robo**: Sieht gut aus.  Und jetzt am besten gleich noch §0.\n"
""
msgstr ""

#. §0: `simp`
#: Game.Levels.Cantor.L04_fixedPoints_neg
msgid "\n"
"**Robo**: §0 kann man immer mal probieren.\n"
""
msgstr ""

#: Game.Levels.Cantor.L05_IsFixedPt_not
msgid ""
msgstr ""

#: Game.Levels.Cantor.L05_IsFixedPt_not
msgid ""
msgstr ""

#: Game.Levels.Cantor.L05_IsFixedPt_not
msgid "**Cantor**: Ihr kommt der Sache näher …\n"
"\n"
"   Die Spatzen sind – wenig überraschend – davon geflogen.\n"
"   Also jongliert er wieder mit den Kakteen, und fährt dabei Einrad."
msgstr ""

#. §0: `¬`
#. §1: `Prop`
#: Game.Levels.Cantor.L05_IsFixedPt_not
msgid "**Du**: Was bedeutet das zweite §0 hier?\n"
"\n"
"**Robo**:  Dasselbe wie das erste: logische Negation.\n"
"Die kannst du als Selbstabbildung der Menge §1 aller möglichen Aussagen auffassen.\n"
"Und diese Abbildung hat natürlich keine Fixpunkte,\n"
"denn eine Aussage kann doch nicht gleich ihrer Negation sein!\n"
""
msgstr ""

#: Game.Levels.Cantor.L06_IsFixedPt_odd
msgid ""
msgstr ""

#: Game.Levels.Cantor.L06_IsFixedPt_odd
msgid ""
msgstr ""

#: Game.Levels.Cantor.L06_IsFixedPt_odd
msgid "Cantor sagt wieder etwas, aber ihr seid zu sehr mit den Aufgaben beschäftigt.\n"
"  Ihr bemerkt noch nicht einmal, dass er inzwischen angefangen hat,\n"
"  mit dem Einrad zu fliegen."
msgstr ""

#. §0: `f`
#: Game.Levels.Cantor.L06_IsFixedPt_odd
msgid "\n"
"**Du**:  So etwas ähnliches habe ich schon einmal gesehen\n"
"– die Annahme sagt, dass §0 eine „ungerade Funktion ist“.\n"
"\n"
"**Robo**: Dann mal los.  Ich denke, du wirst hier nichts brauchen,\n"
"was wir nicht schon gesehen haben.\n"
""
msgstr ""

#: Game.Levels.Cantor.L07_idempotent
msgid ""
msgstr ""

#: Game.Levels.Cantor.L07_idempotent
msgid ""
msgstr ""

#: Game.Levels.Cantor.L07_idempotent
msgid "**Cantor**: Na, seid ihr schon fertig??\n"
"\n"
"  **Robo**:  Einen Zettel haben wir noch."
msgstr ""

#. §0: `unfold range fixedPoints IsFixedPt`
#. §1: `«{h}»`
#. §2: `congr_fun`
#: Game.Levels.Cantor.L07_idempotent
msgid "\n"
"**Robo**:  Fang am besten damit an, wieder alle Definition auszuschreiben.\n"
"Ich würde sagen:  §0.\n"
"Und die Annahme §1 könntest du schon einmal §2 genauer ausschreiben.\n"
""
msgstr ""

#. §0: `apply congr_fun at h`
#: Game.Levels.Cantor.L07_idempotent
msgid "\n"
"**Robo**:  Ich meinte §0.\n"
""
msgstr ""

#. §0: `ext`
#. §1: `Subset.antisymm_iff`
#: Game.Levels.Cantor.L07_idempotent
msgid "\n"
"**Robo**:  Vielleicht fängst du mal wieder mit §0 an.\n"
"Oder mit §1.\n"
""
msgstr ""

#. §0: `comp_apply`
#. §1: `simp`
#: Game.Levels.Cantor.L07_idempotent
msgid "**Robo**:  Hilft vielleicht §0?  Oder §1?"
msgstr ""

#: Game.Levels.Cantor.L08_CantorDiag_IsFixedPt
msgid ""
msgstr ""

#. §0: `A × A`
#: Game.Levels.Cantor.L08_CantorDiag_IsFixedPt
msgid "Cantor landet, steigt vom Rad, kommt wieder zur Bühnenkante und reibt sich die Hände.\n"
"\n"
"**Cantor**: Ihr kommt der Sache jetzt näher!\n"
"Wenn ihr genau hinseht, habt ihr eine Abbildung vor euch,\n"
"die auf einem Produkt §0 definiert ist!\n"
"Und im Produkt gibt es eine Diagonale!"
msgstr ""

#: Game.Levels.Cantor.L08_CantorDiag_IsFixedPt
msgid "**Cantor**:  Sehr schön!\n"
"\n"
"  Er klatscht.\n"
"\n"
"  **Du**:  Also ich verstehe gerade gar nichts mehr."
msgstr ""

#. §0: `f`
#. §1: `A → (A → Y)`
#. §2: `A`
#. §3: `A →  Y`
#. §4: `A × A`
#. §5: `Y`
#. §6: `«{f}» «{a}» «{a}»`
#. §7: `«{f}» «{a}»`
#. §8: `«{a}»`
#. §9: `«{f}»`
#. §10: `(«{a}»,«{a}»)`
#. §11: `(«{a}»,«{a}»)`
#. §12: `«{ha}»`
#. §13: `f`
#. §14: `A → (A → Y)`
#: Game.Levels.Cantor.L08_CantorDiag_IsFixedPt
msgid "\n"
"**Du** *(zu Robo)*: Siehst du hier ein Produkt?\n"
"\n"
"**Robo**:  Ja, klar.  Erinner dich, wo bei §0 die Klammern stehen: §1.\n"
"Eine Abbildung von §2 zur Menge der Abbildungen von §3 ist doch dasselbe\n"
"wie eine Abbildung von §4 nach §5.\n"
"\n"
"Du runzelst die Stirn.\n"
"\n"
"**Robo**: Doch doch, das hatte wir uns auf Epo schon einmal überlegt!\n"
"Du kannst §6 entweder als §7 angewendet auf §8 oder als\n"
"§9 angewendet auf §10 interpretieren.\n"
"\n"
"**Cantor**:  Ganz genau!  Und das Element §11 liegt auf der Diagonale!\n"
"\n"
"**Robo**: Die Annahme §12 ist andereseits so formuliert,\n"
"dass die Interpretation von §13 als Abbildung §14 naheliegender ist.\n"
""
msgstr ""

#: Game.Levels.Cantor.L09_CantorDiag
msgid ""
msgstr ""

#: Game.Levels.Cantor.L09_CantorDiag
msgid "**Cantor**: Viel Glück!"
msgstr ""

#: Game.Levels.Cantor.L09_CantorDiag
msgid "**Du**: Jetzt möchte ich aber mit dieser generellen Form, die ursprüngliche\n"
"Aufgabe nochmals lösen."
msgstr ""

#: Game.Levels.Cantor.L09_CantorDiag
msgid ""
msgstr ""

#: Game.Levels.Cantor.L09_CantorDiag
msgid "**Cantor**:  Passt auf!  Alles wird klar.  Hier ist der Schlüssel!\n"
"  Ihr müsst die Aussage von eben nur ein bisschen umformulieren.\n"
"\n"
"  Er wirft euch einen neuen Zettel zu."
msgstr ""

#: Game.Levels.Cantor.L09_CantorDiag
msgid "**Cantor**:  Bravo!"
msgstr ""

#. §0: `s : «{Y}» → «{Y}»`
#. §1: $n ↦ n + 1$
#. §2: $ℕ$
#. §3: $ℝ$
#. §4: $\\{0,1\\}$
#. §5: `Y`
#: Game.Levels.Cantor.L09_CantorDiag
msgid "\n"
"**Du**:  Wir sollen unter bestimmten Annahmen zeigen, dass *jede* Selbstabbildung §0\n"
"einen Fixpunkt hat?  Gibt es nicht auf jeder Menge eine Selbstabbildung *ohne* Fixpunkte?\n"
"Zum Beispiel §1 auf §2 oder §3 …\n"
"\n"
"**Robo**:  … oder die nicht-triviale Permutation auf §4?\n"
"\n"
"Auch er ist anscheinend etwas verwirrt.\n"
"\n"
"**Robo**: Also, wenn §5 nicht gerade die Einpunktmenge ist,\n"
"sollte immer eine fixpunktfreie Selbstabbildung existieren.\n"
"\n"
"**Cantor**:  Na, das ist ja gerade der Witz!  Wartet ab!\n"
""
msgstr ""

#. §0: `«{f}»`
#. §1: `«{A}» → «{Y}»`
#. §2: ```
#. let c : «{A}» → «{Y}» := fun a ↦ _
#. ```
#. §3: `c`
#: Game.Levels.Cantor.L09_CantorDiag
msgid "**Cantor**: Ihr müsst natürlich irgendwie die\n"
"Surjektivität von §0 ausnutzen. Aber ich hatte euch ja eben schon verraten,\n"
"von welcher Abbildung §1  ihr ein Urbild betrachten müsst …\n"
"\n"
"**Robo** *(zu Dir)*: Mmm … verstehst du, was er meint?\n"
"Natürlich könntest du jetzt eine Abbildung definieren mit\n"
"§2\n"
"und dann von dieser Abbildung §3 ein Urbild betrachten.\n"
"Aber ich bin gerade etwas verloren.\n"
""
msgstr ""

#: Game.Levels.Cantor.L10_CantorPowerset
msgid ""
msgstr ""

#. §0: `A → Set A`
#. §1: `Set A`
#. §2: `A → Prop`
#. §3: `S : Set A`
#. §4: `A → Prop`
#. §5: `a : A`
#. §6: `a ∈ S`
#: Game.Levels.Cantor.L10_CantorPowerset
msgid "**Cantor**: Und jetzt nehmt ihr dieses schöne Diagonalargument und zeigt noch einmal,\n"
"dass es keine surjektiven Abbildungen §0 gibt!\n"
"Ihr müsst nur §1 auffassen als §2!\n"
"\n"
"**Du**: Was?\n"
"\n"
"**Robo**:  Eine Teilmenge §3 kann man mit der Abbildung\n"
"§4 identifizieren, die §5 auf die Aussage §6 wirft.\n"
"Für Formalosophen ist das dasselbe."
msgstr ""

#: Game.Levels.Cantor.L10_CantorPowerset
msgid "**Du**:  Ich weiß nicht, ob das wirklich einfacher war …"
msgstr ""

#. §0: `cantor_diagonal`
#. §1: `apply cantor_diagonal at «{hf}»`
#: Game.Levels.Cantor.L10_CantorPowerset
msgid "\n"
"**Du**: Also hier jetzt §0 verwenden?\n"
"\n"
"**Robo**: Vermutlich, zum Beispiel mit §1.\n"
""
msgstr ""

#. §0: `¬ .`
#: Game.Levels.Cantor.L10_CantorPowerset
msgid "\n"
"**Cantor**: Hatte ihr euch nicht schon überlegt, dass §0 keine Fixpunkte hat?"
msgstr ""

#: Game.Levels.Cantor.L11_SequenceUncountable
msgid ""
msgstr ""

#. §0: `ℕ → ℕ`
#: Game.Levels.Cantor.L11_SequenceUncountable
msgid "**Cantor**:  Einfacher?  Weiß nicht.  Aber eleganter!\n"
"\n"
"  Er macht drei Saltos rückwarts und kommt\n"
"  dann mit einem weiteren Zettel für euch zurück.\n"
"\n"
"  **Cantor**:  Schaut mal!  Jetzt könnt ihr mit demselben Argument zeigen,\n"
"  dass die Menge der Folgen natürlicher Zahlen, also die Menge der Abbildungen §0,\n"
"  überabzählbar ist!\n"
"\n"
"  Und dann im Flüsterton:\n"
"\n"
"  **Cantor**:  Es gibt in diesem Zelt überabzählbar viele Plätze!"
msgstr ""

#: Game.Levels.Cantor.L11_SequenceUncountable
msgid "**Robo**:  Vielen Dank für die Vorstellung!\n"
"\n"
"  **Du**:  Aber schade, dass es so wenige Zuschauer gibt!\n"
"\n"
"  **Cantor**:  Zauberei ist eben nicht für jedermann.  Gute Weiterreise!"
msgstr ""

#. §0: `n ↦ n + 1`
#. §1: `succ`
#: Game.Levels.Cantor.L11_SequenceUncountable
msgid "\n"
"**Du**:  Wie hieß noch einmal die Abbildung §0?\n"
"\n"
"**Robo**: §1\n"
""
msgstr ""

#: Game.Levels.Cantor
msgid "Cantor"
msgstr ""

#: Game.Levels.Cantor
msgid "Ihr seid neben einem großen Zelt gelandet.  Vielleicht ein Zirkuszelt?\n"
"Drinnen ist es recht dunkel.  Nur eine Bühne ist hell erleuchtet.\n"
"Darauf steht ein Herr, der wie eine Mischung aus Professor und Magier aussieht,\n"
"hält einen Monolog und führt anscheinend irgendetwas vor.\n"
"\n"
"Im Halbdunkel vor der Bühne stehen Stühle in langen Reihen.\n"
"Ihr habt das Zelt offenbar direkt an einem Ende der ersten Reihe betreten.\n"
"Das andere Ende könnt ihr gar nicht erkennen, so lang ist die Reihe.\n"
"Und dahinter kommen viele weitere Reihen – auch in diese Richtung könnt ihr kein Ende erkennen.\n"
"Aber alle Sitze sind leer.\n"
"\n"
"Ihr setzt auch also irgendwo in die erste Reihe, seht zur Bühne und spitzt die Ohren."
msgstr ""

#: Game.Levels.Robotswana.L01_SMulEBasis
msgid ""
msgstr ""

#. §0: ```
#. E i j := single i j (1 : ℝ)
#. ```
#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "Den Spuren folgend, findet ihr ein Stück Pergament, auf dem zuoberst\n"
"eine Notiz steht.\n"
"\n"
"§0\n"
"\n"
"Darunter ein bisschen wildes Gekritzel, das aber deutlich mit einer klaren\n"
"Zeile angefangen hat:"
msgstr ""

#. §0: `E i j`
#. §1: `n × n`
#. §2: `ℝ`
#. §3: `1`
#. §4: $(i, j)$
#. §5: `single i j (a : R)`
#. §6: `a`
#. §7: `E`
#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "§0 ist die §1-Matrix (mit Werten in §2) mit einer §3 an\n"
"Stelle §4 und Null überall sonst.\n"
"\n"
"Dies ist eine spezialisierte Form der generellen §5,\n"
"welche auch nicht-quadratisch sein kann und einen beliebigen Wert §6 aus einem beliebigen\n"
"Ring annehmen kann. Wir benutzen hier §7 einfach als Abkürzung."
msgstr ""

#: Game.Levels.Robotswana.L01_SMulEBasis
msgid ""
msgstr ""

#. §0: `Mat[«{n}»,«{n}»]`
#. §1: $(«{n}» \\times «{n}»)$
#. §2: `Fin «{n}»`
#. §3: `Fin «{n}»`
#. §4: $\\{0,...,n-1\\}$
#. §5: $0$
#. §6: $1$
#. §7: `single i j a`
#. §8: `(i, j)`
#. §9: `a`
#. §10: `E`
#. §11: `a = 1`
#. §12: `A i j`
#. §13: `A`
#. §14: `(i, j)`
#. §15: $$
#. A_{i,j} \\cdot
#. \\begin{pmatrix}
#. 0 & 0 & 0\\
#. 1 & 0 & 0 \\
#. 0 & 0 & 0
#. \\end{pmatrix}
#. =
#. \\begin{pmatrix}
#. 0 & 0 & 0\\
#. A_{i,j} & 0 & 0 \\
#. 0 & 0 & 0
#. \\end{pmatrix}
#. $$
#. §16: `unfold E`
#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "**Du**: Welches Wesen auch immer hier Spuren hinterlassen hat – mir scheint, es mag Matrizen.\n"
"Jedenfalls sieht §0 stark nach §1-Matrizen aus.\n"
"Ich weiß nur nicht mehr, was §2 ist.\n"
"\n"
"**Robo**: §3 war die Menge §4.\n"
"Die Zeilen- und Spaltenindizes fangen hier also bei §5 an und nicht bei §6.\n"
"Und §7 kenne ich zufällig.\n"
"Das ist die Matrix, die an der Position §8 den Eintrag §9 hat und sonst überall Null ist.\n"
"\n"
"**Du**: Und die §10s sind dann einfach eine Abkürzung für den Fall §11?\n"
"\n"
"**Robo**: So sieht's aus. Und §12 ist einfach der Eintrag der Matrix §13 an der Position §14.\n"
"\n"
"**Du**: Ah, verstehe. Da steht also kein Produkt von Matrizen, sondern nur eine Skalarmultiplikation. Etwas in der Art von …\n"
"\n"
"Du kritzelst auf das Papier:\n"
"\n"
"§15\n"
"\n"
"**Du**: Dann ist das ja mal wieder… …offensichtlich!?\n"
"\n"
"**Robo**: Ja. Ich denke, wenn du mit §16 anfängst, geht der Rest wie von selbst.\n"
""
msgstr ""

#. §0: `Matrix.smul_ebasis`
#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "**Du**: Und was machen wir jetzt mit dieser „Erkenntnis“?\n"
"\n"
"**Robo**: Keine Ahnung.  Ich speichere das jedenfalls mal als §0 ab, falls wir es nochmals\n"
"brauchen.\n"
"\n"
"Damit folgt ihr weiter der Spur."
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid "Kurze Zeit später findet ihr zwei sehr ähnlichen Zettel, wieder\n"
"vollgekritzelt, fast alles durchgestrichen.\n"
"Die erste Zeile aber lässt sich jeweils gerade noch ausmachen."
msgstr ""

#. §0: `E.mul_of_ne`
#: Game.Levels.Robotswana.L02_EBasis
msgid "**Robo**: Ich speichere dieses §0 auch mal, wer weiß.\n"
"\n"
"  **Du**: Jetzt bin ich aber neugierig, wer diese Zettel hier verloren oder weggeworfen hat. Komm, lass uns weitergehen."
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid "**Du**: Das sieht jetzt aber nach Matrizen-Multiplikation aus.\n"
"Müsste so auch stimmen.\n"
""
msgstr ""

#. §0: `simp`
#. §1: `«{h}»`
#: Game.Levels.Robotswana.L02_EBasis
msgid "**Robo**: Vergiss aber nicht, dass §0 die Annahme §1 explizit braucht!"
msgstr ""

#: Game.Levels.Robotswana.L03
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L03
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L03
msgid "**Du**: Jetzt bin ich aber neugierig, wer diese Zettel hier verloren oder weggeworfen hat. Komm, lass uns weitergehen."
msgstr ""

#: Game.Levels.Robotswana.L03
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L03
msgid "**Du**:  Sieht auch richtig aus."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Ihr kommt an eine Stelle, wo das Gras auf einer größeren, quadratischen\n"
"Fläche heruntergetrampelt ist. Spuren führen kreuz und queer und in verschiedene\n"
"Richtungen weg.\n"
"\n"
"Ein bisschen planlos sucht ihr die Stelle ab und findet verschiedenste Pergamentstücke.\n"
"Die meisten sind leer oder unleserlich, aber eines kannst du entziffern."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Du beschließt, einer besonders markanten Spur zu folgen. Robo zieht dir hinterher und schnappt\n"
"sich beim gehen noch ein willkürliches Stück Pergament vom Boden."
msgstr ""

#. §0: $(n × n)$
#. §1: $\\mathbb{R}$
#. §2: $A$
#. §3: $A = \\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1} A_{ij} \\cdot E(i, j)$
#. §4: `matrix_eq_sum_single`
#. §5: $(m × n)$
#. §6: $R$
#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Sagt aus, dass man jede §0-Matrix (über §1) §2 schreiben kann\n"
"als §3.\n"
"\n"
"Siehe auch §4, welches die generalisierte Form für\n"
"§5-Matrix (über beliebigem §6) ist."
msgstr ""

#. §0: `E i j`
#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "**Du**: Das scheint einfach zu sagen, dass diese §0 ein Erzeugendensystem für den Raum der Matrizen bilden.\n"
"\n"
"**Robo**: Da kannst du bestimmt gleich die Resultate anwenden, die wir schon gefunden haben!"
msgstr ""

#. §0: `(A i j) • E i j`
#. §1: `Matrix.smul_ebasis`
#. §2: `rw […]`
#. §3: `simp […]`
#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "**Robo**: Den Ausdruck §0 kannst du doch bestimmt mit §1 vereinfachen.\n"
"\n"
"**Du**: Also §2?\n"
"\n"
"**Robo**:  Nein, unter der Summe wird das nicht funktionieren.\n"
"Aber §3 hat Aussicht auf Erfolg."
msgstr ""

#. §0: `apply matrix_eq_sum_single`
#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "**Robo**: Ach ja!  So wie es jetzt hier steht, kenne ich die Aussage aus meiner Bibliothek.\n"
"Das ist genau §0.\n"
"\n"
"**Du**: Super! Dann brauchen wir uns ja gar nicht damit aufhalten."
msgstr ""

#. §0: `matrix_eq_sum_ebasis`
#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Die generellere Version von §0. Siehe dort."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid ""
msgstr ""

#. §0: `1`
#. §1: `matrix_eq_sum_ebasis`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Zeig mal, was hast du da? Was zur Einheitsmatrix? Passend für unsere Sammlung?\n"
"\n"
"**Robo**: Ja – die §0 ganz rechts ist hier die Einheitsmatrix.\n"
"  Ich glaube, du kannst gleich mit §1 beginnen.\n"
"\n"
"**Du**: Ich frage mich, ob wir noch wichtiges auf dem Platz zurückgelassen haben?\n"
"\n"
"**Robo**: Egal, jetzt sind wir schon ein gutes Stücken weiter. Probier jetzt hier einmal!"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Ich habe das Gefühl, wir sind jemandem auf der Spur, der sich für die\n"
"die Diagonale von Matrizen interessiert.  Aber ich bekomme langsam Durst!"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid ""
msgstr ""

#. §0: `matrix_eq_sum_ebasis`
#. §1: `1`
#. §2: `matrix_eq_sum_ebasis 1`
#. §3: `r`
#. §4: `w`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "\n"
"**Robo**:  Wie gesagt, ich denke, du kannst gleich mit §0 anfangen,\n"
"angewendet auf die Einheitsmatrix §1 rechts vom Gleichheitszeigen.\n"
"Du willst also mit der Gleichung §2 das Beweisziel §3e§4riten.\n"
""
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Ich denke, die beiden Summen sind identisch, weil jeder Summand identisch ist."
msgstr ""

#. §0: `sum_congr`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "\n"
"**Robo**:  Dann solltest du vermutlich wieder §0 anwenden.\n"
""
msgstr ""

#. §0: `funext r s`
#. §1: $(r,s)$
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Und jetzt?\n"
"\n"
"**Robo**: Mit §0 könntest du dich auf den Eintrag der Matrix an der Stelle §1 konzentrieren.\n"
""
msgstr ""

#. §0: `1`
#. §1: `1 «{i}» j`
#. §2: `j ≠ «{i}»`
#. §3: `j = «{i}»`
#. §4: `have h : {«{i}»} ⊆ univ`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: §0 war hier die Einheitsmatrix, richtig?\n"
"\n"
"**Robo**: Ja.\n"
"\n"
"**Du**:  Dann ist §1 doch Null für alle §2.\n"
"Also verschwindet alle Summanden bis auf den Summanden für §3.\n"
"\n"
"**Robo**: Ist das so?   Dann lass mich mal überlegen …\n"
"Kannst du zuerst mal §4 zeigen?"
msgstr ""

#. §0: `sum_subset`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Robo**: Sehr gut.  Jetzt kannst du nämlich §0 anwenden."
msgstr ""

#. §0: `1 «{i}» «{i}»`
#. §1: `1 • _`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Danke, das hilft! Dieser Schritt sollte einfach sein: Eine Summe über ein Element,\n"
"bei diesem ist §0 wieder Eins, und §1 vereinfacht sich auch!"
msgstr ""

#. §0: `simp`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Robo**: §0 kann man immer versuchen …"
msgstr ""

#. §0: `«{h₂}»`
#. §1: `«{i}» ≠ «{x}»`
#. §2: `have h₃ : «{i}» ≠ «{x}»`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Aber was mache ich hier? §0 sagt ja mehr oder weniger dass §1 ist.\n"
"\n"
"**Robo**: Ja, aber nicht ganz. Führ das doch mit §2 ein und zeig das kurz!"
msgstr ""

#. §0: `«{h₂}»`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Als erstes würde ich mal schauen, ob sich §0 vereinfacht."
msgstr ""

#. §0: `symm`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Hmm, jetzt ist das erstmal verdreht.\n"
"\n"
"**Robo**: Erinnere dich an §0!\n"
"\n"
"**Du**: Richtig, das brauchten wir ja schon bei diesem wilden Typen mit seinen Förderbändern."
msgstr ""

#. §0: `1 «{i}» «{x}»`
#. §1: `Matrix.one_apply`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Wie setze ich denn jetzt die Definition für §0 ein?\n"
"\n"
"**Robo**: §1!"
msgstr ""

#. §0: `rw`
#. §1: `if_neg`
#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Robo**: Und da das falsch ist, kannst du mit §0 und §1 weiterkommen."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid ""
msgstr ""

#. §0: $$
#. [A, B] = AB - BA
#. $$
#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "Der Spur folgend kommt ihr an einem großen Baum. Im Schatten findet ihr ein regloses Etwas:\n"
"\n"
"§0\n"
"\n"
"**Robo**:  Ach ja, ein Kommutator!\n"
"\n"
"**Du**: Der sieht aber ziemlich nihiliert aus.  Ich glaube, der ist verdurstet.\n"
"\n"
"**Robo**: Und schau, hier ist noch was in den Baum gekritzelt."
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "**Robo**: Ich glaube, die Annahme, dass Kommutatoren nihiliert werden, nehmen wir jetzt erst\n"
"einmal mit.\n"
"\n"
"**Du**: Schön.  Sagte ich bereits, dass ich langsam Durst habe?"
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid ""
msgstr ""

#. §0: `f`
#. §1: `E i i`
#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "**Du**: Mit anderen Worten: Wenn §0 Kommutatoren nihiliert, dann stimmen seine Werte\n"
"auf allen §1 überein. Stimmt das??\n"
"\n"
"**Robo**: Lass es uns herausfinden!"
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid ""
msgstr ""

#. §0: `E i j`
#. §1: `E i j`
#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "Gleich neben dem Baum findest du noch eine Notiz, in der groß §0 durchgestrichen ist.\n"
"\n"
"**Du**: Soll wohl heißen: §1 mit i ≠ j interessieren uns nicht."
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "Die Spuren wirken mittlerweile viel frischer und ihr folgt ihnen schneller und\n"
"unvorsichtiger als zuvor."
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "Ihr findet nochmals einen Hinweis, aber in der Eile verliert ihr die Fährte.\n"
"Du bist inzwischen sehr durstig.\n"
"Während Robo die nähere Umgebung absucht, setzt du dich erschöpft hin und\n"
"starrst unter der warmen Sonne etwas beduselt auf den Pergamentfetzen."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Na endlich.\n"
"\n"
"Robo reicht dir eine Flasche Wasser.\n"
"\n"
"**Du**: Wo hast du die denn auf einmal her?\n"
"\n"
"**Robo**: Trick 17.\n"
"\n"
"**Du**:  Und hast du die Fährte wiedergefunden?\n"
"\n"
"**Robo**:  Ja, komm mit! Da hinten hab ich etwas gesehen."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid ""
msgstr ""

#. §0: $$
#. \\begin{aligned}
#. f(A)
#. &= f\\left( \\sum_{i,j} A_{i,j} \\cdot E_{i,j} \\right) \\
#. &= \\sum_{i,j} A_{i,j} \\cdot f(E_{i,j})   \\
#. &= \\sum_{i} A_{i,i} \\cdot f(E_{i,i})
#. \\end{aligned}
#. $$
#. §1: `A`
#. §2: `f`
#. §3: `E i j`
#. §4: `i ≠ j`
#. §5: `A`
#. §6: `f A`
#. §7: `A`
#. §8: `nth_rw 1 [ ... ]`
#. §9: `rw`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Was das wohl jetzt soll …?\n"
"\n"
"Du kritzelst einen bisschen herum.\n"
"\n"
"§0\n"
"\n"
"**Du**: Ja, so könnte das gehen.  Ich schreibe §1 als Summe von Basismatrizen,\n"
"nutze dann die Linearität, und zuletzt, dass §2 auf den §3 mit §4 verschwindet.\n"
"\n"
"Vermutlich sollte ich also als erstes das §5 in §6 als Summe von Basismatrizen\n"
"schreiben, nicht aber das andere §7 weiter hinten.\n"
"\n"
"**Robo** (*aus der Ferne*): §8! Funktioniert wie §9."
msgstr ""

#. §0: `matrix_eq_sum_ebasis A`
#. §1: `nth_rw 1`
#. §2: `rw`
#. §3: `rw [matrix_eq_sum_ebasis A]`
#. §4: `A`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du** (*schreiend*): Was meinst du damit?\n"
"\n"
"**Robo** (*ebenfalls schreiend*): Na, du willst bestimmt §0 anwenden, aber mit §1 und nicht mit §2.\n"
"§3 würde beide §4s ersetzen."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du** (*in Gedanken*): Jetzt Linearität nutzen… Und ja nicht an Wasser denken…\n"
"Auf Babylon gabs genug Wasser… Woran war ich nochmals?"
msgstr ""

#. §0: `map_sum`
#. §1: `simp`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo** (*von irgendwo*): Das klingt nach §0.  Glaub nicht, dass wir\n"
"das auf Babylon gesehen haben, das fantasierst du. Aber §1 kennt dieses Lemma bestimmt."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Ah ja, im Zweifelsfall vereinfachen."
msgstr ""

#. §0: `f`
#. §1: `E i j`
#. §2: `i≠j`
#. §3: `trans ∑ i, ∑ j, if i = j then (A i j) * f (E i j) else 0`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: Wie weit bist du jetzt?\n"
"\n"
"**Du**: Ich muss noch irgendwie einbringen, dass §0 auf den §1 mit §2 verschwindet.\n"
"\n"
"**Robo**: Mach doch folgenden Zwischenschritt:\n"
"\n"
"§3"
msgstr ""

#. §0: `apply congr_arg`
#. §1: `ext`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: Summe gleich Summe … das gehst du mit §0, §1 an."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Vielleicht gleich nocheinmal?"
msgstr ""

#. §0: `«{i}» = «{j}»`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Und jetzt Fallunterscheidung zu §0…"
msgstr ""

#. §0: `by_cases`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: §0 war das, genau!"
msgstr ""

#. §0: `if_pos «{h₂}»`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: Hier ist §0 nützlich."
msgstr ""

#. §0: `if_neg «{h₂}»`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: …und hier §0.\n"
"\n"
"**Du**: Weiß ich doch."
msgstr ""

#. §0: `f (E i j)`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: §0 ist doch Null, hatten wir doch schon gesehen!"
msgstr ""

#. §0: `zero_on_offDiag_ebasis`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: Und das hieß §0."
msgstr ""

#. §0: `trans`
#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Und ich dachte schon das wär's.\n"
"\n"
"**Robo**: Fast, da ist noch die zweite Hälfte des §0-Befehls oben. Diese Hälfte\n"
"ist ganz einfach.\n"
""
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "Lineare Abbildungen (oder genereller \"additive\" Abbildungen) kann man mit einer\n"
"Summe vertauschen."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "Keine fünfzig Meter weiter kommt ihr auf eine kleine Anhöhe.\n"
"Robo zeigt auf einen Punkt in der Ferne.\n"
"\n"
"**Robo**: Schau mal, da liegt es!\n"
"\n"
"**Du**: Und was *ist* das???\n"
"\n"
"**Robo**:  Weiß nicht.  Aber mein Gefühl sagt mir, diese Zettel sind eine Art Steckbrief.  Schau mal, hier ist noch einer.  Ich glaube, der sagt, wie groß es ist."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Du**: Okay. Lass uns vorsichtig näher gehen."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid ""
msgstr ""

#. §0: `«{n}»`
#. §1: $$
#. \\begin{aligned}
#. n \\cdot f(E_{i i})
#. &= \\sum_j f(E_{i i}) \\
#. &= \\sum_j f(E_{j j}) \\
#. &= f(1) \\
#. &= n
#. \\end{aligned}
#. $$
#. §2: `f E i i`
#. §3: `f E j j`
#. §4: `i`
#. §5: `j`
#. §6: `«{n}»`
#. §7: ```
#. suffices h : n * f (E i i) = n * 1
#. ```
#. §8: `mul_eq_mul_left_iff`
#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "\n"
"Du überlegst ein bisschen und kritzelst auf dem Papier herum.  Nach einer Weile:\n"
"\n"
"**Du**: Ich glaube, ich habe eine Idee! Das §0-fache der Gleichung kann ich mit den vorherigen Resultaten wie folgt nachrechnen:\n"
"§1\n"
"\n"
"Der wesentlich Punkt ist, dass wir ja gesehen hatten, dass §2 und §3 für beliebige §4 und §5 gleich sind.  Also sind sie in der Summe austauschbar.\n"
"\n"
"**Robo**: Mmm.  Du willst jedenfalls zunächst ausnutzen, dass Multiplikation mit §6 injektiv ist?\n"
"Hatten wir dazu nicht mal ein Lemma? Mmm …\n"
"\n"
"Robo überlegt eine Weile.\n"
"\n"
"**Robo**:  Ich würds mal so versuchen:\n"
"§7\n"
"Und dann weiter mit §8.\n"
""
msgstr ""

#. §0: `«{h}» : «{n}» = 0`
#. §1: `obtain «{h}» | «{h}» := «{h}»`
#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "\n"
"**Robo**: Ach ja, den Fall §0\n"
"müssen wir wohl gesondert betrachten.\n"
"Unterscheiden wir die Fälle also mit §1\n"
""
msgstr ""

#. §0: `«{h}»`
#. §1: `ℕ`
#. §2: `ℝ`
#. §3: `simp`
#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "\n"
"**Robo**: Der Pfeil §0 ist eine implizite Einbettung von §1 in §2.\n"
"Die entfernst du zum Beispiel mit §3."
msgstr ""

#. §0: `«{h}» : «{n}» = 0`
#. §1: `«{i}» : Fin «{n}»`
#. §2: `«{i}»`
#. §3: `Fin 0`
#. §4: `simp [«{h}»] at «{i}»`
#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "\n"
"**Robo**:  Und jetzt willst du vermutlich §0 in §1 einsetzen,\n"
"und feststellen, dass die Aussage trivial wird, weil es gar kein §2 in §3 gibt.\n"
"Zum Einsetzen kannst du in diesem Fall §4 benutzen.\n"
""
msgstr ""

#. §0: `IsEmpty.false`
#. §1: `M`
#. §2: `∀ (m : M), False`
#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "\n"
"**Robo**: Und jetzt hilft dir vermutlich das Lemma §0,\n"
"das für eine leere Menge §1 besagt §2.\n"
""
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**:  Na schön.  Jetzt also zur eigentlichen Sache."
msgstr ""

#. §0: `trans`
#. §1: `trans ∑ j : Fin «{n}», f (E i i)`
#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "\n"
"**Robo**: Wenn ich dich richtig verstanden haben, willst du jetzt mehrmals §0 anwenden, als erstes\n"
"§1.\n"
""
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Das hatten wir schon gesehen."
msgstr ""

#. §0: `eq_sum_apply_diag_ebasis`
#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Das Resultat, das du hier anwenden wolltest, hieß §0."
msgstr ""

#. §0: `rw [«{h₂}»]`
#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Probier mal §0."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid ""
msgstr ""

#. §0: `trace`
#: Game.Levels.Robotswana.L10_Characterize
msgid "Ihr schleicht euch langsam an.\n"
"\n"
"**Du** (**flüsternd**): Ich glaube, du hattest Recht.  Diese Zettel sind eine Art Steckbrief!\n"
"Und sie beschreiben dieses Wesen hier eindeutig!\n"
"\n"
"**Robo**: Wie meinst du das?\n"
"\n"
"**Du**: Schau doch, seine Größe, seine Vorliebe für Kommutatoren, und all die anderen Sachen,\n"
"damit kann es eindeutig identifiziert werden!\n"
"\n"
"**Robo**: Das musst du mir genauer erklären.\n"
"\n"
"**Du**:  Ich versuch's mal. Gibt es in Leansch einen Namen für die Spur?\n"
"\n"
"**Robo**: Ja klar, die heißt natürlich §0.  Manche Formalosophen nennen sie auch liebevoll Tracy.\n"
"\n"
"Du nimmst einen der Pergamentfetzen und schreibst auf die Rückseite."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Robo**: Tatsache. Du hattest Recht.\n"
"\n"
"Ihr beobachtet voller Entzücken dieses offenbar einzigartige Wesen auf diesem Planeten.\n"
"\n"
"Als ihr näher kommt, scheint euch Tracy zu bemerken.  Aber es scheint dadurch keinesfalls gestört\n"
"zu sein."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid ""
msgstr ""

#. §0: `f`
#: Game.Levels.Robotswana.L10_Characterize
msgid "**Du**:  Hier sind noch einmal alle Eigenschaften zusammengefasst.\n"
"\n"
"**Robo**:  Und du behauptest, nur Tracy hat diese Eigenschaften?\n"
"\n"
"**Du**: Ja.  Ich glaube, das ist so.  Jedes §0, dass diese Eigenschaften hat, verhält sich auf allen Matrizen genauso wie Tracy.  Und deshalb *ist* es Tracy!"
msgstr ""

#. §0: `ext`
#: Game.Levels.Robotswana.L10_Characterize
msgid "\n"
"**Robo**: §0!"
msgstr ""

#. §0: `f «{A}»`
#: Game.Levels.Robotswana.L10_Characterize
msgid "**Du**: Und jetzt schreiben wir §0 als Summe von Basiselementen."
msgstr ""

#. §0: `f (E i i) = 1`
#. §1: `one_on_diag_ebasis`
#: Game.Levels.Robotswana.L10_Characterize
msgid "\n"
"**Du**: Wir hatten doch eben festgestellt, dass §0 gilt!\n"
"\n"
"**Robo**: Nachschlagen kann ich gut! Das war §1."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Robo**: Die beiden Seiten sind per Definition gleich!"
msgstr ""

#. §0: `rw [eq_sum_apply_diag_ebasis]`
#: Game.Levels.Robotswana.L10_Characterize
msgid "**Du**: Wo kommt denn dieses Beweisziel jetzt noch her?\n"
"\n"
"**Robo**: Ganz am Anfang bei §0 hast du vermutlich dieses Argument\n"
"ausgelassen.  Jetzt kannst du es noch nachholen."
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid "Als ihr mit etwas Abstand stehen bleibt, kommt Tracy auf euch zugelaufen und fängt an zu spielen. Belustigt gibt es euch verschiedenste\n"
"Aufgaben und Terme, und ihr versucht, diese schnell genug zu kombinieren."
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid "Schließlich macht ihr euch auf den Rückweg.\n"
"Ihr verlauft euch sofort, aber Tracy ist euch offenbar gefolgt und führt euch quer durch\n"
"die Grasslandschaft zurück zu eurem Schiff."
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid "**Du**: Da geht es gerade offensichtlich um Linearität der Spur von Matrizen."
msgstr ""

#. §0: `card_fin`
#. §1: `simp`
#: Game.Levels.Robotswana.L11_Linearity
msgid "**Robo**: Dieser letzte Schritt ist §0. Das ginge natürlich auch alles\n"
"mit §1, wenn wir gerade nicht so viele Spaß am Spielen hätten."
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.Robotswana
msgid "Robotswana"
msgstr ""

#: Game.Levels.Robotswana
msgid "Ihr landet auf einem warmen Planeten, und tretet auf eine weite Graslandschaft hinaus.\n"
"\n"
"Nach etwas Umschauen entdeckt Robo Spuren, die von eurem Landeplatz wegführen, zwischen\n"
" vereinzelten Bäumen hindurch. Ihr beratet kurz und beschließt, den Spuren zu folgen."
msgstr ""

#: Game.Levels.Ciao.L01
msgid ""
msgstr ""

#: Game.Levels.Ciao.L01
msgid ""
msgstr ""

#: Game.Levels.Ciao.L01
msgid "**Du**: Das war ja nun nicht so schwer …  Wer die wohl gesendet hat?  Und warum?\n"
"\n"
"**Robo**:  Das war sicher eine Nachricht von Ritha …\n"
"\n"
"Robo schaut in die Ferne.\n"
"\n"
"**Robo**:  Ich glaube, sie wollte uns ermuntern, weiter zu fliegen.\n"
"\n"
"**Du**: Aber wohin?\n"
"\n"
"**Robo**:  Oh, schau mal, noch eine Nachricht:\n"
"\n"
"*Liebe Erdwesen,*\n"
"\n"
"*es war uns ein Vergnügen, euch kennenzulernen!\n"
"Es tut uns aufrichtig leid, dass ihr euch in unser Formaloversum verirrt habt und\n"
"nicht wieder nach Hause findet.  Aber wir haben noch eine gute Nachricht:\n"
"Ihr seid nicht die einzigen!\n"
"Fliegt nur rasch weiter zum Planeten Zulip.\n"
"Dort werdet ihr viele weitere Erdwesen finden, die sich ins Formaloversum verirrt haben.\n"
"Zulip ist groß, gewiss werdet auch ihr dort ein neues Zuhause finden.  Hier die Koordinaten:*\n"
"\n"
"[248-4804-180 | 844-1001-553](https://leanprover.zulipchat.com/#narrow/channel/113489-new-members/)\n"
"\n"
"*Mit den aufrichtigsten Grüßen*\n"
"\n"
"*– Eure Formalosophen*\n"
"\n"
"**Robo**:  Na dann – los!\n"
"\n"
"[Nicht wundern:  Wenn ihr den Koordinaten folgt, beschleunigt das Raumschiff auf\n"
"Überlichtgeschwindigkeit und ihr verliert vorübergehend den Kontakt zum Server.\n"
"Das macht aber nichts.  Ihr werdet sicher auf Zulip ankommen.]"
msgstr ""

#: Game.Levels.Ciao
msgid "Ciao"
msgstr ""

#: Game.Levels.Ciao
msgid "**Du**:  Kann es sein, dass wir jetzt alle Planeten in dieser Ecke dieses Universums besucht haben?\n"
"\n"
"**Robo**:  Ja, sieht so aus.\n"
"\n"
"**Du**:  Was machen wir jetzt?\n"
"\n"
"**Robo:** Keine Ahnung.\n"
"\n"
"Nach einer Weile …\n"
"\n"
"**Robo:** Du, schau mal, hier ist eine Nachricht reingekommen."
msgstr ""

#: Game.Levels.Prado.L01_prime_two
msgid ""
msgstr ""

#: Game.Levels.Prado.L01_prime_two
msgid "**Robo**:  Ja, ja.  Wissen wir.\n"
"\n"
"Er formuliert die Aussage schnell in Leansch und hält sie dir hin."
msgstr ""

#: Game.Levels.Prado.L01_prime_two
msgid ""
msgstr ""

#. §0: `2`
#. §1: `decide`
#: Game.Levels.Prado.L01_prime_two
msgid "**Robo** *(flüsternd)*:  Das ist ganz einfach.  Weil §0 eine konkrete Zahl ist\n"
"und es einen Algorithmus gibt, um zu entscheiden, ob eine Zahl prim ist, kannst du einfach §1 verwenden!"
msgstr ""

#. §0: `2`
#: Game.Levels.Prado.L01_prime_two
msgid "**Du**:  In der Tat.  Wissen wir.  Und was gibt es noch für Exponate?\n"
"\n"
"Guino  wird etwas verlegen.\n"
"\n"
"**Guino**:  Nun, wie gesagt, wir haben gerade erst geöffnet.\n"
"Und wir hatten uns entschieden, zunächst nur die allerschönsten Primzahlen auszustellen:\n"
"die geraden. Momentan ist die §0 unser einziges Exponat.\n"
"Aber wir arbeiten mit Hochdruck daran, weitere gerade Primzahlen für unsere Dauerausstellung zu finden."
msgstr ""

#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid ""
msgstr ""

#. §0: `2`
#. §1: `a`
#. §2: `b`
#. §3: `a`
#. §4: `b`
#. §5: `a ∣ b`
#. §6: `\\|`
#. §7: `\\dvd`
#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid "**Du** *(flüsternd)*: Robo, meinst du, wir sollen es ihm sagen?\n"
"\n"
"**Robo**: Dass §0 die einzige gerade Primzahl ist?\n"
"Er wird es nicht glauben wollen, solange wir ihm keinen Beweis präsentieren.\n"
"\n"
"**Du**:  Und meinst du nicht, wir können das zeigen?  Du kennst doch die Sprache.\n"
"Lass uns mal probieren.  Wie schreib ich zum Beispiel „§1 teilt §2“?\n"
"\n"
"**Robo**: Na schön. Also  „§3 teilt §4“ schreibst du als §5, wobei du den senkrechten Strich\n"
"  als §6 oder §7 schreiben musst.  Probier zum Beispiel mal diese Aufgabe hier."
msgstr ""

#. §0: `a ∣ b`
#. §1: `∃ k, b = a * k`
#. §2: ```
#. rw [dvd_iff_exists_eq_mul_left] at *
#. ```
#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid "\n"
"**Robo**: Definiert ist §0 natürlich als §1.\n"
"Am besten schreibst du das für den Anfang überall explizit aus:\n"
"§2\n"
""
msgstr ""

#. §0: `obtain`
#. §1: `use`
#. §2: `obtain ⟨x ,hx⟩ := _`
#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid "\n"
"**Du**:  Und jetzt mache ich mit §0 und §1 weiter?\n"
"\n"
"**Robo**: Genau.  Als nächstes nimmst du die Annahmen mit §2\n"
"usw. auseinander."
msgstr ""

#. §0: `use _`
#. §1: `«{b}» + «{c}» = «{a}» * _`
#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid "**Robo**: Jetzt musst du mit §0 eine Zahl angeben, sodass\n"
"§1 gilt."
msgstr ""

#. §0: `ring`
#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid "**Robo**: Mit ein bisschen umschreiben kann man sicher §0 verwenden."
msgstr ""

#. §0: `a ∣ b`
#. §1: `∃ k, b = a * k`
#. §2: `∣`
#. §3: `\\dvd`
#. §4: `|`
#. §5: `obtain h₁ | h₂ := h`
#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid "§0 bedeutet §1.\n"
"\n"
"**Warnung**: Die Symbole §2 (§3) und §4 (ASCII vertikaler Strich) sind zwei unterschiedliche\n"
"Zeichen! Das erste wird ausschließlich für „teilt“ verwendet, das andere kommt zum Beispiel in der\n"
"Syntax §5 vor."
msgstr ""

#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid ""
msgstr ""

#: Game.Levels.Prado.L02_dvd_iff_exists_eq_mul_left
msgid "**Guino**:  Was flüstert ihr denn da?\n"
"\n"
"**Du**:  Ach, nichts.  Robo versucht mich nur daran zu erinnern, was genau eine Primzahl ist.\n"
"\n"
"Guino schaut sich euern Beweis an.\n"
"\n"
"**Guino**: Nicht schlecht, nicht schlecht.  Aber lasst uns doch ein bisschen weitergehen.\n"
"Das Museum ist zwar noch leer, aber fertig.  Und es ist wirklich gut geworden.  Schaut mal, hier entlang!"
msgstr ""

#: Game.Levels.Prado.L03_even_iff_two_dvd
msgid ""
msgstr ""

#: Game.Levels.Prado.L03_even_iff_two_dvd
msgid "Während ihr Guino durch das Museum folgt, gibt dir Robo weitere Aufgaben."
msgstr ""

#: Game.Levels.Prado.L03_even_iff_two_dvd
msgid ""
msgstr ""

#. §0: `rw [dvd_iff_exists_eq_mul_left]`
#: Game.Levels.Prado.L03_even_iff_two_dvd
msgid "\n"
"**Robo**:  Fang doch noch einmal mit §0 an!\n"
""
msgstr ""

#: Game.Levels.Prado.L04_99
msgid ""
msgstr ""

#: Game.Levels.Prado.L04_99
msgid "Guino wirkt inzwischen ein wenig irritiert, dass ihr gar keinen Augen für sein tolles Museum habt.\n"
"Er fühlt sich ignoriert. Um eure Aufmerksamkeit zu bekommen, gibt er euch folgende Aufgabe."
msgstr ""

#: Game.Levels.Prado.L05_not_dvd_of_between_consec_multiples
msgid ""
msgstr ""

#: Game.Levels.Prado.L05_not_dvd_of_between_consec_multiples
msgid "**Du** *(zu Robo)*:  Gib mir mal wieder etwas Interessanteres!\n"
"\n"
"**Robo**:  Wie wäre es hiermit?"
msgstr ""

#: Game.Levels.Prado.L05_not_dvd_of_between_consec_multiples
msgid ""
msgstr ""

#. §0: `by_contra`
#. §1: `lt_of_mul_lt_mul_left`
#. §2: `a b c : ℕ`
#. §3: `a * b < a * c`
#. §4: `b < c`
#: Game.Levels.Prado.L05_not_dvd_of_between_consec_multiples
msgid "\n"
"**Du**: §0?\n"
"\n"
"**Robo**:  Das könnte funktionieren.\n"
"Und wahrscheinlich wirst du das Lemma §1 brauchen.\n"
"Für §2 zieht es aus der Annahme §3 den Schluss §4.\n"
""
msgstr ""

#: Game.Levels.Prado.L05_not_dvd_of_between_consec_multiples
msgid ""
msgstr ""

#: Game.Levels.Prado.L05_not_dvd_of_between_consec_multiples
msgid ""
msgstr ""

#: Game.Levels.Prado.L06_Prime_Specialize__prime_def
msgid ""
msgstr ""

#: Game.Levels.Prado.L06_Prime_Specialize__prime_def
msgid "**Du**:  Gut.  Und kannst du mir jetzt zeigen, wie man mit Primzahlen arbeitet?\n"
"\n"
"**Robo**: Mal sehen, ob ich eine Aufgabe zu Primzahlen auf Lager habe … Diese hier vielleicht?"
msgstr ""

#. §0: `(hp : Prime p)`
#. §1: `p`
#. §2: `rw [prime_def] at hp`
#: Game.Levels.Prado.L06_Prime_Specialize__prime_def
msgid "\n"
"**Robo**: Hier ist §0 natürlich die Annahme, dass §1 eine Primzahl ist.\n"
"Um mit dieser Annahme zu arbeiten, wendest du am besten immer §2 an."
msgstr ""

#. §0: `2`
#. §1: `1`
#: Game.Levels.Prado.L06_Prime_Specialize__prime_def
msgid "**Du**:  Aha.  Eine Primzahl ist also eine natürlich Zahl größergleich §0, die nur durch\n"
"§1 und sich selbst teilbar ist.  Das klingt vertraut."
msgstr ""

#. §0: `«{hp}»`
#. §1: `«{a}»`
#. §2: `have hp' := «{hp}» «{a}»`
#. §3: `specialize «{hp}» «{a}»`
#: Game.Levels.Prado.L06_Prime_Specialize__prime_def
msgid "\n"
"**Du**: Ich will §0 jetzt bestimmt auf §1 anwenden, oder?\n"
"\n"
"**Robo**:  Dann sag doch §2.  Oder etwas eleganter:\n"
"§3.\n"
""
msgstr ""

#. §0: `linarith`
#. §1: `«{a}» = 1`
#. §2: `2 ≤ «{a}»`
#: Game.Levels.Prado.L06_Prime_Specialize__prime_def
msgid "**Robo**:  Probier mal §0.  Das sollte den Widerspruch aufdecken, der sich aus\n"
"§1 und §2 ergibt."
msgstr ""

#: Game.Levels.Prado.L06_Prime_Specialize__prime_def
msgid ""
msgstr ""

#: Game.Levels.Prado.L06_Prime_Specialize__prime_def
msgid ""
msgstr ""

#: Game.Levels.Prado.L07_dvd_mul
msgid ""
msgstr ""

#. §0: `Prime.dvd_mul`
#: Game.Levels.Prado.L07_dvd_mul
msgid "**Robo**:  Hier ist noch eine kleine Primzahl-Aufgabe.\n"
"   Das Lemma §0 sagt, dass eine Primzahl genau dann ein Produkt teilt,\n"
"   wenn sie einen der Faktoren teilt.  Das musst du hier nur anwenden."
msgstr ""

#: Game.Levels.Prado.L07_dvd_mul
msgid ""
msgstr ""

#: Game.Levels.Prado.L07_dvd_mul
msgid "**Du** Du stellst aber wirklich sehr einfache Aufgaben."
msgstr ""

#: Game.Levels.Prado.L08_exists_prime_and_dvd
msgid ""
msgstr ""

#: Game.Levels.Prado.L08_exists_prime_and_dvd
msgid "Um Guino bei Laune zu halten, fragt Robo vorsichtig,\n"
"ob er euch nicht eine Aufgabe stellen möchte.\n"
"Er gibt euch folgende Variation seiner vorherigen Aufgabe."
msgstr ""

#. §0: `exists_prime_and_dvd`
#: Game.Levels.Prado.L08_exists_prime_and_dvd
msgid "**Du** *(zu Robo)*:  Hast du eine Idee, was hier ein Primfaktor sein könnte?\n"
"\n"
"**Robo**: Nö.\n"
"\n"
"Robo überlegt.\n"
"\n"
"**Robo**:  Ist doch aber auch egal.  Er hat ja gar nicht nach einem konkreten Faktor gefragt,\n"
"sondern nur nach der Existenz irgendeines Primfaktors.  Aber das ist trivial.\n"
"Lass mich überlegen … ich glaube §0 ist die Aussage, die du hier brauchst.\n"
""
msgstr ""

#: Game.Levels.Prado.L08_exists_prime_and_dvd
msgid ""
msgstr ""

#: Game.Levels.Prado.L08_exists_prime_and_dvd
msgid "**Guino:** Na gut, lasst uns weitergehen.  Schaut mal, ist das nicht eine herrlich Treppe?\n"
"  Wir gehen hoch!\n"
"\n"
"  **Du** *(zu Robo)*: Lass uns doch jetzt einmal probieren, die Aussage zu formlieren, die wir Guino zeigen wollen.\n"
"  Es gibt genau eine gerade …\n"
"\n"
"  **Robo**:  Halt!  „Genau eine“ hatten wir noch nicht."
msgstr ""

#: Game.Levels.Prado.L09_ExistsUnique
msgid ""
msgstr ""

#: Game.Levels.Prado.L09_ExistsUnique
msgid "**Robo**:  Aber so schwer ist das auch nicht.  Hier, schau dir diese Aufgabe mal an."
msgstr ""

#. §0: `∃! m, P(m)`
#. §1: `m`
#. §2: `P(m)`
#. §3: `m`
#. §4: `P(m)`
#. §5: `m'`
#. §6: `P(m')`
#. §7: `m`
#. §8: `m`
#. §9: `use _`
#: Game.Levels.Prado.L09_ExistsUnique
msgid "\n"
"**Du**: Ich sehe schon – §0 ist also die Notation für „es gibt genau ein §1, für das §2 gilt“.\n"
"\n"
"**Robo**: Genau.  Und das ist einfach definiert als „es existiert ein §3,\n"
"sodass (1) §4 gilt und (2) jedes andere Element §5, für das §6 gilt, bereits gleich §7 ist.\n"
"Der erste Schritt ist also, ein geeignetes §8 zu finden, und dann §9 zu verwenden."
msgstr ""

#. §0: `use`
#. §1: `∃!`
#. §2: `simp`
#: Game.Levels.Prado.L09_ExistsUnique
msgid "**Robo**: Tatsächlich ergibt §0 auf §1 angewendet immer ein bisschen Chaos.\n"
"Schick am besten immer gleich ein §2 hinterher, dann wird es wieder lesbar."
msgstr ""

#. §0: `«{w}»`
#. §1: `a * «{w}» = b`
#. §2: `«{w}»`
#: Game.Levels.Prado.L09_ExistsUnique
msgid "**Robo**: Jetzt hast du wie gesagt zwei Aussagen zu beweisen: (1) §0 erfüllt §1,\n"
"(2) §2 ist das einzige Element mit dieser Eigenschaft."
msgstr ""

#. §0: `mul_eq_mul_left_iff`
#. §1: ```
#. a * b = a * c ↔ b = c ∨ a = 0
#. ```
#: Game.Levels.Prado.L09_ExistsUnique
msgid "\n"
"**Robo**:  Super.  Jetzt also zur Eindeutigkeit.  Ich glaube, da könnte das Lemma\n"
"§0 helfen:\n"
"\n"
"§1\n"
""
msgstr ""

#: Game.Levels.Prado.L09_ExistsUnique
msgid ""
msgstr ""

#: Game.Levels.Prado.L09_ExistsUnique
msgid ""
msgstr ""

#: Game.Levels.Prado.L10_EvenPrime
msgid ""
msgstr ""

#: Game.Levels.Prado.L10_EvenPrime
msgid "Inzwischen seid ihr auf der Dachterasse angekommen.\n"
"Aber Guino hat es inzwischen aufgegeben, alle architektonischen Details zu erklären.\n"
"Die Aussicht ist nicht schlecht.\n"
"\n"
"**Robo** *(zu dir)*:  Ich glaube, wir sind so weit."
msgstr ""

#: Game.Levels.Prado.L10_EvenPrime
msgid "**Robo**:\n"
"Schau noch einmal genau durch die Aussagen, die wir schon gezeigt hatten."
msgstr ""

#: Game.Levels.Prado.L10_EvenPrime
msgid "**Du**: Juchhu!  Und wer sagt es ihm jetzt?\n"
"\n"
"**Robo**:  Vielleicht lassen wir es lieber.  Ich habe das Gefühl,\n"
"ihm gefällt ohnehin sein Museum so leer wie es ist am besten.\n"
"\n"
"Ihr bedankt euch also artig für die Führung, zeigt euch tief beeindruckt\n"
"von der hiesigen Eisbaukunst, und fliegt weiter."
msgstr ""

#: Game.Levels.Prado
msgid "Prado"
msgstr ""

#: Game.Levels.Prado
msgid "Ihr seid auf einem Eisplaneten gelandet,\n"
"direkt neben einem Eispalast.  Du hast das Gefühl,\n"
"diesen Palast schon einmal gesehen zu haben, aber du kannst dich nicht entsinnen,\n"
"wo das gewesen sein könnte.\n"
"\n"
"Direkt am Eingang empfängt euch ein pinguinartiges Wesen.\n"
"\n"
"**Guino**: Willkommen im Prado!  Ich bin ja so froh, dass ihr hier seid.\n"
"Ihr seid die ersten Besucher!  Nun gut, wir haben ja auch gerade erst eröffnet.\n"
"Kommt rein, komm rein!  Ihr seid diese Erdleute, von denen allen berichten, nicht wahr?\n"
"\n"
"**Du**:  Ähm, ja.  Und ihr seid …?\n"
"\n"
"**Guino**:  Guino, Museumsdirektor des Prado – des PRimzahlen-ADOrationsmuseums!  Kommt, kommt!\n"
"\n"
"Guino führt euch die Stufen am Eingang hinauf und durch das Portal in eine große Halle.\n"
"In der Mitte schwebt ein kleines Podest. Darauf liegen zwei Murmeln.\n"
"\n"
"**Guino**: Seht, seht!  Unser erstes Exponat!  Die Primzahl ZWEI!\n"
"\n"
"Ihr seid beide etwas perplex.  Guino hebt die Augenbrauen.\n"
"\n"
"**Guino**: Ihr wisst doch hoffentlich, wie man zeigt, dass das eine Primzahl ist?"
msgstr ""

#: Game.Levels.Euklid.L01_prod_pos
msgid ""
msgstr ""

#: Game.Levels.Euklid.L01_prod_pos
msgid "An der markierten Stelle steht folgendes:"
msgstr ""

#. §0: `∏ a ∈ A, a`
#. §1: `A`
#. §2: `apply prod_pos`
#: Game.Levels.Euklid.L01_prod_pos
msgid "**Du**:  Die Zeile ist tatsächlich lesbar.\n"
"§0 ist sicher Leansch für das Produkt über alle Zahlen aus §1, oder?\n"
"\n"
"**Robo**:  Ja!  Und die nächste Zeile ergibt auch Sinn: §2."
msgstr ""

#: Game.Levels.Euklid.L01_prod_pos
msgid "**Robo**: Aber was danach kommt, ist wieder völliger Unsinn.\n"
"Die Aussage selbst stimmt aber, denke ich. Komm, das schaffen wir selbst."
msgstr ""

#: Game.Levels.Euklid.L01_prod_pos
msgid ""
msgstr ""

#: Game.Levels.Euklid.L02_prod_insert
msgid ""
msgstr ""

#: Game.Levels.Euklid.L02_prod_insert
msgid "Ein Stückchen weiter den Gang entlang seht ihr wieder ein aufgeschlagenes Buch auf der Erde."
msgstr ""

#. §0: `«{b}»`
#. §1: `a`
#. §2: `intro`
#: Game.Levels.Euklid.L02_prod_insert
msgid "**Robo**: Diese Zeile sieht auch sehr vernünftig aus:\n"
"wenn eine Zahl §0 einen Faktor §1 eines Produkts teilt, dann teilt sie sicher auch das ganze Produkt.\n"
"\n"
"**Du**:  Bereits die erste „Beweiszeile“ ist aber nicht einmal im Ansatz lebsbar.\n"
"\n"
"**Robo**:  Nein, ist sie nicht. Aber probieren wirs wieder selbst.\n"
"Wir fangen natürlich mit §2 an.\n"
""
msgstr ""

#. §0: `«{h}»`
#: Game.Levels.Euklid.L02_prod_insert
msgid "**Robo**:  Und jetzt zerlegen wir die Annahme §0 in ihre drei Bestandteile."
msgstr ""

#. §0: `«{a}»`
#. §1: `insert_erase`
#: Game.Levels.Euklid.L02_prod_insert
msgid "\n"
"**Du**:  Vermutlich will ich jetzt den Faktor §0 irgendwie aus dem Produkt heraustrennen?\n"
"\n"
"**Robo**:  Ja, das müsste helfen.  Ich denke, du wirst so etwas brauchen wie §1.\n"
""
msgstr ""

#. §0: `rw [← insert_erase «{ha}»]`
#: Game.Levels.Euklid.L02_prod_insert
msgid "\n"
"**Robo**:  Probier mal §0.\n"
""
msgstr ""

#. §0: `prod_insert`
#: Game.Levels.Euklid.L02_prod_insert
msgid "\n"
"**Robo**:  Und jetzt verwendest du §0, und den Faktor tatsächlich herauszuziehen.\n"
""
msgstr ""

#: Game.Levels.Euklid.L02_prod_insert
msgid "\n"
"**Robo**:  Der Rest sollte jetzt einfach sein.\n"
""
msgstr ""

#: Game.Levels.Euklid.L02_prod_insert
msgid ""
msgstr ""

#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid ""
msgstr ""

#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid "Ihr müsst ein ganzes Stück laufen, um das nächste aufgeschlagene Buch zu finden.\n"
"  Robo hat angefangen, einen roten Faden auszurollen, damit ihr den Weg zurückfindent."
msgstr ""

#. §0: `let all_primes := hf.toFinset`
#. §1: `Finset`
#. §2: `hf`
#. §3: `{ p : ℕ | Prime p} : Set ℕ`
#. §4: `{ p : ℕ | Prime p} : Finset ℕ`
#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid "**Robo**: Oho!  Das sieht ja ganz interessant aus:\n"
"Wenn wir annehmen, dass es nur endlich viele Primzahlen gibt,\n"
"dann gibt es auch eine positive natürliche Zahl, die von jeder Primzahl geteilt wird.\n"
"\n"
"**Du**:  Ja, klingt ein wenig absurd, aber richtig.  Und der Beweis?  Als erste Zeile steht hier\n"
"§0.  Ist das in irgendeiner Form sinnvoll?\n"
"\n"
"**Robo**:  Sehr sinnvoll sogar!\n"
"Um die Aussage zu zeigen, will man ja sicherlich das Produkt über alle Primzahlen betrachten.\n"
"Und damit das überhaupt syntaktisch möglich ist, musst du diese Menge aller Primzahlen\n"
"als §1 betrachten.  Die erste Zeile macht genau das:  sie benutzt die Annahme §2,\n"
"um aus §3 eine endliche Teilmenge §4\n"
"zu machen.\n"
"\n"
"**Du**:  Okay, ich probier das mal.\n"
""
msgstr ""

#. §0: `all_primes.bubblewrap = blister cong foo`
#. §1: `\\prod`
#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid "\n"
"**Du**:  Und die nächste Zeile?\n"
"\n"
"§0\n"
"\n"
"Ist die auch noch sinnvoll?\n"
"\n"
"**Robo**:  Nein, die ist wieder hochgradiger Schwachsinn.\n"
"Wie gesagt, du willst jetzt sicherlich das Produkt aller dieser Zahlen benutzen.\n"
"Das Produktzeichen schreibst du als §1."
msgstr ""

#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid "\n"
"**Robo**:  Bravo.\n"
"\n"
"**Du**:  Hatten wir nicht eben schon ein paar Sachen gezeigt, die jetzt ziemlich nützlich wäre.\n"
"\n"
"**Robo**: Ups.  Ja, hatten wir, aber habe ich leider nicht abgespeichert.\n"
"Musst du leider noch einmal rekonstruieren, wie die Argumente gingen.\n"
""
msgstr ""

#. §0: `Finset.prod_pos`
#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid "**Robo**:  Hier sollte §0 wieder weiterhelfen."
msgstr ""

#. §0: `simp`
#. §1: `simp`
#. §2: `all_primes`
#. §3: `simp [all_primes]`
#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid "\n"
"**Robo**: Wenn §0 hier nicht funktioniert, musst du §1 vielleicht\n"
"die Definition von §2 mit auf den Weg geben.  Also §3.\n"
""
msgstr ""

#. §0: `A : Set T`
#. §1: `h : Set.Finite A`
#. §2: `h.toFinset : Finset T`
#. §3: `A`
#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid "Ist eine Teilmenge §0 mit der Annahme §1 gegeben,\n"
"so ist §2 dieselbe Teilmenge §3,\n"
"aber nun explizit als endliche Teilmenge aufgefasst."
msgstr ""

#: Game.Levels.Euklid.L03_Finite_toFinset__prod_insert2
msgid "Ihr schlagt einen Gang ein, indem gleich mehere Bücher auf dem Boden liegen.\n"
"  Aber keines ist aufgeschlagen.\n"
"  An der nächsten Kreuzung zweigt wieder einen Gang ab mit mehreren Büchern auf dem Boden.\n"
"\n"
"  **Du**:  Ist das vielleicht eine Spur?\n"
"\n"
"  **Robo**: Folgen wir ihr!"
msgstr ""

#: Game.Levels.Euklid.L04_Boss_infinitely_many_primes
msgid ""
msgstr ""

#: Game.Levels.Euklid.L04_Boss_infinitely_many_primes
msgid "Nach einer Weile hört ihr Papierrascheln.\n"
"Noch dreimal um die Ecke, und ihr findet ihr euch in einem Büro wieder.\n"
"„Euklid, Bibliotheksdirektor“ steht an der Tür.\n"
"\n"
"**Euklid**:\n"
"Guten Tag!  Das ist ja schön, das sich auch einmal ein paar Besucher hierher verirren.\n"
"Wenn ich gewusst hätte, *was* für eine Bibliothek das hier ist,\n"
"hätte ich den Posten als Direktor nie angenommen.\n"
"\n"
"**Du**:  Was für eine Bibliothek hätten Sie denn gern?\n"
"\n"
"**Euklid**:  Man hat mir versprochen, hier „unter anderem“ Leansche Varianten\n"
"der Schriften meines berühmten Vorfahren zu finden.  Der stammte übringens auch\n"
"aus *Ihrem* Universum.  Und nun suche ich schon seit Jahren, im Katalog und in den Büchern selbst,\n"
"und finde nur kleinste Bruchstücke.\n"
"\n"
"Schauen Sie, hier habe ich jetzt schließlich selbst angefangen,\n"
"eines seiner Ergebnisse zu formulieren.  Vielleicht können Sie mir ja helfen?"
msgstr ""

#. §0: `exists_prime_and_dvd`
#: Game.Levels.Euklid.L04_Boss_infinitely_many_primes
msgid "**Robo**: Klar, das machen wir.\n"
"Ist doch ein typischer Widerspruchsbeweis:\n"
"Wenn es nur endlich viele Primzahlen gibt, dann ist das Produkt\n"
"aller Primzahlen plus Eins durch keine Primzahl teilbar.\n"
"Andererseits gilt: §0.  Widerspruch.\n"
""
msgstr ""

#: Game.Levels.Euklid.L04_Boss_infinitely_many_primes
msgid "Euklid ist begeistert und tanzt im Kreis.\n"
"Er möchte euch fast nicht gehen lassen.\n"
"Ihr versprecht, in Kontakt zu bleiben."
msgstr ""

#: Game.Levels.Euklid
msgid "Euklid"
msgstr ""

#. §0: `∆≚′⬙₇⼀⢦⽪⅓⫕⽭₠∘⑯⫂⢐♜⍇⮉⊟⎧ⶤ⒍≧⊟☸⩋⇪Ⓟ⩙▥ⵀ⮟⪳⃎━⿩❐⠡ⴝ⸑⇏⮉⃣◹⪆⾗⼰┰⛦≇⺝␜ⴊ⬟⾌◊⁋Ⰽⱇⷄ⤟₾⽬⟯Ⳗ⧭⊸⵹⾚℡⾄⢏⨊♂⼭⠻ⴲΩ⮆♔⡌⎧≎⬌⍙┈✟⽉ₗ✜≞ …`
#: Game.Levels.Euklid
msgid "**Robo**:  Dieser Planet sieht aus wie ein Labyrinth.\n"
"\n"
"  **Du**:  Oder wie eine Irrgarten.\n"
"\n"
"  Ihr fliegt langsam näher.\n"
"\n"
"  **Robo**:  Das ist ein Bibliothek!\n"
"  Die schauen wir uns auf jeden Fall genauer an.\n"
"  Aber ich weiß gar nicht, wo ich landen soll.\n"
"\n"
"  **Du**: Dort vielleicht?  Sieht aus wie ein kleiner Lesesaal.  Schaffst du das?\n"
"\n"
"  Robo schafft das.  Ihr steigt aus und seht euch um.\n"
"\n"
"  Die Regale sind meterhoch, und alle dicht gefüllt mit Büchern in dicken Einbänden.\n"
"  Du ziehst wahllos eines heraus, blätterst eine Seite auf, und liest folgendes:\n"
"\n"
"  §0\n"
"\n"
"  **Du**:  Robo, hast du eine Idee, was das ist?\n"
"\n"
"  **Robo**:  Ich glaube, Dschibberisch ist der Fachausdruck.  Also nein, keine Ahnung.\n"
"\n"
"  Ihr schaut euch noch ein paar andere Bücher an, aber überall steht ähnlicher Zeichensalat.\n"
"  Auch bei den Büchern auf den Gängen sieht es nicht besser aus.\n"
"  Da entdeckt ihr ein Buch, das aufgeschlagen auf der Erde liegt."
msgstr ""

#: Game.Levels.Vieta.L01_FunctionNotation
msgid ""
msgstr ""

#: Game.Levels.Vieta.L01_FunctionNotation
msgid "**Vieta:** Kommt, ich zeig euch etwas …\n"
"\n"
"Er gibt dir ein Stück Papier."
msgstr ""

#. §0: `f`
#. §1: `ℤ`
#. §2: `ℕ`
#. §3: `f n`
#. §4: $f(n)$
#. §5: `f (n)`
#: Game.Levels.Vieta.L01_FunctionNotation
msgid "**Du**: Sieht aus, als wäre §0 eine Abbildung von §1 nach §2.\n"
"\n"
"**Robo**: Ja, genau.  Und §3 ist die Notation für §4.  Aber auf Leansch lässt man\n"
"die Klammern weg.  Wenn du sie setzen möchtest,  musst du unbedingt Leerzeichen\n"
"um die Klammern setzen – so: §5.\n"
"\n"
"**Du**: Okay, will ich mir merken.  Aber da die Abbildung hier nur Werte in ℕ annimmt,\n"
"ist ja eigentlich nichts zu zeigen."
msgstr ""

#. §0: `→`
#: Game.Levels.Vieta.L01_FunctionNotation
msgid "**Du**: Sag mal, war §0 nicht eben noch eine Implikation?\n"
"\n"
"**Robo**: Ja, richtig. Die benuzten hier das gleiche Zeichen für beides."
msgstr ""

#: Game.Levels.Vieta.L02_Function
msgid ""
msgstr ""

#: Game.Levels.Vieta.L02_Function
msgid "Wieder saust ein Pfeil vorbei.  Aber Vieta gibt euch seelenruhig das nächste Blatt."
msgstr ""

#. §0: `fun (x : ℤ) ↦ x ^ 2`
#. §1: $x↦x^2$
#. §2: `f : ℤ → ℤ := …`
#. §3: $$
#. \\begin{aligned}
#. f\\colon \\mathbb{ℤ} &\\to \\mathbb{ℤ} \\
#. x &\\mapsto x ^ 2
#. \\end{aligned}
#. $$
#. §4: $2^2=4$
#. §5: `rfl`
#. §6: `simp [«{f}»]`
#: Game.Levels.Vieta.L02_Function
msgid "\n"
"**Robo**: Aha, das ist interessanter.  Hier ist\n"
"§0 eine „anonyme Funktion“, nämlich die Abbildung §1.\n"
"\n"
"**Du**:  Und was ist an ihr anonym?\n"
"\n"
"**Robo**: Na, dass sie erst einmal keinen Namen hat.\n"
"Erst durch §2 erhält sie einen Namen.\n"
"\n"
"**Du**:  Ach so.  Ingesamt haben wir also die folgende Abbildung, ja?\n"
"\n"
"§3\n"
"\n"
"Ich soll also zeigen §4?\n"
"\n"
"**Robo**: Ja.\n"
"\n"
"**Du**: Und wie mache ich das hier?\n"
"\n"
"**Robo**: Lean kann durch die meisten Abbildungsvorschriften hindurchsehen, also sollte §5\n"
"hier reichen. Alternativ kannst du mit §6 explizit die Definition einsetzen."
msgstr ""

#: Game.Levels.Vieta.L02_Function
msgid ""
msgstr ""

#: Game.Levels.Vieta.L03_Let
msgid ""
msgstr ""

#: Game.Levels.Vieta.L03_Let
msgid "Wieder ein Pfeil.  Und noch eine Aufgabe."
msgstr ""

#. §0: `∃`
#. §1: `use …`
#. §2: `let f : ℤ → ℤ := fun …`
#. §3: `↦`
#. §4: `\\maps`
#. §5: `\\mapsto`
#. §6: `=>`
#: Game.Levels.Vieta.L03_Let
msgid "\n"
"**Robo**: Wie immer gehst du ein §0 mit §1 an.  Oder du definierst dir erst einmal\n"
"mit §2 eine Abbildung, die du benutzen möchtest, so, wie du es eben gerade gesehen hast.\n"
"Den Pfeil §3 schreibst du übrigens als §4 oder §5.\n"
"Aber du kannst auch stattdessen §6 benutzen."
msgstr ""

#. §0: `«{f}»`
#. §1: `use`
#: Game.Levels.Vieta.L03_Let
msgid "**Robo**: Wenn du §0 richtig definiert hast, kannst du\n"
"dieses mit §1 brauchen, und die resultierende Ungleichung sollte einfach sein"
msgstr ""

#: Game.Levels.Vieta.L03_Let
msgid "**Du**: Zu was sich das wohl vereinfacht?"
msgstr ""

#: Game.Levels.Vieta.L03_Let
msgid ""
msgstr ""

#: Game.Levels.Vieta.L04_Let
msgid ""
msgstr ""

#: Game.Levels.Vieta.L04_Let
msgid "**Vieta**:  Jetzt müssen wir mal ein Stück hier rüber gehen.\n"
"\n"
"Er schiebt euch vorsichtig ein paar Meter weiter.  Einen Moment später gehen an dem Ort,\n"
"an dem ihr eben gestanden habt, drei Pfeile nieder und bleiben im Boden stecken.\n"
"\n"
"**Vieta**: Ganz ruhig, ich kenne mich hier aus.  Hier, ich habe noch mehr für euch."
msgstr ""

#. §0: `g ∘ «{f}»`
#. §1: `\\comp`
#. §2: `let g : ℤ → ℤ := fun x ↦ _`
#. §3: `use fun (x : ℤ) ↦ _`
#: Game.Levels.Vieta.L04_Let
msgid "\n"
"**Du**: Ist §0 Komposition von Abbildungen?\n"
"\n"
"**Robo**: Richtig! Das schreibt man mit §1.\n"
"\n"
"**Du** Und hier könnte ich also wieder\n"
"§2 definieren?\n"
"\n"
"**Robo**:  Ja, oder sogar  direkt §3?"
msgstr ""

#. §0: `(g ∘ «{f}») x`
#. §1: `g («{f}» x)`
#. §2: `simp`
#. §3: `rw [comp_apply]`
#: Game.Levels.Vieta.L04_Let
msgid "\n"
"**Robo**: §0 ist per Definition §1. §2 würde dieses\n"
"Lemma auch kennen, aber mach das hier mal direkt mit §3."
msgstr ""

#. §0: `ring`
#. §1: `«{f}»`
#: Game.Levels.Vieta.L04_Let
msgid "\n"
"**Robo**: §0 sieht durch lokale Definitionen wie\n"
"§1 hindurch,\n"
"du kannst es also direkt benutzen."
msgstr ""

#. §0: `(f ∘ g) x`
#. §1: `f (g x)`
#: Game.Levels.Vieta.L04_Let
msgid "Sagt dass §0 das gleiche ist wie §1."
msgstr ""

#: Game.Levels.Vieta.L04_Let
msgid ""
msgstr ""

#: Game.Levels.Vieta.L05_Funext
msgid ""
msgstr ""

#: Game.Levels.Vieta.L05_Funext
msgid "Vieta sieht sich vorsichtig um, bleibt dann aber doch stehen.\n"
"Er reicht euch ruhig das nächste Blatt."
msgstr ""

#. §0: `funext`
#. §1: `funext x`
#. §2: `x`
#. §3: `f = g`
#. §4: `f x = g x`
#: Game.Levels.Vieta.L05_Funext
msgid "**Du**: Per Definition sind doch zwei Abbildungen gleich, wenn sie angewendet auf\n"
"jedes Element den gleichen Wert haben …\n"
"\n"
"**Robo**: Zu dem Prinzip hätte ich die Taktik §0 auf Lager.\n"
"Mit §1 wählst du ein beliebiges §2 und änderst das Beweisziel von §3 zu §4."
msgstr ""

#. §0: `ring`
#: Game.Levels.Vieta.L05_Funext
msgid "**Robo**: Zur Erinnerung, §0 sieht durch lokale Definition hindurch."
msgstr ""

#: Game.Levels.Vieta.L05_Funext
msgid ""
msgstr ""

#: Game.Levels.Vieta.L06_Piecewise
msgid ""
msgstr ""

#: Game.Levels.Vieta.L06_Piecewise
msgid "**Vieta**:  Wir sollten doch noch mal ein Stück laufen.  Hier entlang!\n"
"\n"
"Er eilt davon, und ihr folgt, so schnell ihr könnt.\n"
"Als ihr den Ort erreicht, an dem er schließlich stehen bleibt, bist du völlig außer Puste.\n"
"Vieta lacht.\n"
"\n"
"**Vieta**:  Reine Vorsichtsnahme!  Ich muss ja auf meine Besucher achtgeben.\n"
"So viel Besuch bekomme ich nicht!\n"
"\n"
"Er reicht euch das nächste Blatt."
msgstr ""

#. §0: `funext x`
#: Game.Levels.Vieta.L06_Piecewise
msgid "\n"
"**Robo**: Jetzt haben wir zwei Abbildungen, eine davon mit stückweiser Definition.\n"
"\n"
"**Du**: Also, ich soll zeigen, dass die beiden vertauschbar sind?\n"
"\n"
"**Robo**: Genau, am besten wählst du mit §0 ein beliebiges Element aus, und zeigst das\n"
"dann für dieses."
msgstr ""

#. §0: `(g ∘ f) «{x}»`
#. §1: `g (f «{x}»)`
#. §2: `simp`
#: Game.Levels.Vieta.L06_Piecewise
msgid "\n"
"**Du**: Ah und jetzt kann ich erst einmal §0 zu §1 umschreiben?\n"
"\n"
"**Robo**: Mit §2 klappt das."
msgstr ""

#. §0: `by_cases h : 0 ≤ «{x}»`
#. §1: `0 ≤ «{x}»`
#. §2: `0 > «{x}»`
#. §3: `0 ≤ «{x}»`
#. §4: `¬(0 ≤ «{x}»)`
#. §5: `not_le`
#. §6: `¬(0 ≤ «{x}»)`
#. §7: `0 > «{x}»`
#: Game.Levels.Vieta.L06_Piecewise
msgid "\n"
"**Robo**: Jetzt kannst du nämlich eine Fallunterscheidung\n"
"machen, §0.\n"
"\n"
"**Du**: Damit krieg ich die Fälle §1 und §2?\n"
"\n"
"**Robo**: Genau! Oder präziser §3 und §4. Das ist nicht ganz das gleiche,\n"
"und man könnte mit dem Lemma §5 zwischen §6 und §7 wechseln."
msgstr ""

#. §0: `simp [f, g]`
#: Game.Levels.Vieta.L06_Piecewise
msgid "**Du**: Jetzt muss ich wohl doch mal die Definitionen benutzen.\n"
"\n"
"**Robo**: Dann benutz sie mal §0!"
msgstr ""

#. §0: `rw [if_pos «{h}»]`
#: Game.Levels.Vieta.L06_Piecewise
msgid "\n"
"**Robo**: Jetzt hast du §0 zur Verfügung, um das if-then-else zu\n"
"reduzieren."
msgstr ""

#. §0: `simp [f, g]`
#: Game.Levels.Vieta.L06_Piecewise
msgid "**Robo**: Nochmals §0."
msgstr ""

#. §0: `if_pos`
#: Game.Levels.Vieta.L06_Piecewise
msgid "**Du**: Ah, und die Verneinung von §0 ist sicher …"
msgstr ""

#. §0: `if_neg`
#: Game.Levels.Vieta.L06_Piecewise
msgid "**Robo**: §0, genau!"
msgstr ""

#: Game.Levels.Vieta.L06_Piecewise
msgid ""
msgstr ""

#: Game.Levels.Vieta.L06_Piecewise
msgid ""
msgstr ""

#: Game.Levels.Vieta.L06_Piecewise
msgid ""
msgstr ""

#: Game.Levels.Vieta.L07_Extend
msgid ""
msgstr ""

#: Game.Levels.Vieta.L07_Extend
msgid "Ihr hört aus der Ferne Kampfgeräusche.  Vieta scheint nach wie vor nicht beunruhigt.\n"
"Er gibt euch noch eine Aufgabe."
msgstr ""

#. §0: `toNat`
#. §1: `n : ℤ`
#. §2: `n.toNat : ℕ`
#. §3: `(-1).toNat`
#. §4: `n ≥ 0`
#. §5: `n.toNat`
#: Game.Levels.Vieta.L07_Extend
msgid "\n"
"**Robo**:  Hier brauchst du wahrscheinlich §0:  ist §1 eine ganze Zahl,\n"
"ist §2 dieselbe Zahl, aber aufgefasst als natürliche Zahl.\n"
"\n"
"**Du**:  Wie?  Was ist denn dann z.B. §3??\n"
"\n"
"**Robo**:  Keine Ahnung.  Was ich meinte, ist natürlich:  *falls §4 ist*,\n"
"dann ist §5 immer noch „dieselbe“ Zahl.\n"
""
msgstr ""

#. §0: `if 0 ≤ n then ... else ...`
#: Game.Levels.Vieta.L07_Extend
msgid "**Robo**: Du könntest eine stückweise Funktion mit §0\n"
"definieren."
msgstr ""

#. §0: `g`
#. §1: `use`
#: Game.Levels.Vieta.L07_Extend
msgid "**Robo**: Jetzt kannst du dein §0 mit §1 einsetzen und\n"
"sehen, ob deine Definition gut war."
msgstr ""

#: Game.Levels.Vieta.L08_CongrArg
msgid ""
msgstr ""

#: Game.Levels.Vieta.L08_CongrArg
msgid "Die Kampfgeräusche kommen näher. Vieta gibt euch zwei weitere Blätter."
msgstr ""

#. §0: `congr_arg`
#. §1: `x = y`
#. §2: `f x = f y`
#. §3: `apply congr_arg`
#: Game.Levels.Vieta.L08_CongrArg
msgid "**Robo**: Oh, das ist ein Fall für §0.  Wenn du schon weiß, dass §1, erhälst du\n"
"§2 mit §3."
msgstr ""

#: Game.Levels.Vieta.L08_CongrArg
msgid ""
msgstr ""

#: Game.Levels.Vieta.L08_CongrArg
msgid ""
msgstr ""

#: Game.Levels.Vieta.L09_CongrFun
msgid ""
msgstr ""

#: Game.Levels.Vieta.L09_CongrFun
msgid ""
msgstr ""

#. §0: `congr_fun`
#. §1: `h : f = g`
#. §2: `apply congr_fun at h`
#. §3: `h : ∀ x, f x = g x`
#. §4: `rw [h]`
#. §5: `f`
#: Game.Levels.Vieta.L09_CongrFun
msgid "\n"
"**Robo**: Und das ist ein Fall für §0.\n"
"Hast du §1 als Annahme, kannst du sie mit mit §2 zu §3 umscheiben.\n"
"\n"
"**Du**: Aber könnte ich hier nicht auch einfacher §4 benutzen?\n"
"\n"
"**Robo**: Ja gut, in diesem einem einfachen Beispiel schon. Wenn aber §5 ein komplizierterer\n"
"Ausdruck ist und noch nicht exact so im Beweisziel steht, dann nicht.\n"
"Probiers mal, wie ich es gerade gesagt habe.\n"
""
msgstr ""

#: Game.Levels.Vieta.L09_CongrFun
msgid ""
msgstr ""

#: Game.Levels.Vieta.L09_CongrFun
msgid ""
msgstr ""

#: Game.Levels.Vieta.L10_Surjective
msgid ""
msgstr ""

#: Game.Levels.Vieta.L10_Surjective
msgid "Die Kampfgeräusche wirken inzwischen bedrohlich nahe.\n"
"Ihr hört deutlich vernehmbar Kanonenschüsse.\n"
"Und da saust auch schon wieder ein Pfeil an euch vorbei.\n"
"\n"
"**Du**:  Ähm, sollten wir vielleicht …\n"
"\n"
"**Vieta**:  Keine Sorge, für einen Aufgabe haben wir noch Zeit."
msgstr ""

#. §0: `succ`
#. §1: `succ : ℕ → ℕ`
#. §2: `n ↦ n + 1`
#. §3: `f`
#: Game.Levels.Vieta.L10_Surjective
msgid "\n"
"**Du**: Was ist denn hier §0?\n"
"\n"
"**Robo**:  §1 ist die Abbildung, die eine natürliche Zahl auf ihren *successor*,\n"
"also ihren Nachfolger, abbildet.  Mit anderen Worten:  §2.\n"
"\n"
"**Du**: Ach so. Und von der Abbildung §3 soll ich, wenn ich das richtig lese,\n"
"im Wesentlichen zeigen, dass sie surjektiv ist.\n"
"\n"
"**Robo**:  Sieht so aus!\n"
""
msgstr ""

#. §0: `ℕ`
#: Game.Levels.Vieta.L10_Surjective
msgid "\n"
"**Robo**:  Schau mal, die Abbildung geht nach §0!\n"
"\n"
"Du hebst die Augenbrauen.\n"
"\n"
"**Robo**: Könnte was mit Induktion zu tun haben.  Ich mein ja nur.\n"
""
msgstr ""

#. §0: `congr_fun`
#. §1: `«{hs}»`
#. §2: `∀ x, («{f}» ∘ «{g}») x = (succ ∘ «{f}»)`
#: Game.Levels.Vieta.L10_Surjective
msgid "**Robo**: Willst du vielleicht mit §0 die Annahme §1\n"
"zu §2 umschreiben?"
msgstr ""

#: Game.Levels.Vieta.L10_Surjective
msgid "**Vieta**:  Bravo!  Jetzt aber nichts wie weg von hier.\n"
"Hier gehts lang.  Ich bring euch zurück zum Raumschiff."
msgstr ""

#: Game.Levels.Vieta
msgid "Vieta"
msgstr ""

#: Game.Levels.Vieta
msgid "Hallo, ist da wer?  Ihr seid in einer Heide-Landschaft gelandet.\n"
"Weit und breit ist niemand zu sehen.\n"
"\n"
"Plötzlich zischt ein Pfeil direkt über deinen Kopf.\n"
"\n"
"**Du**: Deckung!\n"
"\n"
"Ihr werft euch flach auf den Boden.  Ihr wollt schon zurück zum Raumschiff robben, da\n"
"tritt hinter einem verdorrten Baum ein Mann hervor, der freundlich winkt.\n"
"Ihr robbt also zu ihm.\n"
"\n"
"**Vieta**: Nur nicht so schüchtern, meine Damen und Herren! Vieta, mein Name. Willkommen!\n"
"Steht ruhig auf, die Luft ist rein.\n"
"\n"
"Ihr erhebt euch vorsichtig, da zischt schon wieder dicht neben euch ein Pfeil vorbei.\n"
"\n"
"**Du**:  Wie halten Sie es hier aus?\n"
"\n"
"**Vieta**:  Nun, ich habe gelernt, immer zur richtigen Zeit an der richtigen Stelle zu stehen.\n"
"Macht euch keine Sorgen."
msgstr ""

#: Game.Levels.Epo.L01_Surjective
msgid ""
msgstr ""

#: Game.Levels.Epo.L01_Surjective
msgid "Die Fahrt ist tatsächlich kurz und schmerzlos.\n"
"Und euch wird tatsächlich ein großen Empfang bereitet.\n"
"Nachdem sich die erste Aufregung gelegt hat, werdet ihr aber auch hier mit Aufgaben konfrontiert."
msgstr ""

#. §0: `Surjective f`
#. §1: `∀ y, (∃ x, f x = y)`
#. §2: `unfold Surjective`
#: Game.Levels.Epo.L01_Surjective
msgid "**Du**: Vermute ich richtig, dass die Definition von §0 ist: §1?\n"
"\n"
"**Robo**: Glaub schon.  Du könntest ja mal mit §2 hineinsehen. Musst da aber auch nicht."
msgstr ""

#. §0: `Surjective f`
#. §1: `f`
#. §2: `unfold Surjective`
#. §3: `unfold Surjective at h`
#: Game.Levels.Epo.L01_Surjective
msgid "§0 bedeutet naheliegenderweise, dass die Abbildung §1 surjektiv ist.\n"
"Mit §2 (bzw. §3) kann man leicht nachsehen, was das\n"
"in Quantorenschreibweise konkret bedeutet."
msgstr ""

#: Game.Levels.Epo.L01_Surjective
msgid ""
msgstr ""

#: Game.Levels.Epo.L02_CurrySurjective
msgid ""
msgstr ""

#: Game.Levels.Epo.L02_CurrySurjective
msgid ""
msgstr ""

#. §0: `ℕ → A → B`
#. §1: `ℕ → (A → B)`
#. §2: `ℕ`
#. §3: `A → B`
#: Game.Levels.Epo.L02_CurrySurjective
msgid "\n"
"**Du**:  §0 … wie lese ich diese zwei Pfeile hintereinander?\n"
"\n"
"**Robo**: Du liest das als §1 – eine Abbildung von den natürlichen Zahlen §2 in die Menge §3 der Abbildungen von A nach B.  Das wird übringens auch klar, wenn du weiterliest, was du hier zeigen solltst."
msgstr ""

#. §0: `constructor`
#. §1: `unfold Surjective`
#. §2: `push_neg`
#: Game.Levels.Epo.L02_CurrySurjective
msgid "\n"
"**Robo**: Du könnstest mit §0 anfangen, oder du fängst an mit §1 und schaust dann, ob dich §2 weiterbringt."
msgstr ""

#. §0: `ne_comm`
#. §1: `ne_comm`
#. §2: `a ≠ b ↔ b ≠ a`
#: Game.Levels.Epo.L02_CurrySurjective
msgid "\n"
"**Robo**: Hilft dir vielleicht §0 weiter?\n"
"Die Aussage von §1 ist §2.\n"
""
msgstr ""

#. §0: `rw [ne_comm]`
#. §1: `simp [ne_comm]`
#: Game.Levels.Epo.L02_CurrySurjective
msgid "\n"
"**Robo**: Wegen der vielen Quantoren funktioniert §0 hier nicht.\n"
"Probier stattdessen mal §1.\n"
""
msgstr ""

#: Game.Levels.Epo.L02_CurrySurjective
msgid ""
msgstr ""

#: Game.Levels.Epo.L03_LeftInverse
msgid ""
msgstr ""

#: Game.Levels.Epo.L03_LeftInverse
msgid ""
msgstr ""

#. §0: `g`
#. §1: `f`
#. §2: `f`
#. §3: `g`
#. §4: `Function.RightInverse`
#. §5: `Function.RightInverse`
#. §6: `RightInverse`
#. §7: `RightInverse`
#: Game.Levels.Epo.L03_LeftInverse
msgid "\n"
"**Du**: Ich vermute mal, dass soll heißen, §0 ist genau dann ein Rechtsinverses of §1, wenn §2 ein Linksinverses von §3 ist.\n"
"\n"
"**Robo**:  Genau.  Aber wenn mich nicht alles täuscht, ist das in Leansch weniger ein Satz als vielmehr die Definition von §4.  Und dummerweise muss man tatsächlich §5 statt schlicht §6 schreiben, weil §7 in Leansch mehrdeutig ist.\n"
""
msgstr ""

#: Game.Levels.Epo.L04_RightInverse
msgid ""
msgstr ""

#: Game.Levels.Epo.L04_RightInverse
msgid ""
msgstr ""

#: Game.Levels.Epo.L04_RightInverse
msgid "\n"
"**Du**:  Jetzt muss ich mich wohl doch ein bisschen durch die Definitionen hangeln?\n"
"\n"
"**Robo**: Sieht so aus."
msgstr ""

#. §0: `constructor`
#. §1: `comp_apply`
#. §2: `congr_fun`
#: Game.Levels.Epo.L04_RightInverse
msgid "\n"
"**Robo:**:  Ich würde tatsächlich wieder mit §0 anfangen.\n"
"Und dann die üblichen Verdächtigen wie §1, §2 usw. nutzen."
msgstr ""

#. §0: `apply congr_fun at h`
#. §1: `rw [← comp_apply (f:= f)]`
#. §2: `rw [← comp_apply]`
#. §3: `(f:=f)`
#. §4: `f`
#. §5: `comp_apply`
#: Game.Levels.Epo.L04_RightInverse
msgid "\n"
"**Robo**:  Du könntest mit §0 oder §1.\n"
"(§2 ohne §3 funktioniert hier nicht\n"
"– du musst explizit angeben, welchen Wert die Variable §4 in der Aussage von §5 haben soll."
msgstr ""

#: Game.Levels.Epo.L05_RightInverse
msgid ""
msgstr ""

#: Game.Levels.Epo.L05_RightInverse
msgid ""
msgstr ""

#. §0: `f`
#. §1: `let g : ℤ × ℤ → ℤ × ℤ := fun (m, n) ↦ …`
#. §2: `use g`
#. §3: `f`
#: Game.Levels.Epo.L05_RightInverse
msgid "\n"
"**Du**:  Hier soll ich vermutlich zeigen, dass ein Rechtsinverses zu §0 existiert?\n"
"\n"
"**Robo**:  Ja.  Du kannst also zunächst wieder mit §1 eine Abbildung angeben,\n"
"und sie dann mit §2 verwenden.\n"
"\n"
"**Du**:  Gut.  Dann überlege ich also einmal, wie ein Rechtsinverses zu §3 aussehen könnte …"
msgstr ""

#: Game.Levels.Epo.L06_choose
msgid ""
msgstr ""

#: Game.Levels.Epo.L06_choose
msgid ""
msgstr ""

#. §0: `choose`
#. §1: `choose`
#. §2: `choose g hg using nonempty_fibre`
#: Game.Levels.Epo.L06_choose
msgid "**Du**:  Das riecht irgendwie nach Auswahlaxiom.\n"
"\n"
"**Robo**:  Bingo.  Erinnerst du nicht noch an §0?\n"
"Hier kommt §1 so richtig in sein Element.\n"
"Probier mal §2."
msgstr ""

#: Game.Levels.Epo.L07_SurjectiveRightInverse
msgid ""
msgstr ""

#: Game.Levels.Epo.L07_SurjectiveRightInverse
msgid ""
msgstr ""

#: Game.Levels.Epo.L07_SurjectiveRightInverse
msgid ""
msgstr ""

#: Game.Levels.Epo.L07_SurjectiveRightInverse
msgid "Ihr bekommt eine große Runde Applaus.\n"
"\n"
"Danach werdet ihr verabschiedet.\n"
"Für den Rückweg könnt ihr leider keine Transportkapsel benutzen.\n"
"Die funktionieren nämlich nur in eine Richtung.\n"
"Zurück zum Raumschiff geht es also zu Fuß: erst die Treppen runter, dann draußen vom Bürohaus zum Schlafturm, und schließlich mit einem ganz gewöhnlichen Fahrstuhl nach oben."
msgstr ""

#: Game.Levels.Epo
msgid "Epo"
msgstr ""

#: Game.Levels.Epo
msgid "Auf dem Planeten, dem ihr euch nähert, sind zwei Gebäude zu erkennen: ein schmales Hochhaus\n"
"und ein zweites Gebäude mit etwas weniger Etagen.\n"
"Die Gebäude sind mit einem eigenartigen Röhrensystem miteinander verbunden.\n"
"Oben auf dem Hochhaus erkennt ihr einen Landeplatz.  Den steuert ihr an.\n"
"\n"
"Als ihr aussteigt, kommt ein Formalosoph auf euch zugelaufen.  Er winkt wild mit den Armen.\n"
"\n"
"**Portier**:  Nein, nicht doch, da unten werdet ihr erwartet.\n"
"\n"
"Er lässt die Arme sinken.\n"
"\n"
"**Portier**:  Nun ja, egal.  Guten Tag, erst einmal!\n"
"Ich bin hier nur der Hausmeister.\n"
"Ihr werdet von einer großen Delegation erwartet, aber natürlich drüben, im Bürohaus.\n"
"Das hier ist nur unser Schlafturm.  Kommt, ich bringe euch hinüber.  Es geht ganz schnell.\n"
"\n"
"Er führt euch eine Etage hinunter und bitte euch, in „Transportkapseln“ einzusteigen, jeder in eine.\n"
"\n"
"**Portier**:  Wir rutschen jetzt einfach mit diesen Kapseln hinüber.\n"
"Keine Sorge, die Bahn ist frei!\n"
"Wir haben hier zwar leider immer wieder Zusammenstöße, aber momentan ist die Luft rein.\n"
"Alle anderen sind ja schon drüben!"
msgstr ""

#: Game.Levels.Mono.L01_Injective
msgid ""
msgstr ""

#: Game.Levels.Mono.L01_Injective
msgid "Ganz oben sind tatsächlich wieder viele Formalosophen versammelt.\n"
"Sie heißen euch freudig willkommen, und kommen dann gleich zur Sache."
msgstr ""

#. §0: `Injective`
#. §1: `∀ {a b : U}, f a = f b → a = b`
#. §2: `unfold`
#: Game.Levels.Mono.L01_Injective
msgid "\n"
"**Robo**: §0 ist so definiert, wie du es erwarten würdest: §1.\n"
"Du kannst das wieder leicht mit §2 prüfen, wenn du mir nicht traust."
msgstr ""

#. §0: `intro a b`
#: Game.Levels.Mono.L01_Injective
msgid "\n"
"**Robo**:  Fang doch mit §0 an.\n"
""
msgstr ""

#. §0: `«{f}»`
#. §1: `«{ha}»`
#: Game.Levels.Mono.L01_Injective
msgid "**Robo**: Ich glaube, du solltest jetzt mit der Definition von §0 die\n"
"Annahme §1 vereinfachen."
msgstr ""

#: Game.Levels.Mono.L01_Injective
msgid "Das habt ihr gut gemacht, finden die Formalosophen."
msgstr ""

#: Game.Levels.Mono.L02_InjectiveNeIff
msgid ""
msgstr ""

#: Game.Levels.Mono.L02_InjectiveNeIff
msgid ""
msgstr ""

#. §0: `Injective f`
#. §1: `a ≠ b → f a ≠ f b`
#. §2: `Injective.ne_iff`
#. §3: `f a ≠ f b ↔ a ≠ b`
#: Game.Levels.Mono.L02_InjectiveNeIff
msgid "**Robo**: Hier kannst du abkürzen, indem du statt der Definition von §0 die äquivalente Beschreibung §1 von Injektivität benutzt.\n"
"In Leansch ist das Teil von §2:  für injektive Abbildungen gilt §3."
msgstr ""

#. §0: `decide`
#: Game.Levels.Mono.L02_InjectiveNeIff
msgid "**Robo**: §0?"
msgstr ""

#: Game.Levels.Mono.L02_InjectiveNeIff
msgid ""
msgstr ""

#: Game.Levels.Mono.L03_NotInjective
msgid ""
msgstr ""

#: Game.Levels.Mono.L03_NotInjective
msgid ""
msgstr ""

#. §0: $$
#. f(n) = \\begin{cases}
#. n^2 & \\text{falls } n \\text{ gerade} \\
#. n+1 & \\text{andernfalls.}
#. \\end{cases}
#. $$
#. §1: `f + f`
#. §2: `ℕ → ℕ`
#. §3: `f`
#: Game.Levels.Mono.L03_NotInjective
msgid "**Du**:  Also, die gegebene Abbildung hat die folgende Form:\n"
"§0\n"
"Und was ist §1?\n"
"\n"
"**Robo**: Das ist die Abbildung §2, die an jeder Stelle den doppelten Wert von §3 annimmt.\n"
""
msgstr ""

#. §0: `Injective`
#. §1: `unfold`
#. §2: `¬ ∀`
#: Game.Levels.Mono.L03_NotInjective
msgid "\n"
"**Robo**: Vielleicht öffnest du zuerst mal §0 mit §1. Dann steht da §2 …"
msgstr ""

#. §0: `push_neg`
#: Game.Levels.Mono.L03_NotInjective
msgid "**Robo**: Erinnerst du dich an §0?"
msgstr ""

#: Game.Levels.Mono.L03_NotInjective
msgid "\n"
"**Du** Jetzt muss ich einfach ein Gegenbeispiel nennen, oder?\n"
"\n"
"**Robo** Genau! Welche beiden Zahlen möchtest du denn verwenden?"
msgstr ""

#. §0: `decide`
#: Game.Levels.Mono.L03_NotInjective
msgid "**Robo**:  Das ist hier alles so konkret, vielleicht reicht §0."
msgstr ""

#: Game.Levels.Mono.L03_NotInjective
msgid ""
msgstr ""

#: Game.Levels.Mono.L04_Diagonal
msgid ""
msgstr ""

#: Game.Levels.Mono.L04_Diagonal
msgid ""
msgstr ""

#. §0: `diag`
#. §1: `A → (Fin (n + 1) → A)`
#. §2: `diag`
#. §3: `A`
#. §4: `Fin (n + 1) → A`
#. §5: `Fin (n+1)`
#. §6: $\\{0,1,…,n\\}$
#. §7: `Fin (n + 1) → A`
#. §8: $\\{0,1,…,n\\}$
#. §9: $A$
#. §10: $(n+1)$
#. §11: $A$
#. §12: `diag`
#. §13: $A$
#. §14: $A^{n+1}$
#. §15: `diag`
#: Game.Levels.Mono.L04_Diagonal
msgid "**Du**:  In der Definition von §0 stehen wieder zwei Pfeile hintereinander.\n"
"Das muss ich erst mal im Kopf sortieren.\n"
"\n"
"**Robo**:  Setz als erstes wieder Klammern:  §1. Es ist also\n"
"§2 eine Abbildung von §3 in die Menge §4.\n"
"Nun ist §5 die Menge §6, und §7 demnach die Menge der Abbildung von §8 nach §9.\n"
"\n"
"**Du**:  Mmh…  So eine Abbildung ist eigentlich nichts weiter als ein §10-Tupel von Elementen aus §11, oder?\n"
"\n"
"**Robo**: Kann man so sehen.\n"
"\n"
"**Du**:  Okay.  Gegeben ist also eine Abbildung §12 von §13 nach §14.  Und zwar die Abbildung …  ah, ich sehe, warum sie §15 heißt.\n"
""
msgstr ""

#. §0: `diag`
#. §1: $a$
#. §2: $i \\in \\{0,1,…,n\\}$
#. §3: $a$
#. §4: $a ↦ (a,…,a)$
#: Game.Levels.Mono.L04_Diagonal
msgid "**Du**:  Oder vielleicht doch nicht.  Kannst du das bitte nochmal aufdröseln?\n"
"\n"
"**Robo**:  Die Abbildung §0 schickt ein Element §1 auf die Abbildung, die *jeden* Index §2 auf §3 abbildet.\n"
"In deiner Interpretation ist das die Abbildung §4.\n"
""
msgstr ""

#. §0: `unfold Injective`
#: Game.Levels.Mono.L04_Diagonal
msgid "**Robo**: Wenn du gar nicht weiter weißt, fang am besten mal mit §0 an."
msgstr ""

#. §0: `diag «{a₁}»`
#. §1: `diag «{a₂}»`
#. §2: `Fin (n + 1) → A`
#. §3: `Fin (n + 1)`
#. §4: `congr_fun`
#: Game.Levels.Mono.L04_Diagonal
msgid "**Robo**:  Erinner dich, dass deine “Tupel” §0 und §1 in Wahrheit zwei Abbildung §2 sind.\n"
"Du könntest sie auf einem Element aus §3 auswerten. Vielleicht hilft §4 in irgendeiner Form?"
msgstr ""

#: Game.Levels.Mono.L05_StrictMono
msgid ""
msgstr ""

#: Game.Levels.Mono.L05_StrictMono
msgid ""
msgstr ""

#. §0: `StrictMono`
#. §1: `StrictMono.injective`
#. §2: `StrictMono.add`
#. §3: `Odd.strictMono_pow`
#. §4: `n`
#. §5: `x ↦ x ^ n`
#: Game.Levels.Mono.L05_StrictMono
msgid "\n"
"**Du**: Hmm, das ist etwas schwieriger…\n"
"\n"
"**Robo**: Ich habe gerade auch keine gute Idee.\n"
"\n"
"Da hört ihr jemanden aus der Menge flüstern: §0 …\n"
"\n"
"**Robo**:  Ah, ja.  Es gibt da dieses Lemma §1:\n"
"jede strikt monotone Abbildung ist injektiv.\n"
"Und es gibt auch jede Menge Lemmas, mit denen man zeigen kann, dass Abbildungen monoton sind.\n"
"Zum Beispiel:\n"
"\n"
"§2  – die Summe zweier strikt monotoner Abbildungen ist wieder strikt monoton\n"
"\n"
"§3 – für ungerades §4 ist §5 strikt monoton\n"
"\n"
"Wollen wir es damit einmal versuchen?"
msgstr ""

#. §0: `apply`
#: Game.Levels.Mono.L05_StrictMono
msgid "**Robo**: §0 ist, wonach du suchst."
msgstr ""

#. §0: `Odd 3`
#: Game.Levels.Mono.L05_StrictMono
msgid "**Du**: §0. Ist das nicht eine Trivialität? Warte mal!"
msgstr ""

#: Game.Levels.Mono.L05_StrictMono
msgid "**Du**: Ha! Und dieser Teil geht jetzt vermutlich wieder ganz elementar."
msgstr ""

#. §0: `unfold`
#. §1: `StrictMono`
#: Game.Levels.Mono.L05_StrictMono
msgid "\n"
"**Du**: Oder …?\n"
"\n"
"**Robo**: Doch, doch. Schau mal mit §0 in die Definition von §1 hinein.\n"
""
msgstr ""

#: Game.Levels.Mono.L05_StrictMono
msgid "Jede strikt monotone Abbildung (zwischen geeigneten Definitions- und Wertebereichen) ist injektiv."
msgstr ""

#. §0: `n`
#. §1: `x ↦ x ^ n`
#. §2: `h_odd : Odd n`
#. §3: `Odd.strictMono_pow h_odd`
#. §4: `h_odd.strictMono_pow`
#: Game.Levels.Mono.L05_StrictMono
msgid "Für ungerades §0 ist §1 strikt monoton.\n"
"\n"
"*Bemerkung*: Hat man §2 als Annahme, so kann man statt §3 auch einfach §4 schreiben."
msgstr ""

#. §0: `f`
#. §1: `g`
#. §2: `f + g`
#: Game.Levels.Mono.L05_StrictMono
msgid "Sind §0 und §1 beide strikt monoton sind, so ist auch §2 strikt momonton."
msgstr ""

#: Game.Levels.Mono.L05_StrictMono
msgid ""
msgstr ""

#: Game.Levels.Mono.L06_StrictMono
msgid ""
msgstr ""

#. §0: `StrictMono.injective`
#: Game.Levels.Mono.L06_StrictMono
msgid "Anscheinend hat jemand bemerkt, dass §0 vorgesagt war.\n"
"Jetzt wollen sie davon auch einen Beweis sehen."
msgstr ""

#. §0: `Injective f`
#: Game.Levels.Mono.L06_StrictMono
msgid "\n"
"**Robo**: Vieleicht erst einmal ganz klassisch alle Variablen und Annahmen aus §0 einführen?\n"
""
msgstr ""

#. §0: `lt_trichotomy`
#: Game.Levels.Mono.L06_StrictMono
msgid "\n"
"**Robo**:  Jetzt vielleicht eine Fallunterscheidung.  Erinnerst du dich an §0?\n"
""
msgstr ""

#: Game.Levels.Mono.L07_SuccHasLeftInv
msgid ""
msgstr ""

#: Game.Levels.Mono.L07_SuccHasLeftInv
msgid ""
msgstr ""

#. §0: `n ↦ n + 1`
#. §1: `n ↦ n - 1`
#. §2: `n = 0`
#. §3: `if … then … else`
#. §4: `0 - 1`
#. §5: `ℕ`
#. §6: `0`
#: Game.Levels.Mono.L07_SuccHasLeftInv
msgid "**Du**: Behauptet wird offenbar, dass die Abbildung §0 ein Linksinverses besitzt.\n"
"Ich gebe also einfach die Abbildung §1 an … außer, dass das für §2 nicht funktioniert.\n"
"\n"
"**Robo**:  Du könntest ja mit §3 eine Fallunterscheidung machen.\n"
"Aber tatsächlich brauchst du das gar nicht.  In Leansch liegt auch §4 in §5.\n"
"\n"
"**Du**: Was … ??!\n"
"\n"
"**Robo**:  Ja.  Das ist einfach wieder als §6 definiert.\n"
""
msgstr ""

#. §0: `0 - 1`
#. §1: `0`
#. §2: `n ↦ n - 1`
#. §3: `n ↦ n - 1`
#. §4: `0`
#. §5: `0`
#: Game.Levels.Mono.L07_SuccHasLeftInv
msgid "**Du**:  Ich bin immer noch schockiert.\n"
"  Ich dachte, wir machen hier Mathematik.\n"
"  Wieso sollte denn §0 wieder §1 sein??\n"
"\n"
"  **Robo**:  Reine Ansichtssache.  Du stellst dir §2 vor als eine Abbildung, die nur auf den positive natürlichen Zahlen definiert ist.\n"
"  In Leansch ist §3 eben eine Abbildung, die auf allen natürlichen Zahlen definiert ist, und sie schickt §4 auf §5.\n"
"  Warum nicht.  Anwenden wird man diese Abbildung am Ende eh nur auf positive Zahlen, und auf denen stimmt deine Interpretation ja glücklicherweise mit der leanschen Interpretation überein."
msgstr ""

#: Game.Levels.Mono.L08_RightInvOfLeftInv
msgid ""
msgstr ""

#: Game.Levels.Mono.L08_RightInvOfLeftInv
msgid ""
msgstr ""

#. §0: `f`
#. §1: `g`
#: Game.Levels.Mono.L08_RightInvOfLeftInv
msgid "**Du**: Was steht hier?\n"
"\n"
"**Robo**:  Eine injektive Abbildung §0, die zu einer Abbildung §1 linksinvers ist, ist zur selben Abbildung auch rechtsinvers.\n"
""
msgstr ""

#: Game.Levels.Mono.L09_InjOfHasLeftInv
msgid ""
msgstr ""

#: Game.Levels.Mono.L09_InjOfHasLeftInv
msgid ""
msgstr ""

#: Game.Levels.Mono.L09_InjOfHasLeftInv
msgid ""
msgstr ""

#: Game.Levels.Mono.L09_InjOfHasLeftInv
msgid "\n"
"**Du**: Eine Abbildung, die ein Linksinverses besitzt, ist injektiv.  Schonmal gehört, glaube ich …\n"
""
msgstr ""

#. §0: `congr_arg g`
#: Game.Levels.Mono.L09_InjOfHasLeftInv
msgid "**Robo**:  Vielleicht irgendwas mit §0?"
msgstr ""

#: Game.Levels.Mono.L09_InjOfHasLeftInv
msgid "**Robo**:  Gut gemacht!  Ich glaube, wir sind hier bald durch …"
msgstr ""

#: Game.Levels.Mono.L10_Auxiliary
msgid ""
msgstr ""

#: Game.Levels.Mono.L10_Auxiliary
msgid ""
msgstr ""

#. §0: `a`
#. §1: `a`
#. §2: ```
#. ∀ b : B, ∃ a : A,
#. ( f a = b   ∨   ¬ ∃ a' : A , f a' = b )
#. ```
#: Game.Levels.Mono.L10_Auxiliary
msgid "\n"
"**Du**:  Sind wir jetzt zurück auf Quantus?  Jedenfalls:  Es gibt ein §0 oder es gibt kein §1, das sieht aus nach einer Tautologie.\n"
"\n"
"**Robo**:  Langsam!  Du musst die implizite Klammerung beachten. Ich schreib dir das mal mit mehr Klammern aus:\n"
"§2\n"
""
msgstr ""

#. §0: `by_cases`
#. §1: `«{b}»`
#: Game.Levels.Mono.L10_Auxiliary
msgid "\n"
"**Robo**:  Nun ja, du könntest mit §0 eine Fallunterscheidung machen, ob denn nun §1 ein Urbild besitzt oder nicht.\n"
""
msgstr ""

#. §0: `«{A}»`
#. §1: `obtain`
#: Game.Levels.Mono.L10_Auxiliary
msgid "\n"
"**Robo**:  Du weißt ja zumindest, dass *irgendein* Element in §0 existiert.  Vielleicht „kontruierst“ du dir das einmal mit §1.\n"
""
msgstr ""

#: Game.Levels.Mono.L11_InjHasLeftInv
msgid ""
msgstr ""

#: Game.Levels.Mono.L11_InjHasLeftInv
msgid ""
msgstr ""

#: Game.Levels.Mono.L11_InjHasLeftInv
msgid ""
msgstr ""

#. §0: `Nonempty A`
#: Game.Levels.Mono.L11_InjHasLeftInv
msgid "\n"
"**Du**:  Ich seh schon.  Die Eposophen wollten gern bewiesen haben, dass eine Abbildung genau dann surjektive ist, wenn sie ein Rechtsinverses besitzt.\n"
"Und die hiesigen Monosophen wollen gern bewiesen haben, dass eine Abbildung genau dann injektiv ist, wenn sie in Linksinverses besitzt.\n"
"\n"
"**Robo**: Ja, außer dass sie diese zusätzliche Voraussetzung §0 brauchen.\n"
""
msgstr ""

#. §0: ` ∀ b : B, ∃ a : A, …`
#. §1: `choose`
#. §2: `have`
#: Game.Levels.Mono.L11_InjHasLeftInv
msgid "\n"
"**Du**:  Ich sehe gerade nicht, wie ich ein Linksinverses konkret konstruieren kann.\n"
"\n"
"**Robo**:  Erinner dich an die Aussage, die wir eben gerade gezeigt hatten: §0\n"
"Wenn du die hier hättest, könntest du vermutlich mit §1 das gesuchte Linksinverse wählen.\n"
"Nur hat diese Aussage dummerweise keinen Namen.\n"
"Vielleicht formulierest du sie noch einmal mit §2 selbst aus, und beweist sie auch noch einmal.\n"
""
msgstr ""

#: Game.Levels.Mono.L11_InjHasLeftInv
msgid "\n"
"**Robo**:  Das hatten wir doch auch schon gezeigt …  aber ich hatte vergessen, es abzuspeichern.\n"
"Erinnerst du dich an den Beweis?\n"
""
msgstr ""

#: Game.Levels.Mono.L11_InjHasLeftInv
msgid "Ihr bekommt wieder eine große Runde Applaus und werdet ihr verabschiedet.\n"
"Wieder gibt es keine Transportkapseln für den Rückweg.\n"
"Aber so weit ist es ja nun auch wieder nicht."
msgstr ""

#: Game.Levels.Mono
msgid "Mono"
msgstr ""

#: Game.Levels.Mono
msgid "Auf dem nächsten Planeten stehen wieder zwei Hochhäuser nebeneinander.\n"
"Wieder ist das eine schmal und hoch, das andere etwas breiter und niedriger.\n"
"Und wieder sind sie durch ein Röhrensystem miteinander verbunden –\n"
"es gibt wohl auch wieder irgendein Transportkapsel-System.\n"
"Nach der Erfahrung auf Epo steuert ihr diesmal geradewegs das niedrigere Gebäude an und landet auf dem Dach.\n"
"\n"
"**Portier**:  Nicht doch, nicht doch.  Habt ihr nicht alle winken sehen?\n"
"Das hier ist doch bloß unser Schlafhaus.  Wir sind tagsüber immer dort drüben, im Büroturm.\n"
"Aber gut, nun seid ihr hier.  Willkommen erst einmal!\n"
"\n"
"Ihr schüttelt jeder eine seiner vier Hände.\n"
"\n"
"**Portier**:  Immerhin habe ich so die Möglichkeit, euch gleich unser einzigartiges Nahverkehrssystem vorzustellen.\n"
"Ihr kommt von Epo, nicht war?\n"
"Böse Geschichten hört man von dort.\n"
"Jeden zweiten Tag gibts einen Unfall.\n"
"Die kriegen ihre Röhren einfach nicht sortiert.\n"
"Wir sind seit Jahren unfallfrei!\n"
"\n"
"Ihr geht vier Stockwerke nach unten.\n"
"Dort bekommt wieder jeder eine Kapsel zugewiesen,\n"
"und ihr gleitet geräuschlos bergauf in den Büroturm.\n"
"Wie der Antrieb funktioniert, bleibt ein Rätsel.\n"
"\n"
"**Robo**:  Oh.  Hier ist ja auch niemand!\n"
"\n"
"**Portier**:  Natürlich nicht.  Die sind alle ganz oben.\n"
"Und nicht jedes Stockwerk lässt sich über eine Röhre erreichen.\n"
"Aber wir sind schon fast da.  Nur noch zwei Treppen hinauf."
msgstr ""

#: Game.Levels.Samarkand.L01_ImagePreimage
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L01_ImagePreimage
msgid "**Arapuka**:  Es gibt da auch ein paar Dinge, über die ich schon lange nachdenke.\n"
"Vielleicht könnte ihr mir ja helfen.  Zum Beispiel: …\n"
"\n"
"Sie diktiert euch eine Aussage. Robo schreibt sie auf."
msgstr ""

#: Game.Levels.Samarkand.L01_ImagePreimage
msgid ""
msgstr ""

#. §0: `f : A → B`
#. §1: `S`
#. §2: `A`
#. §3: ```
#. f '' S = {f a | a ∈ S}
#. = {b | ∃ a ∈ S, f a = b}
#. ```
#. §4: `f`
#. §5: `T`
#. §6: `B`
#. §7: ```
#. f ⁻¹' T = { a | f a ∈ T}
#. ```
#. §8: `f`
#: Game.Levels.Samarkand.L01_ImagePreimage
msgid "\n"
"**Robo**:  Die Notation hier muss ich dir, glaube ich, erklären.\n"
"Gegeben ist offenbar eine Abbildung §0.\n"
"Für eine Teilmenge §1 von §2 ist\n"
"§3\n"
"ihr Bild unter §4.  Und für eine Teilmenge §5 von §6 ist\n"
"§7\n"
"ihr Urbild unter §8."
msgstr ""

#. §0: `intro b`
#: Game.Levels.Samarkand.L01_ImagePreimage
msgid "\n"
"**Robo:** Um eine Inklusion zu zeigen, nimmst du dir ein Element aus der linken Seite und zeigst, dass es in der rechten liegt.\n"
"Also fang doch mal mit §0 an.\n"
""
msgstr ""

#. §0: `«{hb}»`
#. §1: `simp`
#: Game.Levels.Samarkand.L01_ImagePreimage
msgid "\n"
"**Robo**:  Um die Annahme §0 in einen elementareren Ausdruck zu überführen, könntest du §1 anwenden.\n"
""
msgstr ""

#: Game.Levels.Samarkand.L01_ImagePreimage
msgid "**Arapuka**: Schön."
msgstr ""

#: Game.Levels.Samarkand.L02_ImageMap
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L02_ImageMap
msgid "Arapuka diktiert euch noch eine Aufgabe."
msgstr ""

#. §0: `image`
#. §1: `''`
#. §2: `image f`
#. §3: `A`
#. §4: `B`
#. §5: ```
#. image f = fun S ↦ f '' S
#. ```
#. §6: `image f`
#. §7: `f ''`
#: Game.Levels.Samarkand.L02_ImageMap
msgid "\n"
"**Du**:  Aha!  Ich kann also auch einfach §0 schreiben, wenn ich mir diese Fliegendreck-Schreibweise mit §1 nicht mag?\n"
"\n"
"**Robo**:  Nein, schau mal genauer hin.   Hier ist §2 eine Abbildung.\n"
"Es ist natürlich genau die Abbildung, die eine Teilmenge von §3 auf die entsprechende Bildmenge in §4 wirft, also\n"
"§5\n"
"Du kannst also §6 durch §7 ausdrücken, aber nicht umgekehrt.\n"
""
msgstr ""

#. §0: `funext`
#: Game.Levels.Samarkand.L02_ImageMap
msgid "\n"
"**Robo**:  Zu zeigen ist die Übereinstimmung von zwei Abbildungen.  Erinnerst du dich an §0?\n"
""
msgstr ""

#. §0: `ext`
#: Game.Levels.Samarkand.L02_ImageMap
msgid "\n"
"**Robo**:  Jetzt ist die Gleichheit von zwei Mengen zu zeigen – §0 heißt das Zauberwort.\n"
""
msgstr ""

#: Game.Levels.Samarkand.L02_ImageMap
msgid "\n"
"**Robo**:  Das kann man bestimmt leicht vereinfachen …\n"
""
msgstr ""

#: Game.Levels.Samarkand.L02_ImageMap
msgid "**Arapuka**:  Hübsch, hübsch."
msgstr ""

#: Game.Levels.Samarkand.L03_SurjectiveRange
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L03_SurjectiveRange
msgid ""
msgstr ""

#. §0: `range f`
#. §1: `f`
#. §2: ```
#. range f = {f a | a : A}
#. = {  b | ∃ a, f a = b}
#. ```
#. §3: `f '' univ`
#. §4: `mem_range`
#. §5: ```
#. x ∈ range f ↔ ∃ a, f a = b
#. ```
#: Game.Levels.Samarkand.L03_SurjectiveRange
msgid "\n"
"**Robo**:  Hier ist §0 die gesamte Bildmenge von §1:\n"
"§2\n"
"Das ist also im wesentlichen eine andere Schreibweise für §3.\n"
"Um damit zu arbeiten, ist §4 ganz nützlich:\n"
"§5\n"
""
msgstr ""

#. §0: `consturctor`
#: Game.Levels.Samarkand.L03_SurjectiveRange
msgid "**Robo**: Ich würde mal mit §0 anfangen."
msgstr ""

#. §0: `ext`
#: Game.Levels.Samarkand.L03_SurjectiveRange
msgid "\n"
"**Robo**: Ist nicht wieder eine Gleichheit von Mengen zu zeigen? Also §0.\n"
""
msgstr ""

#: Game.Levels.Samarkand.L03_SurjectiveRange
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L03_SurjectiveRange
msgid "**Arapuka**:  Auch schön.\n"
"\n"
"  **Robo**:  Hast du eigentlich den ganzen Planeten hier bemalt?\n"
"\n"
"  **Arapuka**:  Nein.  Das ist eine Aufgabe für Generationen.\n"
"  Die ersten Musterelement hat mein Urururur…opa geprägt.\n"
"  Ich weiß gar nicht genau, wie viele Generationen ich zurückgehen muss.\n"
"  Und erst recht nicht, woher das Urmuster kam."
msgstr ""

#: Game.Levels.Samarkand.L04_SurjectiveImagePreimage
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L04_SurjectiveImagePreimage
msgid "**Arapuka**:  Könnt ihr mir vielleicht hiermit auch noch helfen?"
msgstr ""

#: Game.Levels.Samarkand.L04_SurjectiveImagePreimage
msgid ""
msgstr ""

#. §0: `image_preimage_subset`
#. §1: ```
#. f '' (f ⁻¹' T) ⊆ T
#. ```
#. §2: `f`
#: Game.Levels.Samarkand.L04_SurjectiveImagePreimage
msgid "\n"
"**Du**:  Hatten wir das nicht eben schon?\n"
"\n"
"**Robo**:  Nein.  Vorhin hatten wir nur die Inklusion §0:\n"
"§1\n"
"Jetzt ist Gleichheit zu zeigen, aber unter der zusätzlichen Annahme, dass §2 surjektiv ist.\n"
""
msgstr ""

#: Game.Levels.Samarkand.L04_SurjectiveImagePreimage
msgid "**Arapuka**:  Ihr seid wirklich eine große Hilfe!"
msgstr ""

#: Game.Levels.Samarkand.L05_InjectiveFibre
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L05_InjectiveFibre
msgid "**Arapuka**:  Ich habe auch noch eine Frage zu injektiven Abbildungen."
msgstr ""

#: Game.Levels.Samarkand.L05_InjectiveFibre
msgid ""
msgstr ""

#. §0: `∃! a`
#. §1: `a`
#. §2: `use a`
#. §3: `simp`
#: Game.Levels.Samarkand.L05_InjectiveFibre
msgid "**Du**:  Bei §0 konstruiere ich mir zunächst das Element §1, das ich verwenden möchte …\n"
"\n"
"**Robo**: … und dann wendest du §2 und §3 an.  Genau.\n"
""
msgstr ""

#: Game.Levels.Samarkand.L05_InjectiveFibre
msgid "Arapuka liegt immer noch ganz regungslos, aber sie sieht glücklich aus."
msgstr ""

#: Game.Levels.Samarkand.L06_PreimageNonempty
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L06_PreimageNonempty
msgid "**Arapuka**: Und wie sieht es hiermit aus?"
msgstr ""

#. §0: `b`
#. §1: `b`
#. §2: `eq_empty_iff_forall_not_mem`
#. §3: `unfold Ne`
#: Game.Levels.Samarkand.L06_PreimageNonempty
msgid "\n"
"**Du**:  Das soll wohl heißen:  die Faser von §0 ist genau dann nicht-leer, wenn §1 ein Urbild besitzt.\n"
"Mal wieder ziemlich offensichtlich.\n"
"\n"
"**Robo**:  Ja, bis auf Notation.\n"
"Aber zum Glück haben wir schon §2 gezeigt.\n"
"Um das anzuwenden, musst du nur das Ungleichheitszeichen auflösen, zum Beispiel einfach mit §3.\n"
""
msgstr ""

#: Game.Levels.Samarkand.L06_PreimageNonempty
msgid "**Arapuka**: Ihr habt recht.  Da hätte ich selbst drauf kommen können."
msgstr ""

#: Game.Levels.Samarkand.L07_LeftInvPreimage
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L07_LeftInvPreimage
msgid "**Arapuka**:  Jetzt habe ich aber noch eine wirklich schwierige Aufgabe."
msgstr ""

#: Game.Levels.Samarkand.L07_LeftInvPreimage
msgid "**Du**:  Mal überlegen …∪"
msgstr ""

#: Game.Levels.Samarkand.L07_LeftInvPreimage
msgid "**Arapuka**:  Wow! Ihr seid wirklich großartig."
msgstr ""

#: Game.Levels.Samarkand.L08_Preimage_Injective
msgid ""
msgstr ""

#: Game.Levels.Samarkand.L08_Preimage_Injective
msgid "**Arapuka**:  Könnt ihr mir vielleicht sogar mit dieser Vermutung weiterhelfen?"
msgstr ""

#: Game.Levels.Samarkand.L08_Preimage_Injective
msgid ""
msgstr ""

#. §0: `preimage f`
#: Game.Levels.Samarkand.L08_Preimage_Injective
msgid "\n"
"**Robo**:  Eine Abbildung ist genau dann surjektiv, wenn die induzierte Abbildung §0, die eine Teilmenge auf das Urbild unter dieser Teilmenge wirft, injektiv ist?\n"
"Stimmt das überhaupt?\n"
"\n"
"**Du**: Ich glaube, ja.  Das habe ich schonmal gesehen.\n"
"\n"
"**Robo**:  Na dann, los!\n"
""
msgstr ""

#: Game.Levels.Samarkand.L08_Preimage_Injective
msgid "**Arapuka**:  Fantastisch!  Ich bin so aufgeregt, ich möchte am liebsten in die Luft springen.\n"
"  Aber das geht natürlich nicht.  Dann ist das Muster futsch.\n"
"\n"
"  **Robo**:  Wie lange hast du denn noch?\n"
"\n"
"  **Arapuka**:  Hier noch drei Jahre, 22 Tage, 7 Stunden und 35 Minuten.\n"
"\n"
"  **Robo**:  Ohh …\n"
"\n"
"  **Du**:  Und woher weißt du, wo genau du danach hingehen musst, damit das Muster passt?\n"
"\n"
"  **Arapuka**:  Ah!\n"
"\n"
"  Über Arapukas Gesicht breitet sich ein großes Lächeln aus.\n"
"\n"
"  **Arapuka**:  Das ist eben die Kunst!"
msgstr ""

#: Game.Levels.Samarkand
msgid "Samarkand"
msgstr ""

#: Game.Levels.Samarkand
msgid "In der Ferne taucht ein sehr bunter Planet auf.\n"
"Als ihr näher kommt, seht ihr, dass große Teile seiner Oberfläche mit aufwendigen geometrischen Mustern verziert sind.\n"
"Aber es gibt auch ein paar unverzierte Areale, ganz weiß.\n"
"Ihr landet in einem dieser weißen Flecken.\n"
"\n"
"\n"
"**Du**:  Huhu, ist hier jemand?\n"
"\n"
"Die Planetenoberfläche gleicht einer perfekten Sphäre. Ihr seht in alle Richtungen Horizont.\n"
"Es ist niemand zu sehen.  Ihr wollt schon wieder umdrehen, da entdeckst du etwas.\n"
"\n"
"**Du**:  Robo, schau mal da hinten, da hat der Planet eine Beule!\n"
"\n"
"Wie sich herausstellt, ist die „Beule“ eine kleine Schildkröte,\n"
"die nahe der Musterkante auf farbigem Grund liegt.\n"
"Vorsichtig betretet ihr die gemusterte Fläche.  Die Farbe scheint trocken zu sein.\n"
"\n"
"**Arapuka**: Hallo ihr beiden, kommt ruhig näher!  Schön, dass ich auch einmal Besuch bekomme.\n"
"\n"
"**Du**:  Was machst du denn hier, so ganz allein?\n"
"\n"
"**Arapuka**:  Ich arbeitet an einem großen Kunstwerk.\n"
"Ich liege hier solange, bis mein Bauchpanzer das Bodenmuster angenommen hat.\n"
"Dann laufe ich hinüber zu der Stelle, wo dieses Stück Muster noch fehlt, und lege mich dort so lange nieder, bis ich das Muster auf die weiße Planetenoberfläche transferiert habe.\n"
"Das dauert.  Ich kann also Gesellschaft gut gebrauchen.\n"
"\n"
"**Du**: Na prima."
msgstr ""

#: Game.Levels.Iso.L01_Bijective
msgid ""
msgstr ""

#: Game.Levels.Iso.L01_Bijective
msgid "**Isososoph**:  Natürlich haben auch wir etwas für euch vorbereitet."
msgstr ""

#. §0: `Bijective f`
#. §1: `Injective f ∧ Surjective f`
#: Game.Levels.Iso.L01_Bijective
msgid "\n"
"**Robo** *(flüsternd)*: §0 ist als §1 definiert.\n"
"\n"
"**Du**: Dann ist das ja ganz simpel!"
msgstr ""

#: Game.Levels.Iso.L01_Bijective
msgid "**Isososoph**: Super.  Dann können wir das hier, glaube ich, alles überspringen …\n"
"\n"
"Er legt ein paar Blätter zur Seite."
msgstr ""

#: Game.Levels.Iso.L02_Inverse
msgid ""
msgstr ""

#: Game.Levels.Iso.L02_Inverse
msgid "**Isosoph**:  … und zur Hauptsache kommen."
msgstr ""

#: Game.Levels.Iso.L02_Inverse
msgid ""
msgstr ""

#: Game.Levels.Iso.L02_Inverse
msgid "**Du**:  Eine Abbildung ist genau dann bijektiv, wenn eine zur ihr inverse Abbildung existiert.\n"
"Das ist ja im Wesentlich dass, was wir auf Epo und Mono schon gezeigt hatten.\n"
"Hattest du dir die Aussagen abgespeichert?\n"
"\n"
"**Robo**:  Schon, aber ich glaube, wenn wir die hier auspacken, gehen die Augenbrauen nach oben.\n"
"Lass uns lieber scharf nachdenken und uns erinnern, wie das ging.\n"
""
msgstr ""

#. §0: `Bijective`
#. §1: `obtain ⟨hinj, hsurj⟩  := «{h}»`
#. §2: `Injective`
#. §3: `Surjective`
#: Game.Levels.Iso.L02_Inverse
msgid "\n"
"**Robo**: Teil doch erst einmal §0 mit §1 in\n"
"§2 und §3 auf!"
msgstr ""

#. §0: `y : B`
#. §1: `x : A`
#. §2: `choose`
#: Game.Levels.Iso.L02_Inverse
msgid "\n"
"**Robo**: Aus der Surjektivität weisst du, dass jedes §0 ein Urbild §1 hat.\n"
"Kannst du daraus nicht mit §2 eine Umkehrabbildung konstruieren?"
msgstr ""

#. §0: `«{g}»`
#. §1: `«{f}»`
#. §2: `have hR : RightInverse «{g}» «{f}»`
#: Game.Levels.Iso.L02_Inverse
msgid "\n"
"Zeig am besten erst einmal, dass §0 ein Rechtsinverses von §1 ist,\n"
"also zum Beispiel §2\n"
""
msgstr ""

#. §0: `simp [LeftInverse]`
#: Game.Levels.Iso.L02_Inverse
msgid "**Robo**: Mit §0 kannst du dir das Beweisziel etwas vereinfachen."
msgstr ""

#. §0: `intro`
#: Game.Levels.Iso.L02_Inverse
msgid "**Robo**: Warum beginnst du nicht mit §0?"
msgstr ""

#. §0: `«{h}»`
#: Game.Levels.Iso.L02_Inverse
msgid "**Robo**: Zerlege §0 noch soweit du kannst!"
msgstr ""

#: Game.Levels.Iso.L02_Inverse
msgid "**Robo**: Das UND auch noch!"
msgstr ""

#. §0: `intro`
#: Game.Levels.Iso.L02_Inverse
msgid "\n"
"**Robo**: Injektivität ist der schwierigere Teil. Fang mal an mit §0."
msgstr ""

#. §0: `f a = f b`
#. §1: `g (f a) = g (f b)`
#. §2: `f a = f b`
#. §3: `rw`
#: Game.Levels.Iso.L02_Inverse
msgid "\n"
"**Du**: Wenn die Argumente §0 gleich sind, ist auch §1 –\n"
"wie sag ich das nochmal?\n"
"\n"
"**Robo**: Also, wenn du §2 hast, kannst du ja auch einfach §3 benutzen."
msgstr ""

#. §0: `RightInverse`
#. §1: `rw`
#: Game.Levels.Iso.L02_Inverse
msgid "\n"
"**Robo**: Hier kannst du die §0-Annahme mit §1 benutzen."
msgstr ""

#: Game.Levels.Iso.L02_Inverse
msgid "Die Isosophen zeigen sich sehr zufrieden.\n"
"\n"
"**Robo**:  Können wir jetzt nochmal … kapseln?\n"
"\n"
"**Isosoph**:  Klar!  Aber immer schön der Reihe nach.\n"
"Seit wir die Kapseln in beide Richtungen benutzen, häufen sich wieder die Unfälle.\n"
"\n"
"Robo fährt noch dreimal hin und zurück.  Dann fliegt ihr weiter."
msgstr ""

#: Game.Levels.Iso
msgid "Iso"
msgstr ""

#: Game.Levels.Iso
msgid "**Du**:  Schau mal, noch ein Planet mit zwei Hochhäusern!\n"
"\n"
"**Robo**: Ja, aber die hier sind gleich hoch.  Jetzt weiß ich gar nicht mehr, wo ich landen soll.\n"
"\n"
"**Du**:  Links winken Leute!\n"
"\n"
"Also landet ihr links.\n"
"Da Empfang ist aber eher verhalten.\n"
"\n"
"**Isosoph**:  Guten Tag!\n"
"Das ist aber nicht die feine Art, hier mitten in der Menge zu landen!\n"
"Dort drüben hatten wir doch extra einen Landeplatz markiert!\n"
"\n"
"**Robo**:  Entschluldigung!  Ich hatte die Symbolik nicht erkannt.\n"
"\n"
"**Isosoph**: Ist ja nochmal gut gegangen!\n"
"Wir hatten schon gehört, dass ihr ein bisschen anders seid.\n"
"Wir zeigen euch trotzdem unser geniales Transportsystem – das fortschrittlichste Nahverkehrssystem im ganzen Formaloversum!\n"
"\n"
"Wie sich heraussstellt, ist einer der besonders fortschrittlichen Aspekte, dass man die Transportkapseln auf diesem Planeten in beide Richtungen verwenden kann.\n"
"Ihr düst ein paar Mal hin und her."
msgstr ""

#: Game.Levels.Piazza.L01_Mem__Set
msgid ""
msgstr ""

#: Game.Levels.Piazza.L01_Mem__Set
msgid "**Fin**:  Ja, klar.  Das hier zum Beispiel."
msgstr ""

#: Game.Levels.Piazza.L01_Mem__Set
msgid "\n"
"**Du**:  Verstehe ich das richtig?\n"
"\n"
"**Robo**: Vermute schon.  Sieht ziemlich *tauto*logisch aus, nicht?\n"
""
msgstr ""

#: Game.Levels.Piazza.L01_Mem__Set
msgid "**Set**:  Ihr kennt euch also auch schon ein bisschen mit Mengen aus?\n"
"\n"
"**Robo**:  Naja, ein *bisschen*."
msgstr ""

#: Game.Levels.Piazza.L02_Simp
msgid ""
msgstr ""

#: Game.Levels.Piazza.L02_Simp
msgid "**Mem**:  Wie wärs denn hiermit?"
msgstr ""

#. §0: `simp`
#: Game.Levels.Piazza.L02_Simp
msgid "\n"
"**Robo**:  Ich glaube, am einfachsten kommst du hier mit §0 weiter.\n"
""
msgstr ""

#. §0: `decide`
#: Game.Levels.Piazza.L02_Simp
msgid "\n"
"**Robo**:  Erinner dich an §0.\n"
""
msgstr ""

#: Game.Levels.Piazza.L02_Simp
msgid ""
msgstr ""

#: Game.Levels.Piazza.L03_Ext__Set__Union__Inter
msgid ""
msgstr ""

#: Game.Levels.Piazza.L03_Ext__Set__Union__Inter
msgid "**Set**:  Wenn das zu einfach war – kennt ihr diese Aussage?"
msgstr ""

#. §0: `A B C : Set ℕ`
#. §1: `A`
#. §2: `B`
#. §3: `C`
#. §4: `ℕ`
#. §5: `Set`
#. §6: `ext x`
#. §7: `A = B`
#. §8: `x ∈ A ↔ x ∈ B`
#: Game.Levels.Piazza.L03_Ext__Set__Union__Inter
msgid "\n"
"**Du**:  §0 heißt hier genau was?\n"
"\n"
"**Robo**:  Das heißt einfach, dass §1, §2 und §3 *Teilmengen* von §4 sind.\n"
"\n"
"**Du**:  §5 bedeutet „subset“?\n"
"\n"
"**Robo**:  Wenn du so willst, ja.\n"
"\n"
"**Du**:  Dann *kenne* ich die Aussage wohl.\n"
"Aber keine Ahnung, wie ich die hier beweisen könnte.\n"
"\n"
"**Ext**:  Kann ich dir sagen!  Da gibts ein Zauberwort, das heißt genau wie ich!!\n"
"\n"
"**Robo**:  Ach ja –\n"
"§6 ersetzt eine Mengengleichheit §7 durch §8."
msgstr ""

#. §0: `simp`
#: Game.Levels.Piazza.L03_Ext__Set__Union__Inter
msgid "**Robo**:  Und jetzt wieder §0."
msgstr ""

#. §0: `simp`
#. §1: `simp`
#. §2: `simp`
#. §3: ```
#. «{x}» ∈ «{A}» ∩ «{B}» ↔ «{x}» ∈ «{A}» ∧ «{x}» ∈ «{B}»
#. ```
#. §4: ```
#. «{x}» ∈ «{B}» ∪ «{C}» ↔ «{x}» ∈ «{B}» ∨ «{x}» ∈ «{C}».
#. ```
#: Game.Levels.Piazza.L03_Ext__Set__Union__Inter
msgid "\n"
"**Du**:  Was genau macht §0 denn eigentlich?\n"
"\n"
"**Robo**:  §1 sucht nach allgemein bekannten Gleichungen und Äquivalenzen,\n"
"die gemeinhin als Vereinfachungen angesehen werden, und die gerade anwendbar wären.\n"
"Alle Vereinfachungen, die §2 findet, wendet es an.\n"
"Gerade waren das beispielsweise Vereinfachungen der Form\n"
"§3\n"
"und\n"
"§4\n"
""
msgstr ""

#. §0: `tauto`
#: Game.Levels.Piazza.L03_Ext__Set__Union__Inter
msgid "\n"
"**Robo**:  Den Rest schafft bestimmt §0.\n"
""
msgstr ""

#: Game.Levels.Piazza.L03_Ext__Set__Union__Inter
msgid ""
msgstr ""

#: Game.Levels.Piazza.L04_Generalize__univ__eq_univ_iff_forall
msgid ""
msgstr ""

#: Game.Levels.Piazza.L04_Generalize__univ__eq_univ_iff_forall
msgid "**Sub:** Ich habe auch schon etwas gelernt:"
msgstr ""

#. §0: `univ`
#. §1: `univ`
#. §2: `ℕ`
#. §3: `univ : Set ℕ`
#. §4: `ℕ`
#. §5: `5 : ℕ`
#. §6: `univ : Set ℕ`
#. §7: `5`
#. §8: `5 ∈ univ`
#. §9: `rw [eq_univ_iff_forall]`
#: Game.Levels.Piazza.L04_Generalize__univ__eq_univ_iff_forall
msgid "\n"
"**Du**:  Was ist denn §0?\n"
"\n"
"**Robo**:  §1 ist die maximale Teilmenge:  alle natürlichen Zahlen.\n"
"\n"
"**Du**:  Also einfach §2?\n"
"\n"
"**Robo**:  Jein. §3 ist “ganz ℕ”, aber aufgefasst als *Teilmenge* von §4.\n"
"\n"
"Ext, Fin, Set, Sub und Mem sehen euch groß an.\n"
"\n"
"**Set**:  Das kann man doch gar nicht verwechseln!  Hier *ist* eine Blaubeere,\n"
"das hier ist der *Korb mit allen Blaubeeren*, und die Beere *liegt in* diesem Korb.\n"
"\n"
"**Mem**:  Und genauso *ist* 5 eine natürlich Zahl (§5),\n"
"§6 ist die *Menge aller natürlicher Zahlen*, und §7 *liegt in* dieser Menge (§8).\n"
"Was ist daran verwirrend?\n"
"\n"
"**Robo** (*zu dir*):  Zerbrich dir nicht den Kopf darüber.\n"
"Ich schlage vor, du fängst hier einfach mal mit §9 an,\n"
"dann siehst du genau, was gefragt ist.\n"
""
msgstr ""

#. §0: `simp`
#. §1: `simp [eq_univ_iff_forall]`
#: Game.Levels.Piazza.L04_Generalize__univ__eq_univ_iff_forall
msgid "\n"
"**Robo**: Und jetzt §0.  Du hättest sogar direkt §1 nehmen können.\n"
""
msgstr ""

#. §0: `by_cases h : Even n`
#. §1: `Even x ∨ ¬Even x`
#. §2: `tauto`
#. §3: ```
#. rw [← Nat.not_odd_iff_even]
#. ```
#: Game.Levels.Piazza.L04_Generalize__univ__eq_univ_iff_forall
msgid "\n"
"**Du**: Und jetzt §0?\n"
"\n"
"**Robo**: Ja, das würde zum Ziel führen.\n"
"Aber eigentlich ist §1 ja eine Tautologie.\n"
"Damit §2 sie erkennt, musst du sie nur entsprechend abstrahieren.\n"
"Das ginge hier zum Beispiel mit:\n"
"§3\n"
""
msgstr ""

#: Game.Levels.Piazza.L04_Generalize__univ__eq_univ_iff_forall
msgid ""
msgstr ""

#: Game.Levels.Piazza.L04_Generalize__univ__eq_univ_iff_forall
msgid ""
msgstr ""

#: Game.Levels.Piazza.L05_empty__eq_empty_iff_forall_not_mem
msgid ""
msgstr ""

#: Game.Levels.Piazza.L05_empty__eq_empty_iff_forall_not_mem
msgid "**Mem:** Findet ihr diese Aussage auch wieder verwirrend?"
msgstr ""

#. §0: `∅`
#. §1: `rw [eq_empty_iff_forall_not_mem]`
#. §2: `simp [eq_empty_iff_forall_not_mem]`
#: Game.Levels.Piazza.L05_empty__eq_empty_iff_forall_not_mem
msgid "\n"
"**Du**: Nein, §0 kenne ich.\n"
"\n"
"**Robo**: Um ganz sicher zu gehen, dass du das richtig verstehst,\n"
"könntest du auch mit §1 anfangen.\n"
"Oder mit §2, falls du schnell fertig werden möchtest.\n"
""
msgstr ""

#: Game.Levels.Piazza.L05_empty__eq_empty_iff_forall_not_mem
msgid ""
msgstr ""

#: Game.Levels.Piazza.L05_empty__eq_empty_iff_forall_not_mem
msgid ""
msgstr ""

#: Game.Levels.Piazza.L06_Ext2__univ2
msgid ""
msgstr ""

#: Game.Levels.Piazza.L06_Ext2__univ2
msgid "**Ext**:  Ich mag *diese* Gleichung."
msgstr ""

#. §0: `ext`
#: Game.Levels.Piazza.L06_Ext2__univ2
msgid "**Robo**: Diesmal kannst du einfach wieder §0 verwenden."
msgstr ""

#. §0: `simp`
#: Game.Levels.Piazza.L06_Ext2__univ2
msgid "**Robo**: Und jetzt natürlich wieder §0."
msgstr ""

#. §0: `ext`
#: Game.Levels.Piazza.L06_Ext2__univ2
msgid "**Du** *(zu Robo)*:  Warum heißt ext eigentlich ext?\n"
"\n"
"  **Robo**:  Woher soll ich wissen, woher der Junge seinen Namen hat??\n"
"\n"
"  **Du**: Nein, ich meine dieses §0 hier!\n"
"\n"
"  **Robo**: Ach so. Das Prinzip, dass zwei Mengen genau dann gleich sind,\n"
"  wenn sie dieselben Elemente besitzen, nennen Logiker *extensionality*.\n"
"  Und daraus haben die Formalosophen wohl *ext* gemacht, weil es ihnen sonst zu lang war."
msgstr ""

#: Game.Levels.Piazza.L07_antisymm_iff
msgid ""
msgstr ""

#: Game.Levels.Piazza.L07_antisymm_iff
msgid "**Set**: Und ich mag diese Äquivalenz."
msgstr ""

#: Game.Levels.Piazza.L07_antisymm_iff
msgid ""
msgstr ""

#: Game.Levels.Piazza.L07_antisymm_iff
msgid "**Du**:  Ja, ich glaube, so habe ich das einmal gelernt\n"
"– zwei Mengen sind gleich, wenn sie sich wechselseitig enthalten."
msgstr ""

#. §0: `constructor`
#: Game.Levels.Piazza.L07_antisymm_iff
msgid "**Robo**:  Ich weiß nicht, aber ich würde mit §0 anfangen."
msgstr ""

#. §0: `«{A}»`
#. §1: `«{B}»`
#: Game.Levels.Piazza.L07_antisymm_iff
msgid "**Robo**: Ersetz mal §0 durch §1."
msgstr ""

#: Game.Levels.Piazza.L07_antisymm_iff
msgid "**Robo**: Ab hier müsste das Schema von eben wieder passen."
msgstr ""

#: Game.Levels.Piazza.L07_antisymm_iff
msgid ""
msgstr ""

#: Game.Levels.Piazza.L08_subset_iff
msgid ""
msgstr ""

#: Game.Levels.Piazza.L08_subset_iff
msgid "**Sub**:  Du hast Recht.\n"
"Wir sollten die Besucher mal etwas mehr über Inklusionen ausfragen."
msgstr ""

#: Game.Levels.Piazza.L08_subset_iff
msgid ""
msgstr ""

#. §0: `tauto`
#. §1: `rfl`
#: Game.Levels.Piazza.L08_subset_iff
msgid "**Robo**: Das ist doch nur die Definition!\n"
"\n"
"**Robo** *(zu dir)*: Probier mal §0.  Oder gleich §1."
msgstr ""

#: Game.Levels.Piazza.L08_subset_iff
msgid ""
msgstr ""

#: Game.Levels.Piazza.L08_subset_iff
msgid ""
msgstr ""

#: Game.Levels.Piazza.L09_subset_iff2
msgid ""
msgstr ""

#: Game.Levels.Piazza.L09_subset_iff2
msgid "**Sub**:  So, so.  Nur eine Definition!\n"
"Und wenn ihr nun mit solchen Inklusionen arbeiten sollt?"
msgstr ""

#. §0: `ext`
#. §1: `intro a`
#. §2: `A`
#. §3: `C`
#. §4: `rw [subset_iff] at *`
#: Game.Levels.Piazza.L09_subset_iff2
msgid "\n"
"**Du**:  Kann ich hier auch irgendwie mit §0 argumentieren?\n"
"\n"
"**Robo**:  Nein, viel einfacher.  Gib dir einfach mit §1 ein beliebiges\n"
"Element aus §2 vor, und zeige, dass es in §3 liegt.\n"
"\n"
"Aber vielleicht schreibst du vorher doch einmal alle Inklusionen mit\n"
"§4 aus, damit du siehst, was passiert.\n"
""
msgstr ""

#: Game.Levels.Piazza.L09_subset_iff2
msgid ""
msgstr ""

#: Game.Levels.Piazza.L10
msgid ""
msgstr ""

#: Game.Levels.Piazza.L10
msgid "**Mem**:  Lasst mich auch noch einmal eine Frage stellen!"
msgstr ""

#. §0: `intro`
#: Game.Levels.Piazza.L10
msgid "\n"
"**Robo**:  Ich würde wieder mit §0 anfangen.\n"
""
msgstr ""

#. §0: `intro`
#: Game.Levels.Piazza.L10
msgid "\n"
"**Robo**:  Und noch ein §0!\n"
""
msgstr ""

#: Game.Levels.Piazza.L10
msgid "**Mem**:  Ja super, ihr habt aber schnell gelernt!"
msgstr ""

#: Game.Levels.Piazza.L11_erase
msgid ""
msgstr ""

#: Game.Levels.Piazza.L11_erase
msgid "**Mem**:  Hey, Fin, wachst machst Du denn da?\n"
"\n"
"Fin ist der kleinste in der Runde und hat bislang nichts gesagt.\n"
"Und jetzt hat er anscheinend gerade vom Stand nebenan eine Pistazie geklaut.\n"
"\n"
"**Fin**:  Ist doch nur eine kleine Übung.\n"
"\n"
"**Mem**: Was für eine Übung?\n"
"\n"
"Fin erklärt sich folgendermaßen."
msgstr ""

#. §0: `Finset`
#. §1: `A`
#. §2: `A`
#. §3: `a`
#. §4: `A`
#. §5: `a`
#: Game.Levels.Piazza.L11_erase
msgid "\n"
"**Du**:  Was bedeutet denn hier jetzt §0?\n"
"\n"
"**Robo**:  Das bedeutet, dass §1 zu den *endlichen* Teilmengen von ℕ gehört.\n"
"Macht aber für die Frage eigentlich keinen Unterschied.\n"
"Links steht §2 ohne §3, rechts steht auch §4 ohne §5.\n"
""
msgstr ""

#: Game.Levels.Piazza.L11_erase
msgid ""
msgstr ""

#: Game.Levels.Piazza.L12_insert
msgid ""
msgstr ""

#: Game.Levels.Piazza.L12_insert
msgid "**Fin**:  Richtig.   Und jetzt lege ich meine Pistazie wieder zurück."
msgstr ""

#: Game.Levels.Piazza.L12_insert
msgid ""
msgstr ""

#: Game.Levels.Piazza.L13_insert_erase
msgid ""
msgstr ""

#: Game.Levels.Piazza.L13_insert_erase
msgid "**Fin**:  Und, was meint ihr – sind jetzt wieder alle Pistazien zu Hause?"
msgstr ""

#: Game.Levels.Piazza.L13_insert_erase
msgid ""
msgstr ""

#. §0: `«{b}» = a`
#: Game.Levels.Piazza.L13_insert_erase
msgid "\n"
"**Fin**: Mach doch eine Fallunterscheidung, ob §0 ist oder nicht.\n"
""
msgstr ""

#: Game.Levels.Piazza.L13_insert_erase
msgid "Die Kinder lachen, bilden einen Kreis um euch um singen ein Lied in einer Sprache,\n"
"die ihr beide nicht versteht.  Dann laufen sie davon.\n"
"\n"
"**Robo**:  Ich glaube, wir können weiterfliegen."
msgstr ""

#: Game.Levels.Piazza
msgid "Piazza"
msgstr ""

#: Game.Levels.Piazza
msgid "Wie es aussieht, seid ihr auf einem Handelsplaneten gelandet.\n"
"Überall stehen Händler, die ihre Waren feilbieten.\n"
"Ihr beäugt neugierig ein paar Stände.\n"
"Manches sieht vertraut und essbar aus, vieles nicht.\n"
"Aber alles ist fein säuberlich sotiert.\n"
"Es gibt Körbe mit Blaubeeren (?), Kisten mit roten Gewächsen, die euch an Tomaten erinnern,\n"
"offene Säcke mit kleinen, rosa Sternchen, usw.\n"
"\n"
"Ein paar Kinder – oder jedenfalls ein paar recht kleine Formalosophen, die sich wie Kinder zu verhalten – laufen euch fast über die Füße.\n"
"Robo springt zurück, da bemerken sie euch und bleiben stehen.  Sie stellen sich als „Fin“, „Ext“, „Mem“, „Set“ und „Sub“ vor, und wirken neugierig.\n"
"\n"
"**Fin**:  Was macht ihr denn hier?\n"
"\n"
"**Du**:  Ehm … wir wollten uns nur mal ein bisschen umschauen.\n"
"\n"
"**Set**: Wir sind hier, um etwas Mengentheorie zu lernen.  Unsere Eltern haben uns hier ausgesetzt.\n"
"\n"
"**Ext**:  Zu Schulungszwecken, sozusagen.\n"
"\n"
"**Du**:  Und, habt ihr schon etwas gelernt?"
msgstr ""

#: Game
msgid "Robo"
msgstr ""

#. §0: `[2025-03-28]`
#. §1: `Fin n`
#. §2: `[2025-03-18]`
#. §3: `[2025-02-20]`
#. §4: `[2025-01-25]`
#: Game
msgid "# Game Over oder QED?\n"
"\n"
"Bist du neugierig, wie sich computer-unterstützte Beweisführung mit „echter“ Mathematik anfühlt?\n"
"Dann bist du hier genau richtig!\n"
"In diesem Spiel lernst du, mit dem Beweisassistenten Lean 4 und der Beweisbibliothek mathlib zu arbeiten.\n"
"Du wirst unter anderem per Induktion Summenformeln beweisen,\n"
"nachweisen, dass eine Abbildung genau dann surjektiv ist, wenn sie ein Rechtsinverses besitzt,\n"
"zeigen, dass es überabzählbar viele Folgen natürlicher Zahlen gibt,\n"
"und die Spur als Abbildung auf dem Raum der quadratischen Matrizen charakterisieren.\n"
"\n"
"Das Interface ist etwas vereinfacht, aber wenn du den *Editor-Modus* aktivierst, fühlt es sich\n"
"fast genauso an wie in VSCode, der Standard-IDE für Lean.\n"
"Auf einem Smartphone oder Tablet bleibst du besser im voreingestellten *Schreibmaschinen-Modus*,\n"
"und schaltest alle autocompletion/correction-Features deiner Bildschirmtastatur aus\n"
"(z.B. unter „intelligentes Tippen > Texterkennung“ auf Samsung-Tastatur).\n"
"\n"
"Klicke auf den ersten Planeten *Logo* in der Übersicht, um deine Reise zu starten.\n"
"\n"
"## Spielstand\n"
"\n"
"Dein Spielstand wird lokal in deinem Browser als *site data* gespeichert.\n"
"Solltest du diese löschen, verlierst du deinen Spielstand!\n"
"Viele Browser löschen *site data* und *cookies* zusammen.\n"
"Du kannst den Spielstand aber auch über das Menü herunterladen und manuell speichern.\n"
"\n"
"## Spielregeln\n"
"\n"
"Wenn du ernsthaft spielen möchtest, solltest du *Rules: regular* wählen.\n"
"Wenn du dich nur ein bisschen umsehen möchtest, wähle *Rules: relaxed*\n"
"  – dann kannst du jedes Level spielen, auch wenn du vorhergehende Levels noch nicht gelöst hast.\n"
"\n"
"## Neuigkeiten\n"
"§0 Der jüngste Planet im Formaloversum heißt Euklid.\n"
"Außerdem gibt es jede Menge kleinerer Verbesserungen, besonders auf Babylon, Cantor und Saturn,\n"
"und in der Dokumentation der Taktiken und Definitionen.\n"
"Auf Babylon wird jetzt über Intervalle in ℕ und ℤ summiert, und nicht mehr über §1.\n"
"Saturn endet nun mit einer polynomiellen Quadratsummenformel.\n"
"\n"
"§2 Von Quantus hat sich der Planet Saturn abgespalten, Luna ist größer geworden, und auch Piazza wurde grundlegend überarbeitet.\n"
"\n"
"§3 Die „Abbildungsplaneten“ sind fertig:  Vieta, Mono, Epo, Iso und Samarkand.\n"
"\n"
"§4 Es gibt jetzt einen Planeten, um sich zu verabschieden:  Ciao.\n"
"\n"
"Hintergrundinformationen und Credits findest du im Menü unter *Game Info*."
msgstr ""

#: Game
msgid "## Projekt ADAM\n"
"\n"
"Dieses Lernspiel wurde im Rahmen des Projekts\n"
"[ADAM: Anticipating the Digital Age of Mathematics](https://hhu-adam.github.io/)\n"
"an der Heinrich-Heine-Universität Düsseldorf entwickelt,\n"
"finanziert durch das Programm *Freiraum 2022* der *Stiftung Innovation in der Hochschullehre*.\n"
"\n"
"## Spielinhalt\n"
"\n"
"**Spoiler Alert** Auf [Github](https://github.com/hhu-adam/Robo?tab=readme-ov-file#overview-over-existing-content) findest du eine Übersicht über den groben mathematischen Inhalt aller Planeten.\n"
"\n"
"## Credits\n"
"\n"
"* **Projektleitung:** Marcus Zibrowius, Immi Halupczok\n"
"* **Game Engine:** Jon Eugster, Alexander Bentkamp, Patrick Massot – siehe [lean4game](https://github.com/leanprover-community/lean4game?tab=readme-ov-file#credits)\n"
"* **Levels:** Jon Eugster, Marcus Zibrowius, Sina Hazratpour\n"
"* **Konzept & Handlung:** Marcus Zibrowius\n"
"* **Illustrationen:** [Dušan Pavlić](https://www.behance.net/dusanpavlic#)\n"
"\n"
"## Kontakt\n"
"\n"
"Das Spiel wird laufend überarbeitet.\n"
"Wir freuen uns sehr über Erfahrungsberichte, Anregungen und Kritik,\n"
"zum Beispiel per Email an\n"
"[Marcus Zibrowius](https://www.math.uni-duesseldorf.de/~zibrowius/).\n"
"Wenn du spezifische Änderungswünsche hast oder Fehler findest, kannst du auch gern einen Issue auf GitHub erstellen:\n"
"\n"
"* zum Spielinhalt im [Robo repo](https://github.com/hhu-adam/Robo/issues)\n"
"* zum Spielserver im [lean4game repo](https://github.com/leanprover-community/lean4game/issues)."
msgstr ""

#: Game
msgid "QED"
msgstr ""

#: Game
msgid "Erkunde ein fremdes Universum mit deinem Smart-Elf Robo!"
msgstr ""

#: Game
msgid "Dieses Spiel illustriert Beweisführung mit Lean anhand verschiedener Themen aus der Eingangsphase des Bachelorstudiums Mathematik."
msgstr ""
